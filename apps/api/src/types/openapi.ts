/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/workspaces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List workspaces
         * @description Get all workspaces accessible to the authenticated user
         */
        get: operations["listWorkspaces"];
        put?: never;
        /**
         * Create workspace
         * @description Create a new workspace and assign creator as owner
         */
        post: operations["createWorkspace"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/slug/{workspaceSlug}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Workspace slug */
                workspaceSlug: string;
            };
            cookie?: never;
        };
        /**
         * Get workspace by slug
         * @description Get a specific workspace by its slug
         */
        get: operations["getWorkspaceBySlug"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspaceId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Workspace ID */
                workspaceId: string;
            };
            cookie?: never;
        };
        /**
         * Get workspace
         * @description Get a specific workspace by ID
         */
        get: operations["getWorkspace"];
        put?: never;
        post?: never;
        /**
         * Delete workspace
         * @description Delete a workspace and all associated data
         */
        delete: operations["deleteWorkspace"];
        options?: never;
        head?: never;
        /**
         * Update workspace
         * @description Update workspace properties
         */
        patch: operations["updateWorkspace"];
        trace?: never;
    };
    "/v1/workspaces/{workspaceId}/deployments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List deployments */
        get: operations["listDeployments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspaceId}/resource-providers": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspaceId: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspaceId}/resource-providers/{providerId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspaceId: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspaceId}/resource-providers/{providerId}/set": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Set the resources for a provider */
        put: operations["setResourceProvidersResources"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspaceId}/resources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all resources
         * @description Returns a paginated list of resources for workspace {workspaceId}.
         */
        get: operations["getAllResources"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        BooleanValue: boolean;
        CelSelector: {
            cel: string;
        };
        CreateWorkspaceRequest: {
            /** @description Display name of the workspace */
            name: string;
            /** @description URL-friendly unique identifier (lowercase, no spaces) */
            slug: string;
        };
        Deployment: {
            description?: string;
            id: string;
            jobAgentConfig: Record<string, unknown>;
            jobAgentId?: string;
            name: string;
            resourceSelector?: components["schemas"]["Selector"];
            slug: string;
            systemId: string;
        };
        DeploymentAndSystem: {
            deployment: components["schemas"]["Deployment"];
            system: components["schemas"]["System"];
        };
        Error: {
            /** @description Error code */
            code?: string;
            /** @description Additional error details */
            details?: Record<string, never>;
            /** @description Error message */
            message: string;
        };
        ErrorResponse: {
            /** @example Workspace not found */
            error?: string;
        };
        IntegerValue: number;
        JsonSelector: {
            json: Record<string, unknown>;
        };
        LiteralValue: components["schemas"]["BooleanValue"] | components["schemas"]["NumberValue"]   | components["schemas"]["StringValue"] | components["schemas"]["ObjectValue"] | components["schemas"]["NullValue"];
        /** @enum {boolean} */
        NullValue: true;
        NumberValue: number;
        ObjectValue: {
            object: Record<string, unknown>;
        };
        PropertyMatcher: {
            fromProperty: string[];
            /** @enum {string} */
            operator: "equals" | "notEquals" | "contains" | "startsWith" | "endsWith" | "regex";
            toProperty: string[];
        };
        ReferenceValue: {
            path: string[];
            reference: string;
        };
        Resource: {
            config: Record<string, unknown>;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            deletedAt?: string;
            identifier: string;
            kind: string;
            /** Format: date-time */
            lockedAt?: string;
            metadata: Record<string, string>;
            name: string;
            providerId?: string;
            /** Format: date-time */
            updatedAt?: string;
            version: string;
            workspaceId: string;
        };
        ResourceProvider: {
            /** Format: date-time */
            createdAt: string;
            id: string;
            metadata: Record<string, string>;
            name: string;
            /** Format: uuid */
            workspaceId: string;
        };
        ResourceProviderResource: {
            config: Record<string, unknown>;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            deletedAt?: string;
            identifier: string;
            kind: string;
            /** Format: date-time */
            lockedAt?: string;
            metadata: Record<string, string>;
            name: string;
            /** Format: date-time */
            updatedAt?: string;
            version: string;
        };
        Selector: components["schemas"]["JsonSelector"] | components["schemas"]["CelSelector"];
        SensitiveValue: {
            valueHash: string;
        };
        StringValue: string;
        System: {
            description?: string;
            id: string;
            name: string;
            workspaceId: string;
        };
        UpdateWorkspaceRequest: {
            /** @description Display name of the workspace */
            name?: string;
            /** @description URL-friendly unique identifier (lowercase, no spaces) */
            slug?: string;
        };
        Value: components["schemas"]["LiteralValue"] | components["schemas"]["ReferenceValue"] | components["schemas"]["SensitiveValue"];
        Workspace: {
            /** @description AWS IAM role ARN for integrations */
            awsRoleArn?: string | null;
            /**
             * Format: date-time
             * @description Timestamp when workspace was created
             */
            createdAt: string;
            /**
             * Format: email
             * @description Google service account email for integrations
             */
            googleServiceAccountEmail?: string | null;
            /**
             * Format: uuid
             * @description Unique identifier for the workspace
             */
            id: string;
            /** @description Display name of the workspace */
            name: string;
            /** @description URL-friendly unique identifier */
            slug: string;
        };
        WorkspaceList: {
            /** @description Total number of workspaces */
            total: number;
            workspaces: components["schemas"]["Workspace"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listWorkspaces: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of workspaces */
            200: {
                headers: Record<string, unknown>;
                content: {
                    "application/json": components["schemas"]["WorkspaceList"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: Record<string, unknown>;
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: Record<string, unknown>;
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    createWorkspace: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateWorkspaceRequest"];
            };
        };
        responses: {
            /** @description Workspace created successfully */
            201: {
                headers: Record<string, unknown>;
                content: {
                    "application/json": components["schemas"]["Workspace"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: Record<string, unknown>;
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: Record<string, unknown>;
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Workspace slug already exists */
            409: {
                headers: Record<string, unknown>;
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: Record<string, unknown>;
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getWorkspaceBySlug: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Workspace slug */
                workspaceSlug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Workspace details */
            200: {
                headers: Record<string, unknown>;
                content: {
                    "application/json": components["schemas"]["Workspace"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: Record<string, unknown>;
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Workspace not found */
            404: {
                headers: Record<string, unknown>;
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: Record<string, unknown>;
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getWorkspace: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Workspace ID */
                workspaceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Workspace details */
            200: {
                headers: Record<string, unknown>;
                content: {
                    "application/json": components["schemas"]["Workspace"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: Record<string, unknown>;
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Workspace not found */
            404: {
                headers: Record<string, unknown>;
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: Record<string, unknown>;
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    deleteWorkspace: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Workspace ID */
                workspaceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Workspace deleted successfully */
            204: {
                headers: Record<string, unknown>;
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: Record<string, unknown>;
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Workspace not found */
            404: {
                headers: Record<string, unknown>;
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: Record<string, unknown>;
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    updateWorkspace: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Workspace ID */
                workspaceId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateWorkspaceRequest"];
            };
        };
        responses: {
            /** @description Workspace updated successfully */
            200: {
                headers: Record<string, unknown>;
                content: {
                    "application/json": components["schemas"]["Workspace"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: Record<string, unknown>;
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: Record<string, unknown>;
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Workspace not found */
            404: {
                headers: Record<string, unknown>;
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Workspace slug already exists */
            409: {
                headers: Record<string, unknown>;
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: Record<string, unknown>;
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    listDeployments: {
        parameters: {
            query?: {
                /** @description Maximum number of items to return */
                limit?: number;
                /** @description Number of items to skip */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paginated list of items */
            200: {
                headers: Record<string, unknown>;
                content: {
                    "application/json": {
                        items: components["schemas"]["DeploymentAndSystem"][];
                        /** @description Maximum number of items returned */
                        limit: number;
                        /** @description Number of items skipped */
                        offset: number;
                        /** @description Total number of items available */
                        total: number;
                    };
                };
            };
        };
    };
    setResourceProvidersResources: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    resources: components["schemas"]["ResourceProviderResource"][];
                };
            };
        };
        responses: {
            /** @description Accepted response */
            202: {
                headers: Record<string, unknown>;
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    getAllResources: {
        parameters: {
            query?: {
                /** @description Maximum number of items to return */
                limit?: number;
                /** @description Number of items to skip */
                offset?: number;
                /** @description CEL expression to filter the results */
                cel?: string;
            };
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paginated list of items */
            200: {
                headers: Record<string, unknown>;
                content: {
                    "application/json": {
                        items: components["schemas"]["Resource"][];
                        /** @description Maximum number of items returned */
                        limit: number;
                        /** @description Number of items skipped */
                        offset: number;
                        /** @description Total number of items available */
                        total: number;
                    };
                };
            };
        };
    };
}
