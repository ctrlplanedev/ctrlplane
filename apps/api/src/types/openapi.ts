/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/workspaces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List workspaces
         * @description Get all workspaces accessible to the authenticated user
         */
        get: operations["listWorkspaces"];
        put?: never;
        /**
         * Create workspace
         * @description Create a new workspace and assign creator as owner
         */
        post: operations["createWorkspace"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/slug/{workspaceSlug}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Workspace slug */
                workspaceSlug: string;
            };
            cookie?: never;
        };
        /**
         * Get workspace by slug
         * @description Get a specific workspace by its slug
         */
        get: operations["getWorkspaceBySlug"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspaceId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Workspace ID */
                workspaceId: string;
            };
            cookie?: never;
        };
        /**
         * Get workspace
         * @description Get a specific workspace by ID
         */
        get: operations["getWorkspace"];
        put?: never;
        post?: never;
        /**
         * Delete workspace
         * @description Delete a workspace and all associated data
         */
        delete: operations["deleteWorkspace"];
        options?: never;
        head?: never;
        /**
         * Update workspace
         * @description Update workspace properties
         */
        patch: operations["updateWorkspace"];
        trace?: never;
    };
    "/v1/workspaces/{workspaceId}/deployments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List deployments */
        get: operations["listDeployments"];
        /** Upsert deployment */
        put: operations["upsertDeployment"];
        /** Create deployment */
        post: operations["createDeployment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspaceId}/deployments/{deploymentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get deployment */
        get: operations["getDeployment"];
        /** Upsert deployment */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the workspace */
                    workspaceId: string;
                    /** @description ID of the deployment */
                    deploymentId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpsertDeploymentRequest"];
                };
            };
            responses: {
                /** @description Accepted response */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Deployment"];
                    };
                };
            };
        };
        post?: never;
        /** Delete deployment */
        delete: operations["deleteDeployment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspaceId}/deployments/{deploymentId}/versions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List deployment versions */
        get: operations["listDeploymentVersions"];
        /** Upsert deployment version */
        put: operations["upsertDeploymentVersion"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspaceId}/deploymentversions/{deploymentVersionId}/user-approval-records": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Upsert user approval record */
        put: operations["upsertUserApprovalRecord"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspaceId}/environments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List environments */
        get: operations["listEnvironments"];
        /** Upsert environment */
        put: operations["upsertEnvironment"];
        /** Create environment */
        post: operations["createEnvironment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspaceId}/environments/{environmentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get environment */
        get: operations["getEnvironment"];
        /** Upsert environment */
        put: operations["upsertEnvironmentById"];
        post?: never;
        /** Delete environment */
        delete: operations["deleteEnvironment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspaceId}/jobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List jobs
         * @description Returns a list of jobs.
         */
        get: operations["getJobs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspaceId}/jobs/{jobId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get job
         * @description Returns a specific job by ID.
         */
        get: operations["getJob"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspaceId}/jobs/{jobId}/with-release": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get job with release
         * @description Returns a specific job by ID with its release.
         */
        get: operations["getJobWithRelease"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspaceId}/policies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List policies */
        get: operations["listPolicies"];
        /** Upsert a policy */
        put: operations["upsertPolicy"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspaceId}/relationship-rules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create relationship rule */
        post: operations["createRelationshipRule"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspaceId}/relationship-rules/{relationshipRuleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get relationship */
        get: operations["getRelationshipRule"];
        /** Upsert relationship */
        put: operations["upsertRelationshipById"];
        post?: never;
        /** Delete relationship */
        delete: operations["deleteRelationship"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspaceId}/resource-providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Upsert resource provider */
        put: operations["upsertResourceProvider"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspaceId}/resource-providers/name/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a resource provider by name */
        get: operations["getResourceProviderByName"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspaceId}/resource-providers/{providerId}/set": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Set the resources for a provider */
        put: operations["setResourceProvidersResources"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspaceId}/resources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all resources
         * @description Returns a paginated list of resources for workspace {workspaceId}.
         */
        get: operations["getAllResources"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspaceId}/resources/identifier/{identifier}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get resource by identifier
         * @description Returns a resource by its identifier.
         */
        get: operations["getResourceByIdentifier"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspaceId}/systems": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List systems */
        get: operations["listSystems"];
        /** Upsert system */
        put: operations["upsertSystem"];
        /** Create system */
        post: operations["createSystem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspaceId}/systems/{systemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get system */
        get: operations["getSystem"];
        /** Upsert system */
        put: operations["upsertSystemById"];
        post?: never;
        /** Delete system */
        delete: operations["deleteSystem"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AnyApprovalRule: {
            /** Format: int32 */
            minApprovals: number;
        };
        /** @enum {string} */
        ApprovalStatus: "approved" | "rejected";
        BooleanValue: boolean;
        CelMatcher: {
            cel: string;
        };
        CelSelector: {
            cel: string;
        };
        CreateDeploymentRequest: {
            description?: string;
            jobAgentConfig?: {
                [key: string]: unknown;
            };
            jobAgentId?: string;
            name: string;
            resourceSelector?: components["schemas"]["Selector"];
            slug: string;
            systemId: string;
        };
        CreateEnvironmentRequest: {
            description?: string;
            name: string;
            resourceSelector?: components["schemas"]["Selector"];
            systemId: string;
        };
        CreateRelationshipRuleRequest: {
            description?: string;
            fromSelector?: components["schemas"]["Selector"];
            fromType: components["schemas"]["RelatableEntityType"];
            matcher: components["schemas"]["CelMatcher"];
            metadata: {
                [key: string]: string;
            };
            name: string;
            reference: string;
            relationshipType: string;
            toSelector?: components["schemas"]["Selector"];
            toType: components["schemas"]["RelatableEntityType"];
        };
        CreateSystemRequest: {
            description?: string;
            name: string;
        };
        CreateWorkspaceRequest: {
            /** @description Display name of the workspace */
            name: string;
            /** @description URL-friendly unique identifier (lowercase, no spaces) */
            slug: string;
        };
        Deployment: {
            description?: string;
            id: string;
            jobAgentConfig: {
                [key: string]: unknown;
            };
            jobAgentId?: string;
            name: string;
            resourceSelector?: components["schemas"]["Selector"];
            slug: string;
            systemId: string;
        };
        DeploymentAndSystem: {
            deployment: components["schemas"]["Deployment"];
            system: components["schemas"]["System"];
        };
        DeploymentVersion: {
            config: {
                [key: string]: unknown;
            };
            /** Format: date-time */
            createdAt: string;
            deploymentId: string;
            id: string;
            jobAgentConfig: {
                [key: string]: unknown;
            };
            message?: string;
            metadata?: {
                [key: string]: string;
            };
            name: string;
            status: components["schemas"]["DeploymentVersionStatus"];
            tag: string;
        };
        /** @enum {string} */
        DeploymentVersionStatus: "unspecified" | "building" | "ready" | "failed" | "rejected";
        Environment: {
            /** Format: date-time */
            createdAt: string;
            description?: string;
            id: string;
            name: string;
            resourceSelector?: components["schemas"]["Selector"];
            systemId: string;
        };
        EnvironmentAndSystem: {
            environment: components["schemas"]["Environment"];
            system: components["schemas"]["System"];
        };
        EnvironmentProgressionRule: {
            dependsOnEnvironmentSelector: components["schemas"]["Selector"];
            id: string;
            /**
             * Format: int32
             * @description Maximum age of dependency deployment before blocking progression (prevents stale promotions)
             */
            maximumAgeHours?: number;
            /**
             * Format: int32
             * @description Minimum time to wait after the depends on environment is in a success state before the current environment can be deployed
             * @default 0
             */
            minimumSockTimeMinutes: number;
            /**
             * Format: float
             * @default 100
             */
            minimumSuccessPercentage: number;
            policyId: string;
            successStatuses?: components["schemas"]["JobStatus"][];
        };
        Error: {
            /** @description Error code */
            code?: string;
            /** @description Additional error details */
            details?: Record<string, never>;
            /** @description Error message */
            message: string;
        };
        ErrorResponse: {
            /** @example Workspace not found */
            error?: string;
        };
        IntegerValue: number;
        Job: {
            /** Format: date-time */
            completedAt?: string;
            /** Format: date-time */
            createdAt: string;
            externalId?: string;
            id: string;
            jobAgentConfig: {
                [key: string]: unknown;
            };
            jobAgentId: string;
            metadata: {
                [key: string]: string;
            };
            releaseId: string;
            /** Format: date-time */
            startedAt?: string;
            status: components["schemas"]["JobStatus"];
            /** Format: date-time */
            updatedAt: string;
        };
        /** @enum {string} */
        JobStatus: "cancelled" | "skipped" | "inProgress" | "actionRequired" | "pending" | "failure" | "invalidJobAgent" | "invalidIntegration" | "externalRunNotFound" | "successful";
        JobUpdateEvent: {
            agentId?: string;
            externalId?: string;
            fieldsToUpdate?: ("completedAt" | "createdAt" | "externalId" | "id" | "jobAgentConfig" | "jobAgentId" | "metadata" | "releaseId" | "startedAt" | "status" | "updatedAt")[];
            id?: string;
            job: components["schemas"]["Job"];
        } & (unknown | unknown);
        JobWithRelease: {
            deployment?: components["schemas"]["Deployment"];
            environment?: components["schemas"]["Environment"];
            job: components["schemas"]["Job"];
            release: components["schemas"]["Release"];
            resource?: components["schemas"]["Resource"];
        };
        JsonSelector: {
            json: {
                [key: string]: unknown;
            };
        };
        LiteralValue: components["schemas"]["BooleanValue"] | components["schemas"]["NumberValue"] | components["schemas"]["IntegerValue"] | components["schemas"]["StringValue"] | components["schemas"]["ObjectValue"] | components["schemas"]["NullValue"];
        /** @enum {boolean} */
        NullValue: true;
        NumberValue: number;
        ObjectValue: {
            object: {
                [key: string]: unknown;
            };
        };
        Policy: {
            createdAt: string;
            description?: string;
            enabled: boolean;
            id: string;
            /** @description Arbitrary metadata for the policy (record<string, string>) */
            metadata: {
                [key: string]: string;
            };
            name: string;
            priority: number;
            rules: components["schemas"]["PolicyRule"][];
            selectors: components["schemas"]["PolicyTargetSelector"][];
            workspaceId: string;
        };
        PolicyRule: {
            anyApproval?: components["schemas"]["AnyApprovalRule"];
            createdAt: string;
            environmentProgression?: components["schemas"]["EnvironmentProgressionRule"];
            id: string;
            policyId: string;
        };
        PolicyTargetSelector: {
            deploymentSelector?: components["schemas"]["Selector"];
            environmentSelector?: components["schemas"]["Selector"];
            id: string;
            resourceSelector?: components["schemas"]["Selector"];
        };
        PropertyMatcher: {
            fromProperty: string[];
            /** @enum {string} */
            operator: "equals" | "notEquals" | "contains" | "startsWith" | "endsWith" | "regex";
            toProperty: string[];
        };
        ReferenceValue: {
            path: string[];
            reference: string;
        };
        /** @enum {string} */
        RelatableEntityType: "deployment" | "environment" | "resource";
        RelationshipRule: {
            description?: string;
            fromSelector?: components["schemas"]["Selector"];
            fromType: components["schemas"]["RelatableEntityType"];
            id: string;
            matcher: components["schemas"]["CelMatcher"];
            metadata: {
                [key: string]: string;
            };
            name: string;
            reference: string;
            relationshipType: string;
            toSelector?: components["schemas"]["Selector"];
            toType: components["schemas"]["RelatableEntityType"];
            workspaceId: string;
        };
        Release: {
            createdAt: string;
            encryptedVariables: string[];
            releaseTarget: components["schemas"]["ReleaseTarget"];
            variables: {
                [key: string]: components["schemas"]["LiteralValue"];
            };
            version: components["schemas"]["DeploymentVersion"];
        };
        ReleaseTarget: {
            deploymentId: string;
            environmentId: string;
            resourceId: string;
        };
        Resource: {
            config: {
                [key: string]: unknown;
            };
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            deletedAt?: string;
            identifier: string;
            kind: string;
            /** Format: date-time */
            lockedAt?: string;
            metadata: {
                [key: string]: string;
            };
            name: string;
            providerId?: string;
            /** Format: date-time */
            updatedAt?: string;
            version: string;
            workspaceId: string;
        };
        ResourceProvider: {
            /** Format: date-time */
            createdAt: string;
            id: string;
            /** @description Arbitrary metadata for the resource provider (record<string, string>) */
            metadata?: {
                [key: string]: string;
            };
            name: string;
            /** Format: uuid */
            workspaceId: string;
        };
        ResourceProviderResource: {
            config: {
                [key: string]: unknown;
            };
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            deletedAt?: string;
            identifier: string;
            kind: string;
            /** Format: date-time */
            lockedAt?: string;
            metadata: {
                [key: string]: string;
            };
            name: string;
            /** Format: date-time */
            updatedAt?: string;
            version: string;
        };
        Selector: components["schemas"]["JsonSelector"] | components["schemas"]["CelSelector"];
        SensitiveValue: {
            valueHash: string;
        };
        StringValue: string;
        System: {
            description?: string;
            id: string;
            name: string;
            slug: string;
            workspaceId: string;
        };
        UpdateWorkspaceRequest: {
            /** @description Display name of the workspace */
            name?: string;
            /** @description URL-friendly unique identifier (lowercase, no spaces) */
            slug?: string;
        };
        UpsertDeploymentRequest: {
            description?: string;
            jobAgentConfig?: {
                [key: string]: unknown;
            };
            jobAgentId?: string;
            name: string;
            resourceSelector?: components["schemas"]["Selector"];
            slug: string;
            systemId: string;
        };
        UpsertDeploymentVersionRequest: {
            config?: {
                [key: string]: unknown;
            };
            /** Format: date-time */
            createdAt?: string;
            deploymentId: string;
            jobAgentConfig?: {
                [key: string]: unknown;
            };
            metadata?: {
                [key: string]: string;
            };
            name?: string;
            status?: components["schemas"]["DeploymentVersionStatus"];
            tag: string;
        };
        UpsertEnvironmentRequest: {
            description?: string;
            name: string;
            resourceSelector?: components["schemas"]["Selector"];
            systemId: string;
        };
        UpsertPolicyRequest: {
            description?: string;
            enabled?: boolean;
            /** @description Arbitrary metadata for the policy (record<string, string>) */
            metadata?: {
                [key: string]: string;
            };
            name: string;
            priority?: number;
            rules?: components["schemas"]["PolicyRule"][];
            selectors?: components["schemas"]["PolicyTargetSelector"][];
        };
        UpsertRelationshipRuleRequest: {
            description?: string;
            fromSelector?: components["schemas"]["Selector"];
            fromType: components["schemas"]["RelatableEntityType"];
            matcher: components["schemas"]["CelMatcher"];
            metadata: {
                [key: string]: string;
            };
            name: string;
            reference: string;
            relationshipType: string;
            toSelector?: components["schemas"]["Selector"];
            toType: components["schemas"]["RelatableEntityType"];
        };
        UpsertResourceProviderRequest: {
            id: string;
            /** @description Arbitrary metadata for the resource provider (record<string, string>) */
            metadata?: {
                [key: string]: string;
            };
            name: string;
        };
        UpsertSystemRequest: {
            description?: string;
            name: string;
        };
        UpsertUserApprovalRecordRequest: {
            environmentIds?: string[];
            reason?: string;
            status: components["schemas"]["ApprovalStatus"];
        };
        UserApprovalRecord: {
            /** Format: date-time */
            createdAt: string;
            environmentId: string;
            reason?: string;
            status: components["schemas"]["ApprovalStatus"];
            userId: string;
            versionId: string;
        };
        Value: components["schemas"]["LiteralValue"] | components["schemas"]["ReferenceValue"] | components["schemas"]["SensitiveValue"];
        Workspace: {
            /** @description AWS IAM role ARN for integrations */
            awsRoleArn?: string | null;
            /**
             * Format: date-time
             * @description Timestamp when workspace was created
             */
            createdAt: string;
            /**
             * Format: email
             * @description Google service account email for integrations
             */
            googleServiceAccountEmail?: string | null;
            /**
             * Format: uuid
             * @description Unique identifier for the workspace
             */
            id: string;
            /** @description Display name of the workspace */
            name: string;
            /** @description URL-friendly unique identifier */
            slug: string;
        };
        WorkspaceList: {
            /** @description Total number of workspaces */
            total: number;
            workspaces: components["schemas"]["Workspace"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listWorkspaces: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of workspaces */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceList"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    createWorkspace: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateWorkspaceRequest"];
            };
        };
        responses: {
            /** @description Workspace created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workspace"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Workspace slug already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getWorkspaceBySlug: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Workspace slug */
                workspaceSlug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Workspace details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workspace"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Workspace not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getWorkspace: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Workspace ID */
                workspaceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Workspace details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workspace"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Workspace not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    deleteWorkspace: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Workspace ID */
                workspaceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Workspace deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Workspace not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    updateWorkspace: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Workspace ID */
                workspaceId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateWorkspaceRequest"];
            };
        };
        responses: {
            /** @description Workspace updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workspace"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Workspace not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Workspace slug already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    listDeployments: {
        parameters: {
            query?: {
                /** @description Maximum number of items to return */
                limit?: number;
                /** @description Number of items to skip */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paginated list of items */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["DeploymentAndSystem"][];
                        /** @description Maximum number of items returned */
                        limit: number;
                        /** @description Number of items skipped */
                        offset: number;
                        /** @description Total number of items available */
                        total: number;
                    };
                };
            };
        };
    };
    upsertDeployment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertDeploymentRequest"];
            };
        };
        responses: {
            /** @description Accepted response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Deployment"];
                };
            };
        };
    };
    createDeployment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateDeploymentRequest"];
            };
        };
        responses: {
            /** @description Accepted response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Deployment"];
                };
            };
        };
    };
    getDeployment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
                /** @description ID of the deployment */
                deploymentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Deployment"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteDeployment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
                /** @description ID of the deployment */
                deploymentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Accepted response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Deployment"];
                };
            };
        };
    };
    listDeploymentVersions: {
        parameters: {
            query?: {
                /** @description Maximum number of items to return */
                limit?: number;
                /** @description Number of items to skip */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
                /** @description ID of the deployment */
                deploymentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paginated list of items */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["DeploymentVersion"][];
                        /** @description Maximum number of items returned */
                        limit: number;
                        /** @description Number of items skipped */
                        offset: number;
                        /** @description Total number of items available */
                        total: number;
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    upsertDeploymentVersion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
                /** @description ID of the deployment */
                deploymentId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertDeploymentVersionRequest"];
            };
        };
        responses: {
            /** @description Accepted response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeploymentVersion"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    upsertUserApprovalRecord: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
                /** @description ID of the deployment version */
                deploymentVersionId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertUserApprovalRecordRequest"];
            };
        };
        responses: {
            /** @description OK response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success?: boolean;
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listEnvironments: {
        parameters: {
            query?: {
                /** @description Maximum number of items to return */
                limit?: number;
                /** @description Number of items to skip */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paginated list of items */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["EnvironmentAndSystem"][];
                        /** @description Maximum number of items returned */
                        limit: number;
                        /** @description Number of items skipped */
                        offset: number;
                        /** @description Total number of items available */
                        total: number;
                    };
                };
            };
        };
    };
    upsertEnvironment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertEnvironmentRequest"];
            };
        };
        responses: {
            /** @description Accepted response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Environment"];
                };
            };
        };
    };
    createEnvironment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateEnvironmentRequest"];
            };
        };
        responses: {
            /** @description Accepted response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Environment"];
                };
            };
        };
    };
    getEnvironment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
                /** @description ID of the environment */
                environmentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Environment"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    upsertEnvironmentById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
                /** @description ID of the environment */
                environmentId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertEnvironmentRequest"];
            };
        };
        responses: {
            /** @description OK response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Environment"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteEnvironment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
                /** @description ID of the environment */
                environmentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Accepted response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Environment"];
                };
            };
        };
    };
    getJobs: {
        parameters: {
            query?: {
                /** @description Maximum number of items to return */
                limit?: number;
                /** @description Number of items to skip */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paginated list of items */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["JobWithRelease"][];
                        /** @description Maximum number of items returned */
                        limit: number;
                        /** @description Number of items skipped */
                        offset: number;
                        /** @description Total number of items available */
                        total: number;
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
                /** @description ID of the job */
                jobId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get job */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Job"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getJobWithRelease: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
                /** @description ID of the job */
                jobId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get job with release */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobWithRelease"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listPolicies: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of policies */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        policies?: components["schemas"]["Policy"][];
                    };
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    upsertPolicy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertPolicyRequest"];
            };
        };
        responses: {
            /** @description OK response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Policy"];
                };
            };
            /** @description Accepted response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Policy"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createRelationshipRule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRelationshipRuleRequest"];
            };
        };
        responses: {
            /** @description Resource created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelationshipRule"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getRelationshipRule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
                /** @description ID of the relationship rule */
                relationshipRuleId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelationshipRule"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    upsertRelationshipById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
                /** @description ID of the relationship rule */
                relationshipRuleId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertRelationshipRuleRequest"];
            };
        };
        responses: {
            /** @description Accepted response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelationshipRule"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteRelationship: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
                /** @description ID of the relationship rule */
                relationshipRuleId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Accepted response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelationshipRule"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    upsertResourceProvider: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertResourceProviderRequest"];
            };
        };
        responses: {
            /** @description OK response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceProvider"];
                };
            };
        };
    };
    getResourceProviderByName: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
                /** @description Name of the resource provider */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceProvider"];
                };
            };
        };
    };
    setResourceProvidersResources: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
                /** @description ID of the resource provider */
                providerId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    resources: components["schemas"]["ResourceProviderResource"][];
                };
            };
        };
        responses: {
            /** @description Accepted response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    getAllResources: {
        parameters: {
            query?: {
                /** @description Maximum number of items to return */
                limit?: number;
                /** @description Number of items to skip */
                offset?: number;
                /** @description CEL expression to filter the results */
                cel?: string;
            };
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paginated list of items */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["Resource"][];
                        /** @description Maximum number of items returned */
                        limit: number;
                        /** @description Number of items skipped */
                        offset: number;
                        /** @description Total number of items available */
                        total: number;
                    };
                };
            };
        };
    };
    getResourceByIdentifier: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
                /** @description Identifier of the resource */
                identifier: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Resource"];
                };
            };
        };
    };
    listSystems: {
        parameters: {
            query?: {
                /** @description Maximum number of items to return */
                limit?: number;
                /** @description Number of items to skip */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paginated list of items */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["System"][];
                        /** @description Maximum number of items returned */
                        limit: number;
                        /** @description Number of items skipped */
                        offset: number;
                        /** @description Total number of items available */
                        total: number;
                    };
                };
            };
        };
    };
    upsertSystem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["System"];
            };
        };
        responses: {
            /** @description Accepted response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["System"];
                };
            };
        };
    };
    createSystem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateSystemRequest"];
            };
        };
        responses: {
            /** @description Accepted response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["System"];
                };
            };
        };
    };
    getSystem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
                /** @description ID of the system */
                systemId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["System"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    upsertSystemById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
                /** @description ID of the system */
                systemId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertSystemRequest"];
            };
        };
        responses: {
            /** @description OK response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["System"];
                };
            };
        };
    };
    deleteSystem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the workspace */
                workspaceId: string;
                /** @description ID of the system */
                systemId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Accepted response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["System"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
