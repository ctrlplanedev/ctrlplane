syntax = "proto3";

package workspace;

import "google/protobuf/struct.proto";

option go_package = "workspace-engine/pkg/pb";

message Policy {
  string id = 1;
  string name = 2;
  string description = 3;
  string created_at = 4;
  string workspace_id = 5;

  repeated PolicyTargetSelector selectors = 6;

  repeated PolicyRule rules = 7;
}

message PolicyTargetSelector {
  string id = 1;
  optional google.protobuf.Struct deployment_selector = 3;
  optional google.protobuf.Struct environment_selector = 4;
  optional google.protobuf.Struct resource_selector = 5;
}

message PolicyRule {
  string id = 1;
  string policy_id = 2;
  string created_at = 3;

  oneof rule {
    AnyApprovalRule any_approval = 4;
  }
}

enum ApprovalStatus {
  APPROVAL_STATUS_UNSPECIFIED = 0;
  APPROVAL_STATUS_APPROVED = 1;
  APPROVAL_STATUS_REJECTED = 2;
}

message UserApprovalRecord {
  string user_id = 1;
  string version_id = 2;
  ApprovalStatus status = 3;
  optional string reason = 4;
  string created_at = 5;
}

// Deny Window - prevents deployments during specified time windows
// Example: block deployments on weekends, holidays, or specific hours
message DenyWindowRule {
  // RRule configuration for recurrence patterns (RRULE format)
  // https://github.com/teambition/rrule-go
  google.protobuf.Struct rrule = 1;
  
  // End datetime for the deny window (RFC3339 format)
  optional string dtend = 2;
  
  // IANA timezone (e.g., "America/New_York", "UTC")
  string time_zone = 3;
}

// User Approval - requires approval from a specific user
message UserApprovalRule {
  // User ID who must approve
  string user_id = 1;
}

// Role Approval - requires approval from a user with a specific role
message RoleApprovalRule {
  // Role ID - any user with this role can approve
  string role_id = 1;
}

// Any Approval - requires a minimum number of approvals from any authorized users
message AnyApprovalRule {
  // Minimum number of approvals required
  int32 min_approvals = 1;
}

// Concurrency - limits the number of concurrent deployments
message ConcurrencyRule {
  // Maximum number of concurrent deployments allowed
  int32 max_concurrent = 1;
}

// Environment Version Rollout - controls progressive rollout across environments
// Example: deploy to dev -> staging -> production with validation between steps
message EnvironmentVersionRolloutRule {
  // Ordered list of environment IDs for progressive rollout
  repeated string environment_order = 1;
  
  // Time to wait between environment deployments (in seconds)
  int32 wait_seconds = 2;
  
  // Optional success threshold (0.0 to 1.0) that must be met before proceeding
  // Example: 0.95 means 95% of deployments must succeed
  optional double success_threshold = 3;
}

// Max Retries - limits the number of deployment retry attempts
message MaxRetriesRule {
  // Maximum number of retry attempts allowed
  int32 max_retries = 1;
}

// Deployment Version Selector - filters which versions can be deployed
// Example: only allow versions matching specific tags or version patterns
message DeploymentVersionSelectorRule {
  // Selector for filtering deployment versions
  optional google.protobuf.Struct version_selector = 1;
}

message Resource {
  string id = 1;
  string name = 2;
  string version = 3;
  string kind = 4;
  string identifier = 5;
  string created_at = 6; // ISO8601 string or RFC3339 timestamp
  string workspace_id = 7;
  optional string provider_id = 8; // nullable

  // config can be a deeply nested object, so we use google.protobuf.Struct
  google.protobuf.Struct config = 9;

  optional string locked_at = 10; // nullable, ISO8601 string or RFC3339 timestamp
  optional string updated_at = 11; // nullable, ISO8601 string or RFC3339 timestamp
  optional string deleted_at = 12; // nullable, ISO8601 string or RFC3339 timestamp

  map<string, string> metadata = 13;
}

message Environment {
  string id = 1;
  string name = 2;
  string description = 3;
  string system_id = 4;

  google.protobuf.Struct resource_selector = 5;
  
  string created_at = 6;
}

message Deployment {
  string id = 1;
  string name = 2;
  string slug = 3;
  string description = 4;
  string system_id = 5;

  optional string job_agent_id = 6;
  optional google.protobuf.Struct job_agent_config = 7;
  optional google.protobuf.Struct resource_selector = 8;
}

enum JobStatus {
  JOB_STATUS_CANCELLED = 0;
  JOB_STATUS_SKIPPED = 1;
  JOB_STATUS_IN_PROGRESS = 2;
  JOB_STATUS_ACTION_REQUIRED = 3;
  JOB_STATUS_PENDING = 4;
  JOB_STATUS_FAILURE = 5;
  JOB_STATUS_INVALID_JOB_AGENT = 6;
  JOB_STATUS_INVALID_INTEGRATION = 7;
  JOB_STATUS_EXTERNAL_RUN_NOT_FOUND = 8;
  JOB_STATUS_SUCCESSFUL = 9;
}

message JobAgent {
  string id = 1;
  string workspace_id = 2;
  string name = 3;
  string type = 4;
  google.protobuf.Struct config = 5;
}

message Job {
  string id = 1;

  string release_id = 2;

  string job_agent_id = 3;
  google.protobuf.Struct job_agent_config = 4;

  optional string external_id = 5;

  JobStatus status = 6;
  
  string resource_id = 7;
  string environment_id = 8;
  string deployment_id = 9;

  string created_at = 10;
  string updated_at = 11;
  optional string started_at = 12;
  optional string completed_at = 13;
}

message ReleaseTarget {
  string id = 1;
  string resource_id = 2;
  string environment_id = 3;
  string deployment_id = 4;
  string created_at = 5;
}

message VariableValue {
  oneof value {
    string string_value = 2;
    bool   bool_value = 3;
    double double_value = 4;
    int64  int64_value = 5;

    google.protobuf.Struct object_value = 10;
    google.protobuf.NullValue null_value = 11;
  }
}

message Release {
  DeploymentVersion version = 1;
  map<string, VariableValue> variables = 2;
  repeated string encrypted_variables = 3;

  ReleaseTarget release_target = 5;

  string created_at = 4;
}

enum DeploymentVersionStatus {
  DEPLOYMENT_VERSION_STATUS_UNSPECIFIED = 0;
  DEPLOYMENT_VERSION_STATUS_BUILDING = 1;
  DEPLOYMENT_VERSION_STATUS_READY = 2;
  DEPLOYMENT_VERSION_STATUS_FAILED = 3;
  DEPLOYMENT_VERSION_STATUS_REJECTED = 4;
}

message DeploymentVariable {
  string id = 1;
  string key = 2;
  string variable_id = 3;
  string description = 4;
  string deployment_id = 5;

  VariableValue default_value = 6;
}

message DeploymentVariableValue {
  string id = 1;
  string deployment_variable_id = 3;
  int64 priority = 4;

  VariableValue default_value = 5;

  optional google.protobuf.Struct resource_selector = 6;

  oneof value {
    VariableValue          direct_value = 7;
    ReferenceVariableValue reference_value = 8;
    SensitiveVariableValue sensitive_value = 9;
  }
}

message SensitiveVariableValue {
  string value_hash = 1;
}

message ReferenceVariableValue {
  optional google.protobuf.Struct reference = 1;
  repeated string path = 2;
}

message DeploymentVersion {
  string id = 1;
  string name = 2;
  string tag = 3;
  google.protobuf.Struct config = 4;
  google.protobuf.Struct job_agent_config = 5;
  string deployment_id = 6;
  DeploymentVersionStatus status = 7;
  optional string message = 8;
  string created_at = 9;
}

message System {
  string id = 1;
  string workspace_id = 2;
  string name = 3;
  string description = 4;
  string created_at = 5;
}

message ComputeReleaseTargetsRequest {
  repeated Environment environments = 1;
  repeated Deployment deployments = 2;
  repeated Resource resources = 3;
}

message ComputeReleaseTargetsResponse {
  repeated ReleaseTarget release_targets = 1;
}

message ListReleaseTargetsRequest {
  string workspace_id = 1;
  optional google.protobuf.Struct resource_selector = 2;
  optional google.protobuf.Struct deployment_selector = 3;
  optional google.protobuf.Struct environment_selector = 4;
}

message ListReleaseTargetsResponse {
  repeated ReleaseTarget release_targets = 1;
}

service ReleaseTargetService {
  rpc Compute(ComputeReleaseTargetsRequest) returns (ComputeReleaseTargetsResponse);

  rpc All(ListReleaseTargetsRequest) returns (ListReleaseTargetsResponse);
}

message ListDeploymentsRequest {
  string workspace_id = 1;
  optional google.protobuf.Struct deployment_selector = 2;
}

message ListDeploymentsResponse {
  repeated Deployment deployments = 1;
}

service DeploymentService {
  rpc All(ListDeploymentsRequest) returns (ListDeploymentsResponse);
}