syntax = "proto3";

package workspace;

import "google/protobuf/struct.proto";

option go_package = "workspace-engine/pkg/pb";

message Policy {
  string id = 1;
  string name = 2;
  optional string description = 3;

  string created_at = 4;
  string workspace_id = 5;

  repeated PolicyTargetSelector selectors = 6;

  repeated PolicyRule rules = 7;
}

message PolicyTargetSelector {
  string id = 1;
  optional Selector deployment_selector = 3;
  optional Selector environment_selector = 4;
  optional Selector resource_selector = 5;
}

message PolicyRule {
  string id = 1;
  string policy_id = 2;
  string created_at = 3;

  oneof rule {
    AnyApprovalRule any_approval = 4;
  }
}

enum ApprovalStatus {
  APPROVAL_STATUS_UNSPECIFIED = 0;
  APPROVAL_STATUS_APPROVED = 1;
  APPROVAL_STATUS_REJECTED = 2;
}

message UserApprovalRecord {
  string user_id = 1;
  string version_id = 2;
  ApprovalStatus status = 3;
  optional string reason = 4;
  string created_at = 5;
}

// Any Approval - requires a minimum number of approvals from any authorized users
message AnyApprovalRule {
  // Minimum number of approvals required
  int32 min_approvals = 1;
}

message Resource {
  string id = 1;
  string name = 2;
  string version = 3;
  string kind = 4;
  string identifier = 5;
  string created_at = 6; // ISO8601 string or RFC3339 timestamp
  string workspace_id = 7;
  optional string provider_id = 8; // nullable

  // config can be a deeply nested object, so we use google.protobuf.Struct
  google.protobuf.Struct config = 9;

  optional string locked_at = 10; // nullable, ISO8601 string or RFC3339 timestamp
  optional string updated_at = 11; // nullable, ISO8601 string or RFC3339 timestamp
  optional string deleted_at = 12; // nullable, ISO8601 string or RFC3339 timestamp

  map<string, string> metadata = 13;
}

message ResourceVariable {
  string id = 1;
  string resource_id = 2;
  string key = 3;
  Value value = 4;
}

message Environment {
  string id = 1;
  string name = 2;
  optional string description = 3;
  string system_id = 4;

  Selector resource_selector = 5;
  
  string created_at = 6;
}

message Deployment {
  string id = 1;
  string name = 2;
  string slug = 3;
  optional string description = 4;
  string system_id = 5;

  optional string job_agent_id = 6;
  google.protobuf.Struct job_agent_config = 7;
  optional Selector resource_selector = 8;
}

enum JobStatus {
  JOB_STATUS_CANCELLED = 0;
  JOB_STATUS_SKIPPED = 1;
  JOB_STATUS_IN_PROGRESS = 2;
  JOB_STATUS_ACTION_REQUIRED = 3;
  JOB_STATUS_PENDING = 4;
  JOB_STATUS_FAILURE = 5;
  JOB_STATUS_INVALID_JOB_AGENT = 6;
  JOB_STATUS_INVALID_INTEGRATION = 7;
  JOB_STATUS_EXTERNAL_RUN_NOT_FOUND = 8;
  JOB_STATUS_SUCCESSFUL = 9;
}

message JobAgent {
  string id = 1;
  string workspace_id = 2;
  string name = 3;
  string type = 4;
  google.protobuf.Struct config = 5;
}

message Job {
  string id = 1;

  string release_id = 2;

  string job_agent_id = 3;
  google.protobuf.Struct job_agent_config = 4;

  optional string external_id = 5;

  JobStatus status = 6;
  
  string resource_id = 7;
  string environment_id = 8;
  string deployment_id = 9;

  string created_at = 10;
  string updated_at = 11;
  optional string started_at = 12;
  optional string completed_at = 13;
}

message ReleaseTarget {
  string id = 1;
  string resource_id = 2;
  string environment_id = 3;
  string deployment_id = 4;
}

message LiteralValue {
  oneof data {
    string string = 1;
    bool   bool = 2;
    double double = 3;
    int64  int64 = 4;

    google.protobuf.Struct object = 5;
    google.protobuf.NullValue null = 6;
  }
}

message SensitiveValue {
  string value_hash = 1;
}

message ReferenceValue {
  string reference = 1;
  repeated string path = 2;
}

message Value {
  oneof data {
    LiteralValue literal = 7;
    ReferenceValue reference = 8;
    SensitiveValue sensitive = 9;
  }
}

message Release {
  DeploymentVersion version = 1;
  map<string, LiteralValue> variables = 2;
  repeated string encrypted_variables = 3;

  ReleaseTarget release_target = 5;

  string created_at = 4;
}

enum DeploymentVersionStatus {
  DEPLOYMENT_VERSION_STATUS_UNSPECIFIED = 0;
  DEPLOYMENT_VERSION_STATUS_BUILDING = 1;
  DEPLOYMENT_VERSION_STATUS_READY = 2;
  DEPLOYMENT_VERSION_STATUS_FAILED = 3;
  DEPLOYMENT_VERSION_STATUS_REJECTED = 4;
}

message DeploymentVariable {
  string id = 1;
  string key = 2;
  string variable_id = 3;
  optional string description = 4;
  string deployment_id = 5;

  LiteralValue default_value = 6;
}

message DeploymentVariableValue {
  string id = 1;
  string deployment_variable_id = 3;
  int64 priority = 4;

  optional Selector resource_selector = 6;

  Value value = 7;
}

message DeploymentVersion {
  string id = 1;
  string name = 2;
  string tag = 3;
  google.protobuf.Struct config = 4;
  google.protobuf.Struct job_agent_config = 5;
  string deployment_id = 6;
  DeploymentVersionStatus status = 7;
  optional string message = 8;
  string created_at = 9;
}

message System {
  string id = 1;
  string workspace_id = 2;
  string name = 3;
  optional string description = 4;
}

message ComputeReleaseTargetsRequest {
  repeated Environment environments = 1;
  repeated Deployment deployments = 2;
  repeated Resource resources = 3;
}

// Selector is a wrapper for different selector types. For now, only json_selector is supported,
// but this structure allows for future extensibility (e.g., other selector languages).
message Selector {
  oneof value {
    google.protobuf.Struct json = 1;
  }
}

// PropertyMatcher defines how properties between two entities should match
// to create a relationship. This enables join-like conditions.
// Example: VPCs and K8s clusters should match when they're in the same region
message PropertyMatcher {
  // Path to the property on the "from" entity using dot notation
  // Examples: "id", "metadata.region", "config.networking.vpc_id"
  // Will be split on "." for nested property access
  repeated string from_property = 1;
  
  // Path to the property on the "to" entity using dot notation
  // Examples: "id", "metadata.region", "metadata.vpc_id"
  // Will be split on "." for nested property access
  repeated string to_property = 2;
  
  // Comparison operator: "equals", "not_equals", "contains", "starts_with", "ends_with", "regex"
  // Default is "equals" if not specified
  optional string operator = 3;
}

// RelationshipRule defines a rule for creating relationships between entities.
// A single rule can match multiple entities and create multiple relationship instances.
// For example: "All VPCs should be related to all Kubernetes clusters in the same region"
message RelationshipRule {
  string id = 1;
  string name = 2;

  optional string description = 3;
  string reference = 4;

  // The type and selector for the source entities (e.g., "resource" with selector for VPCs)
  string from_type = 5;
  Selector from_selector = 6;

  // The type and selector for the target entities (e.g., "resource" with selector for K8s clusters)
  string to_type = 7;
  Selector to_selector = 8;

  // Optional property matchers for cross-entity conditions
  // Example: Match VPCs to K8s clusters when metadata.region is the same
  // If empty, creates a relationship between ALL entities matching the selectors (Cartesian product)
  repeated PropertyMatcher property_matchers = 11;

  // The semantic type of the relationship (e.g., "contains", "depends_on", "runs_on")
  string relationship_type = 9;

  // Additional metadata for the relationship rule
  map<string, string> metadata = 10;
}

message ComputeReleaseTargetsResponse {
  repeated ReleaseTarget release_targets = 1;
}

message ListReleaseTargetsRequest {
  string workspace_id = 1;
  optional Selector resource_selector = 2;
  optional Selector deployment_selector = 3;
  optional Selector environment_selector = 4;
}

message ListReleaseTargetsResponse {
  repeated ReleaseTarget release_targets = 1;
}

service ReleaseTargetService {
  rpc Compute(ComputeReleaseTargetsRequest) returns (ComputeReleaseTargetsResponse);

  rpc All(ListReleaseTargetsRequest) returns (ListReleaseTargetsResponse);
}

message ListDeploymentsRequest {
  string workspace_id = 1;
  optional Selector deployment_selector = 2;
}

message ListDeploymentsResponse {
  repeated Deployment deployments = 1;
}

service DeploymentService {
  rpc All(ListDeploymentsRequest) returns (ListDeploymentsResponse);
}