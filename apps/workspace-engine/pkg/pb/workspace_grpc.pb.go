// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: workspace.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReleaseTargetService_Compute_FullMethodName = "/workspace.ReleaseTargetService/Compute"
	ReleaseTargetService_All_FullMethodName     = "/workspace.ReleaseTargetService/All"
)

// ReleaseTargetServiceClient is the client API for ReleaseTargetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReleaseTargetServiceClient interface {
	Compute(ctx context.Context, in *ComputeReleaseTargetsRequest, opts ...grpc.CallOption) (*ComputeReleaseTargetsResponse, error)
	All(ctx context.Context, in *ListReleaseTargetsRequest, opts ...grpc.CallOption) (*ListReleaseTargetsResponse, error)
}

type releaseTargetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReleaseTargetServiceClient(cc grpc.ClientConnInterface) ReleaseTargetServiceClient {
	return &releaseTargetServiceClient{cc}
}

func (c *releaseTargetServiceClient) Compute(ctx context.Context, in *ComputeReleaseTargetsRequest, opts ...grpc.CallOption) (*ComputeReleaseTargetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ComputeReleaseTargetsResponse)
	err := c.cc.Invoke(ctx, ReleaseTargetService_Compute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseTargetServiceClient) All(ctx context.Context, in *ListReleaseTargetsRequest, opts ...grpc.CallOption) (*ListReleaseTargetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListReleaseTargetsResponse)
	err := c.cc.Invoke(ctx, ReleaseTargetService_All_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReleaseTargetServiceServer is the server API for ReleaseTargetService service.
// All implementations must embed UnimplementedReleaseTargetServiceServer
// for forward compatibility.
type ReleaseTargetServiceServer interface {
	Compute(context.Context, *ComputeReleaseTargetsRequest) (*ComputeReleaseTargetsResponse, error)
	All(context.Context, *ListReleaseTargetsRequest) (*ListReleaseTargetsResponse, error)
	mustEmbedUnimplementedReleaseTargetServiceServer()
}

// UnimplementedReleaseTargetServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReleaseTargetServiceServer struct{}

func (UnimplementedReleaseTargetServiceServer) Compute(context.Context, *ComputeReleaseTargetsRequest) (*ComputeReleaseTargetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compute not implemented")
}
func (UnimplementedReleaseTargetServiceServer) All(context.Context, *ListReleaseTargetsRequest) (*ListReleaseTargetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method All not implemented")
}
func (UnimplementedReleaseTargetServiceServer) mustEmbedUnimplementedReleaseTargetServiceServer() {}
func (UnimplementedReleaseTargetServiceServer) testEmbeddedByValue()                              {}

// UnsafeReleaseTargetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReleaseTargetServiceServer will
// result in compilation errors.
type UnsafeReleaseTargetServiceServer interface {
	mustEmbedUnimplementedReleaseTargetServiceServer()
}

func RegisterReleaseTargetServiceServer(s grpc.ServiceRegistrar, srv ReleaseTargetServiceServer) {
	// If the following call pancis, it indicates UnimplementedReleaseTargetServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReleaseTargetService_ServiceDesc, srv)
}

func _ReleaseTargetService_Compute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeReleaseTargetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseTargetServiceServer).Compute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReleaseTargetService_Compute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseTargetServiceServer).Compute(ctx, req.(*ComputeReleaseTargetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseTargetService_All_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleaseTargetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseTargetServiceServer).All(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReleaseTargetService_All_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseTargetServiceServer).All(ctx, req.(*ListReleaseTargetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReleaseTargetService_ServiceDesc is the grpc.ServiceDesc for ReleaseTargetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReleaseTargetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workspace.ReleaseTargetService",
	HandlerType: (*ReleaseTargetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compute",
			Handler:    _ReleaseTargetService_Compute_Handler,
		},
		{
			MethodName: "All",
			Handler:    _ReleaseTargetService_All_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workspace.proto",
}

const (
	DeploymentService_All_FullMethodName = "/workspace.DeploymentService/All"
)

// DeploymentServiceClient is the client API for DeploymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeploymentServiceClient interface {
	All(ctx context.Context, in *ListDeploymentsRequest, opts ...grpc.CallOption) (*ListDeploymentsResponse, error)
}

type deploymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeploymentServiceClient(cc grpc.ClientConnInterface) DeploymentServiceClient {
	return &deploymentServiceClient{cc}
}

func (c *deploymentServiceClient) All(ctx context.Context, in *ListDeploymentsRequest, opts ...grpc.CallOption) (*ListDeploymentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDeploymentsResponse)
	err := c.cc.Invoke(ctx, DeploymentService_All_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeploymentServiceServer is the server API for DeploymentService service.
// All implementations must embed UnimplementedDeploymentServiceServer
// for forward compatibility.
type DeploymentServiceServer interface {
	All(context.Context, *ListDeploymentsRequest) (*ListDeploymentsResponse, error)
	mustEmbedUnimplementedDeploymentServiceServer()
}

// UnimplementedDeploymentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeploymentServiceServer struct{}

func (UnimplementedDeploymentServiceServer) All(context.Context, *ListDeploymentsRequest) (*ListDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method All not implemented")
}
func (UnimplementedDeploymentServiceServer) mustEmbedUnimplementedDeploymentServiceServer() {}
func (UnimplementedDeploymentServiceServer) testEmbeddedByValue()                           {}

// UnsafeDeploymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeploymentServiceServer will
// result in compilation errors.
type UnsafeDeploymentServiceServer interface {
	mustEmbedUnimplementedDeploymentServiceServer()
}

func RegisterDeploymentServiceServer(s grpc.ServiceRegistrar, srv DeploymentServiceServer) {
	// If the following call pancis, it indicates UnimplementedDeploymentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DeploymentService_ServiceDesc, srv)
}

func _DeploymentService_All_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServiceServer).All(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentService_All_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServiceServer).All(ctx, req.(*ListDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeploymentService_ServiceDesc is the grpc.ServiceDesc for DeploymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeploymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workspace.DeploymentService",
	HandlerType: (*DeploymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "All",
			Handler:    _DeploymentService_All_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workspace.proto",
}
