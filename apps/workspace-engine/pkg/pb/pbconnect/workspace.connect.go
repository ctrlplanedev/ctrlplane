// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: workspace.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	pb "workspace-engine/pkg/pb"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ReleaseTargetServiceName is the fully-qualified name of the ReleaseTargetService service.
	ReleaseTargetServiceName = "workspace.ReleaseTargetService"
	// DeploymentServiceName is the fully-qualified name of the DeploymentService service.
	DeploymentServiceName = "workspace.DeploymentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ReleaseTargetServiceComputeProcedure is the fully-qualified name of the ReleaseTargetService's
	// Compute RPC.
	ReleaseTargetServiceComputeProcedure = "/workspace.ReleaseTargetService/Compute"
	// ReleaseTargetServiceAllProcedure is the fully-qualified name of the ReleaseTargetService's All
	// RPC.
	ReleaseTargetServiceAllProcedure = "/workspace.ReleaseTargetService/All"
	// DeploymentServiceAllProcedure is the fully-qualified name of the DeploymentService's All RPC.
	DeploymentServiceAllProcedure = "/workspace.DeploymentService/All"
)

// ReleaseTargetServiceClient is a client for the workspace.ReleaseTargetService service.
type ReleaseTargetServiceClient interface {
	Compute(context.Context, *connect.Request[pb.ComputeReleaseTargetsRequest]) (*connect.Response[pb.ComputeReleaseTargetsResponse], error)
	All(context.Context, *connect.Request[pb.ListReleaseTargetsRequest]) (*connect.Response[pb.ListReleaseTargetsResponse], error)
}

// NewReleaseTargetServiceClient constructs a client for the workspace.ReleaseTargetService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReleaseTargetServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ReleaseTargetServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	releaseTargetServiceMethods := pb.File_workspace_proto.Services().ByName("ReleaseTargetService").Methods()
	return &releaseTargetServiceClient{
		compute: connect.NewClient[pb.ComputeReleaseTargetsRequest, pb.ComputeReleaseTargetsResponse](
			httpClient,
			baseURL+ReleaseTargetServiceComputeProcedure,
			connect.WithSchema(releaseTargetServiceMethods.ByName("Compute")),
			connect.WithClientOptions(opts...),
		),
		all: connect.NewClient[pb.ListReleaseTargetsRequest, pb.ListReleaseTargetsResponse](
			httpClient,
			baseURL+ReleaseTargetServiceAllProcedure,
			connect.WithSchema(releaseTargetServiceMethods.ByName("All")),
			connect.WithClientOptions(opts...),
		),
	}
}

// releaseTargetServiceClient implements ReleaseTargetServiceClient.
type releaseTargetServiceClient struct {
	compute *connect.Client[pb.ComputeReleaseTargetsRequest, pb.ComputeReleaseTargetsResponse]
	all     *connect.Client[pb.ListReleaseTargetsRequest, pb.ListReleaseTargetsResponse]
}

// Compute calls workspace.ReleaseTargetService.Compute.
func (c *releaseTargetServiceClient) Compute(ctx context.Context, req *connect.Request[pb.ComputeReleaseTargetsRequest]) (*connect.Response[pb.ComputeReleaseTargetsResponse], error) {
	return c.compute.CallUnary(ctx, req)
}

// All calls workspace.ReleaseTargetService.All.
func (c *releaseTargetServiceClient) All(ctx context.Context, req *connect.Request[pb.ListReleaseTargetsRequest]) (*connect.Response[pb.ListReleaseTargetsResponse], error) {
	return c.all.CallUnary(ctx, req)
}

// ReleaseTargetServiceHandler is an implementation of the workspace.ReleaseTargetService service.
type ReleaseTargetServiceHandler interface {
	Compute(context.Context, *connect.Request[pb.ComputeReleaseTargetsRequest]) (*connect.Response[pb.ComputeReleaseTargetsResponse], error)
	All(context.Context, *connect.Request[pb.ListReleaseTargetsRequest]) (*connect.Response[pb.ListReleaseTargetsResponse], error)
}

// NewReleaseTargetServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReleaseTargetServiceHandler(svc ReleaseTargetServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	releaseTargetServiceMethods := pb.File_workspace_proto.Services().ByName("ReleaseTargetService").Methods()
	releaseTargetServiceComputeHandler := connect.NewUnaryHandler(
		ReleaseTargetServiceComputeProcedure,
		svc.Compute,
		connect.WithSchema(releaseTargetServiceMethods.ByName("Compute")),
		connect.WithHandlerOptions(opts...),
	)
	releaseTargetServiceAllHandler := connect.NewUnaryHandler(
		ReleaseTargetServiceAllProcedure,
		svc.All,
		connect.WithSchema(releaseTargetServiceMethods.ByName("All")),
		connect.WithHandlerOptions(opts...),
	)
	return "/workspace.ReleaseTargetService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ReleaseTargetServiceComputeProcedure:
			releaseTargetServiceComputeHandler.ServeHTTP(w, r)
		case ReleaseTargetServiceAllProcedure:
			releaseTargetServiceAllHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedReleaseTargetServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedReleaseTargetServiceHandler struct{}

func (UnimplementedReleaseTargetServiceHandler) Compute(context.Context, *connect.Request[pb.ComputeReleaseTargetsRequest]) (*connect.Response[pb.ComputeReleaseTargetsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.ReleaseTargetService.Compute is not implemented"))
}

func (UnimplementedReleaseTargetServiceHandler) All(context.Context, *connect.Request[pb.ListReleaseTargetsRequest]) (*connect.Response[pb.ListReleaseTargetsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.ReleaseTargetService.All is not implemented"))
}

// DeploymentServiceClient is a client for the workspace.DeploymentService service.
type DeploymentServiceClient interface {
	All(context.Context, *connect.Request[pb.ListDeploymentsRequest]) (*connect.Response[pb.ListDeploymentsResponse], error)
}

// NewDeploymentServiceClient constructs a client for the workspace.DeploymentService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDeploymentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DeploymentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	deploymentServiceMethods := pb.File_workspace_proto.Services().ByName("DeploymentService").Methods()
	return &deploymentServiceClient{
		all: connect.NewClient[pb.ListDeploymentsRequest, pb.ListDeploymentsResponse](
			httpClient,
			baseURL+DeploymentServiceAllProcedure,
			connect.WithSchema(deploymentServiceMethods.ByName("All")),
			connect.WithClientOptions(opts...),
		),
	}
}

// deploymentServiceClient implements DeploymentServiceClient.
type deploymentServiceClient struct {
	all *connect.Client[pb.ListDeploymentsRequest, pb.ListDeploymentsResponse]
}

// All calls workspace.DeploymentService.All.
func (c *deploymentServiceClient) All(ctx context.Context, req *connect.Request[pb.ListDeploymentsRequest]) (*connect.Response[pb.ListDeploymentsResponse], error) {
	return c.all.CallUnary(ctx, req)
}

// DeploymentServiceHandler is an implementation of the workspace.DeploymentService service.
type DeploymentServiceHandler interface {
	All(context.Context, *connect.Request[pb.ListDeploymentsRequest]) (*connect.Response[pb.ListDeploymentsResponse], error)
}

// NewDeploymentServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDeploymentServiceHandler(svc DeploymentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	deploymentServiceMethods := pb.File_workspace_proto.Services().ByName("DeploymentService").Methods()
	deploymentServiceAllHandler := connect.NewUnaryHandler(
		DeploymentServiceAllProcedure,
		svc.All,
		connect.WithSchema(deploymentServiceMethods.ByName("All")),
		connect.WithHandlerOptions(opts...),
	)
	return "/workspace.DeploymentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DeploymentServiceAllProcedure:
			deploymentServiceAllHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDeploymentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDeploymentServiceHandler struct{}

func (UnimplementedDeploymentServiceHandler) All(context.Context, *connect.Request[pb.ListDeploymentsRequest]) (*connect.Response[pb.ListDeploymentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.DeploymentService.All is not implemented"))
}
