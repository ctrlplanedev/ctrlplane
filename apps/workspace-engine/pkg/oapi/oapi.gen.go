// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package oapi

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ApprovalStatus.
const (
	ApprovalStatusApproved ApprovalStatus = "approved"
	ApprovalStatusRejected ApprovalStatus = "rejected"
)

// Defines values for DeploymentVersionStatus.
const (
	DeploymentVersionStatusBuilding    DeploymentVersionStatus = "building"
	DeploymentVersionStatusFailed      DeploymentVersionStatus = "failed"
	DeploymentVersionStatusReady       DeploymentVersionStatus = "ready"
	DeploymentVersionStatusRejected    DeploymentVersionStatus = "rejected"
	DeploymentVersionStatusUnspecified DeploymentVersionStatus = "unspecified"
)

// Defines values for JobStatus.
const (
	ActionRequired      JobStatus = "actionRequired"
	Cancelled           JobStatus = "cancelled"
	ExternalRunNotFound JobStatus = "externalRunNotFound"
	Failure             JobStatus = "failure"
	InProgress          JobStatus = "inProgress"
	InvalidIntegration  JobStatus = "invalidIntegration"
	InvalidJobAgent     JobStatus = "invalidJobAgent"
	Pending             JobStatus = "pending"
	Skipped             JobStatus = "skipped"
	Successful          JobStatus = "successful"
)

// Defines values for JobUpdateEventFieldsToUpdate.
const (
	CompletedAt    JobUpdateEventFieldsToUpdate = "completedAt"
	CreatedAt      JobUpdateEventFieldsToUpdate = "createdAt"
	ExternalId     JobUpdateEventFieldsToUpdate = "externalId"
	Id             JobUpdateEventFieldsToUpdate = "id"
	JobAgentConfig JobUpdateEventFieldsToUpdate = "jobAgentConfig"
	JobAgentId     JobUpdateEventFieldsToUpdate = "jobAgentId"
	Metadata       JobUpdateEventFieldsToUpdate = "metadata"
	ReleaseId      JobUpdateEventFieldsToUpdate = "releaseId"
	StartedAt      JobUpdateEventFieldsToUpdate = "startedAt"
	Status         JobUpdateEventFieldsToUpdate = "status"
	UpdatedAt      JobUpdateEventFieldsToUpdate = "updatedAt"
)

// Defines values for NullValue.
const (
	True NullValue = true
)

// Defines values for PropertyMatcherOperator.
const (
	Contains   PropertyMatcherOperator = "contains"
	EndsWith   PropertyMatcherOperator = "endsWith"
	Equals     PropertyMatcherOperator = "equals"
	NotEquals  PropertyMatcherOperator = "notEquals"
	Regex      PropertyMatcherOperator = "regex"
	StartsWith PropertyMatcherOperator = "startsWith"
)

// Defines values for RelatableEntityType.
const (
	RelatableEntityTypeDeployment  RelatableEntityType = "deployment"
	RelatableEntityTypeEnvironment RelatableEntityType = "environment"
	RelatableEntityTypeResource    RelatableEntityType = "resource"
)

// Defines values for RelationDirection.
const (
	From RelationDirection = "from"
	To   RelationDirection = "to"
)

// Defines values for RuleEvaluationActionType.
const (
	Approval RuleEvaluationActionType = "approval"
	Wait     RuleEvaluationActionType = "wait"
)

// AnyApprovalRule defines model for AnyApprovalRule.
type AnyApprovalRule struct {
	MinApprovals int32 `json:"minApprovals"`
}

// ApprovalStatus defines model for ApprovalStatus.
type ApprovalStatus string

// BooleanValue defines model for BooleanValue.
type BooleanValue = bool

// CelMatcher defines model for CelMatcher.
type CelMatcher struct {
	Cel string `json:"cel"`
}

// CelSelector defines model for CelSelector.
type CelSelector struct {
	Cel string `json:"cel"`
}

// DeployDecision defines model for DeployDecision.
type DeployDecision struct {
	PolicyResults []PolicyEvaluation `json:"policyResults"`
}

// Deployment defines model for Deployment.
type Deployment struct {
	Description      *string                `json:"description,omitempty"`
	Id               string                 `json:"id"`
	JobAgentConfig   map[string]interface{} `json:"jobAgentConfig"`
	JobAgentId       *string                `json:"jobAgentId,omitempty"`
	Name             string                 `json:"name"`
	ResourceSelector *Selector              `json:"resourceSelector,omitempty"`
	Slug             string                 `json:"slug"`
	SystemId         string                 `json:"systemId"`
}

// DeploymentAndSystem defines model for DeploymentAndSystem.
type DeploymentAndSystem struct {
	Deployment Deployment `json:"deployment"`
	System     System     `json:"system"`
}

// DeploymentVariable defines model for DeploymentVariable.
type DeploymentVariable struct {
	DefaultValue *LiteralValue `json:"defaultValue,omitempty"`
	DeploymentId string        `json:"deploymentId"`
	Description  *string       `json:"description,omitempty"`
	Id           string        `json:"id"`
	Key          string        `json:"key"`
}

// DeploymentVariableValue defines model for DeploymentVariableValue.
type DeploymentVariableValue struct {
	DeploymentVariableId string    `json:"deploymentVariableId"`
	Id                   string    `json:"id"`
	Priority             int64     `json:"priority"`
	ResourceSelector     *Selector `json:"resourceSelector,omitempty"`
	Value                Value     `json:"value"`
}

// DeploymentVersion defines model for DeploymentVersion.
type DeploymentVersion struct {
	Config         map[string]interface{}  `json:"config"`
	CreatedAt      time.Time               `json:"createdAt"`
	DeploymentId   string                  `json:"deploymentId"`
	Id             string                  `json:"id"`
	JobAgentConfig map[string]interface{}  `json:"jobAgentConfig"`
	Message        *string                 `json:"message,omitempty"`
	Name           string                  `json:"name"`
	Status         DeploymentVersionStatus `json:"status"`
	Tag            string                  `json:"tag"`
}

// DeploymentVersionStatus defines model for DeploymentVersionStatus.
type DeploymentVersionStatus string

// EntityRelation defines model for EntityRelation.
type EntityRelation struct {
	Direction RelationDirection `json:"direction"`
	Entity    RelatableEntity   `json:"entity"`

	// EntityId ID of the related entity
	EntityId   string              `json:"entityId"`
	EntityType RelatableEntityType `json:"entityType"`
	Rule       *RelationshipRule   `json:"rule,omitempty"`
}

// Environment defines model for Environment.
type Environment struct {
	CreatedAt        string    `json:"createdAt"`
	Description      *string   `json:"description,omitempty"`
	Id               string    `json:"id"`
	Name             string    `json:"name"`
	ResourceSelector *Selector `json:"resourceSelector,omitempty"`
	SystemId         string    `json:"systemId"`
}

// EnvironmentProgressionRule defines model for EnvironmentProgressionRule.
type EnvironmentProgressionRule struct {
	DependsOnEnvironmentSelector Selector `json:"dependsOnEnvironmentSelector"`
	Id                           string   `json:"id"`

	// MaximumAgeHours Maximum age of dependency deployment before blocking progression (prevents stale promotions)
	MaximumAgeHours *int32 `json:"maximumAgeHours,omitempty"`

	// MinimumSockTimeMinutes Minimum time to wait after the depends on environment is in a success state before the current environment can be deployed
	MinimumSockTimeMinutes   *int32       `json:"minimumSockTimeMinutes,omitempty"`
	MinimumSuccessPercentage *float32     `json:"minimumSuccessPercentage,omitempty"`
	PolicyId                 string       `json:"policyId"`
	SuccessStatuses          *[]JobStatus `json:"successStatuses,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error *string `json:"error,omitempty"`
}

// EvaluateReleaseTargetRequest defines model for EvaluateReleaseTargetRequest.
type EvaluateReleaseTargetRequest struct {
	ReleaseTarget ReleaseTarget     `json:"releaseTarget"`
	Version       DeploymentVersion `json:"version"`
}

// GithubEntity defines model for GithubEntity.
type GithubEntity struct {
	InstallationId int    `json:"installationId"`
	Slug           string `json:"slug"`
}

// IntegerValue defines model for IntegerValue.
type IntegerValue = int

// Job defines model for Job.
type Job struct {
	CompletedAt    *time.Time             `json:"completedAt,omitempty"`
	CreatedAt      time.Time              `json:"createdAt"`
	ExternalId     *string                `json:"externalId,omitempty"`
	Id             string                 `json:"id"`
	JobAgentConfig map[string]interface{} `json:"jobAgentConfig"`
	JobAgentId     string                 `json:"jobAgentId"`
	Metadata       map[string]string      `json:"metadata"`
	ReleaseId      string                 `json:"releaseId"`
	StartedAt      *time.Time             `json:"startedAt,omitempty"`
	Status         JobStatus              `json:"status"`
	UpdatedAt      time.Time              `json:"updatedAt"`
}

// JobAgent defines model for JobAgent.
type JobAgent struct {
	Config      map[string]interface{} `json:"config"`
	Id          string                 `json:"id"`
	Name        string                 `json:"name"`
	Type        string                 `json:"type"`
	WorkspaceId string                 `json:"workspaceId"`
}

// JobStatus defines model for JobStatus.
type JobStatus string

// JobUpdateEvent defines model for JobUpdateEvent.
type JobUpdateEvent struct {
	AgentId        *string                         `json:"agentId,omitempty"`
	ExternalId     *string                         `json:"externalId,omitempty"`
	FieldsToUpdate *[]JobUpdateEventFieldsToUpdate `json:"fieldsToUpdate,omitempty"`
	Id             *string                         `json:"id,omitempty"`
	Job            Job                             `json:"job"`
	union          json.RawMessage
}

// JobUpdateEventFieldsToUpdate defines model for JobUpdateEvent.FieldsToUpdate.
type JobUpdateEventFieldsToUpdate string

// JobUpdateEvent0 defines model for .
type JobUpdateEvent0 = interface{}

// JobUpdateEvent1 defines model for .
type JobUpdateEvent1 = interface{}

// JobWithRelease defines model for JobWithRelease.
type JobWithRelease struct {
	Deployment  *Deployment  `json:"deployment,omitempty"`
	Environment *Environment `json:"environment,omitempty"`
	Job         Job          `json:"job"`
	Release     Release      `json:"release"`
	Resource    *Resource    `json:"resource,omitempty"`
}

// JsonSelector defines model for JsonSelector.
type JsonSelector struct {
	Json map[string]interface{} `json:"json"`
}

// LiteralValue defines model for LiteralValue.
type LiteralValue struct {
	union json.RawMessage
}

// NullValue defines model for NullValue.
type NullValue bool

// NumberValue defines model for NumberValue.
type NumberValue = float32

// ObjectValue defines model for ObjectValue.
type ObjectValue struct {
	Object map[string]interface{} `json:"object"`
}

// Policy defines model for Policy.
type Policy struct {
	CreatedAt   string  `json:"createdAt"`
	Description *string `json:"description,omitempty"`
	Enabled     bool    `json:"enabled"`
	Id          string  `json:"id"`

	// Metadata Arbitrary metadata for the policy (record<string, string>)
	Metadata    map[string]string      `json:"metadata"`
	Name        string                 `json:"name"`
	Priority    int                    `json:"priority"`
	Rules       []PolicyRule           `json:"rules"`
	Selectors   []PolicyTargetSelector `json:"selectors"`
	WorkspaceId string                 `json:"workspaceId"`
}

// PolicyEvaluation defines model for PolicyEvaluation.
type PolicyEvaluation struct {
	Policy      *Policy          `json:"policy,omitempty"`
	RuleResults []RuleEvaluation `json:"ruleResults"`
	Summary     *string          `json:"summary,omitempty"`
}

// PolicyRule defines model for PolicyRule.
type PolicyRule struct {
	AnyApproval            *AnyApprovalRule            `json:"anyApproval,omitempty"`
	CreatedAt              string                      `json:"createdAt"`
	EnvironmentProgression *EnvironmentProgressionRule `json:"environmentProgression,omitempty"`
	Id                     string                      `json:"id"`
	PolicyId               string                      `json:"policyId"`
}

// PolicyTargetSelector defines model for PolicyTargetSelector.
type PolicyTargetSelector struct {
	DeploymentSelector  *Selector `json:"deploymentSelector,omitempty"`
	EnvironmentSelector *Selector `json:"environmentSelector,omitempty"`
	Id                  string    `json:"id"`
	ResourceSelector    *Selector `json:"resourceSelector,omitempty"`
}

// PropertiesMatcher defines model for PropertiesMatcher.
type PropertiesMatcher struct {
	Properties []PropertyMatcher `json:"properties"`
}

// PropertyMatcher defines model for PropertyMatcher.
type PropertyMatcher struct {
	FromProperty []string                `json:"fromProperty"`
	Operator     PropertyMatcherOperator `json:"operator"`
	ToProperty   []string                `json:"toProperty"`
}

// PropertyMatcherOperator defines model for PropertyMatcher.Operator.
type PropertyMatcherOperator string

// ReferenceValue defines model for ReferenceValue.
type ReferenceValue struct {
	Path      []string `json:"path"`
	Reference string   `json:"reference"`
}

// RelatableEntity defines model for RelatableEntity.
type RelatableEntity struct {
	union json.RawMessage
}

// RelatableEntityType defines model for RelatableEntityType.
type RelatableEntityType string

// RelationDirection defines model for RelationDirection.
type RelationDirection string

// RelationshipRule defines model for RelationshipRule.
type RelationshipRule struct {
	Description      *string                  `json:"description,omitempty"`
	FromSelector     *Selector                `json:"fromSelector,omitempty"`
	FromType         RelatableEntityType      `json:"fromType"`
	Id               string                   `json:"id"`
	Matcher          RelationshipRule_Matcher `json:"matcher"`
	Metadata         map[string]string        `json:"metadata"`
	Name             string                   `json:"name"`
	Reference        string                   `json:"reference"`
	RelationshipType string                   `json:"relationshipType"`
	ToSelector       *Selector                `json:"toSelector,omitempty"`
	ToType           RelatableEntityType      `json:"toType"`
	WorkspaceId      string                   `json:"workspaceId"`
}

// RelationshipRule_Matcher defines model for RelationshipRule.Matcher.
type RelationshipRule_Matcher struct {
	union json.RawMessage
}

// Release defines model for Release.
type Release struct {
	CreatedAt          string                  `json:"createdAt"`
	EncryptedVariables []string                `json:"encryptedVariables"`
	ReleaseTarget      ReleaseTarget           `json:"releaseTarget"`
	Variables          map[string]LiteralValue `json:"variables"`
	Version            DeploymentVersion       `json:"version"`
}

// ReleaseTarget defines model for ReleaseTarget.
type ReleaseTarget struct {
	DeploymentId  string `json:"deploymentId"`
	EnvironmentId string `json:"environmentId"`
	ResourceId    string `json:"resourceId"`
}

// ReleaseTargetState defines model for ReleaseTargetState.
type ReleaseTargetState struct {
	CurrentRelease *Release `json:"currentRelease,omitempty"`
	DesiredRelease *Release `json:"desiredRelease,omitempty"`
	LatestJob      *Job     `json:"latestJob,omitempty"`
}

// ReleaseTargetWithState defines model for ReleaseTargetWithState.
type ReleaseTargetWithState struct {
	Deployment    *Deployment        `json:"deployment,omitempty"`
	Environment   *Environment       `json:"environment,omitempty"`
	ReleaseTarget ReleaseTarget      `json:"releaseTarget"`
	Resource      *Resource          `json:"resource,omitempty"`
	State         ReleaseTargetState `json:"state"`
}

// Resource defines model for Resource.
type Resource struct {
	Config      map[string]interface{} `json:"config"`
	CreatedAt   time.Time              `json:"createdAt"`
	DeletedAt   *time.Time             `json:"deletedAt,omitempty"`
	Id          string                 `json:"id"`
	Identifier  string                 `json:"identifier"`
	Kind        string                 `json:"kind"`
	LockedAt    *time.Time             `json:"lockedAt,omitempty"`
	Metadata    map[string]string      `json:"metadata"`
	Name        string                 `json:"name"`
	ProviderId  *string                `json:"providerId,omitempty"`
	UpdatedAt   *time.Time             `json:"updatedAt,omitempty"`
	Version     string                 `json:"version"`
	WorkspaceId string                 `json:"workspaceId"`
}

// ResourceProvider defines model for ResourceProvider.
type ResourceProvider struct {
	CreatedAt   time.Time          `json:"createdAt"`
	Id          string             `json:"id"`
	Metadata    map[string]string  `json:"metadata"`
	Name        string             `json:"name"`
	WorkspaceId openapi_types.UUID `json:"workspaceId"`
}

// ResourceVariable defines model for ResourceVariable.
type ResourceVariable struct {
	Key        string `json:"key"`
	ResourceId string `json:"resourceId"`
	Value      Value  `json:"value"`
}

// RuleEvaluation defines model for RuleEvaluation.
type RuleEvaluation struct {
	// ActionRequired Whether the rule requires an action (e.g., approval, wait)
	ActionRequired bool `json:"actionRequired"`

	// ActionType Type of action required
	ActionType *RuleEvaluationActionType `json:"actionType,omitempty"`

	// Allowed Whether the rule allows the deployment
	Allowed bool `json:"allowed"`

	// Details Additional details about the rule evaluation
	Details map[string]interface{} `json:"details"`

	// Message Human-readable explanation of the rule result
	Message string `json:"message"`
}

// RuleEvaluationActionType Type of action required
type RuleEvaluationActionType string

// Selector defines model for Selector.
type Selector struct {
	union json.RawMessage
}

// SensitiveValue defines model for SensitiveValue.
type SensitiveValue struct {
	ValueHash string `json:"valueHash"`
}

// StringValue defines model for StringValue.
type StringValue = string

// System defines model for System.
type System struct {
	Description *string `json:"description,omitempty"`
	Id          string  `json:"id"`
	Name        string  `json:"name"`
	WorkspaceId string  `json:"workspaceId"`
}

// UserApprovalRecord defines model for UserApprovalRecord.
type UserApprovalRecord struct {
	CreatedAt     string         `json:"createdAt"`
	EnvironmentId string         `json:"environmentId"`
	Reason        *string        `json:"reason,omitempty"`
	Status        ApprovalStatus `json:"status"`
	UserId        string         `json:"userId"`
	VersionId     string         `json:"versionId"`
}

// Value defines model for Value.
type Value struct {
	union json.RawMessage
}

// ValidateResourceSelectorJSONBody defines parameters for ValidateResourceSelector.
type ValidateResourceSelectorJSONBody struct {
	ResourceSelector *Selector `json:"resourceSelector,omitempty"`
}

// ListDeploymentsParams defines parameters for ListDeployments.
type ListDeploymentsParams struct {
	// Limit Maximum number of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetReleaseTargetsForDeploymentParams defines parameters for GetReleaseTargetsForDeployment.
type GetReleaseTargetsForDeploymentParams struct {
	// Limit Maximum number of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetDeploymentResourcesParams defines parameters for GetDeploymentResources.
type GetDeploymentResourcesParams struct {
	// Limit Maximum number of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetVersionsForDeploymentParams defines parameters for GetVersionsForDeployment.
type GetVersionsForDeploymentParams struct {
	// Limit Maximum number of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListEnvironmentsParams defines parameters for ListEnvironments.
type ListEnvironmentsParams struct {
	// Offset Number of items to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetEnvironmentResourcesParams defines parameters for GetEnvironmentResources.
type GetEnvironmentResourcesParams struct {
	// Limit Maximum number of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetJobAgentsParams defines parameters for GetJobAgents.
type GetJobAgentsParams struct {
	// Limit Maximum number of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetJobsForJobAgentParams defines parameters for GetJobsForJobAgent.
type GetJobsForJobAgentParams struct {
	// Limit Maximum number of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetJobsParams defines parameters for GetJobs.
type GetJobsParams struct {
	// Limit Maximum number of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetRelationshipRulesParams defines parameters for GetRelationshipRules.
type GetRelationshipRulesParams struct {
	// Offset Number of items to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetJobsForReleaseTargetParams defines parameters for GetJobsForReleaseTarget.
type GetJobsForReleaseTargetParams struct {
	// Limit Maximum number of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Cel CEL expression to filter the results
	Cel *string `form:"cel,omitempty" json:"cel,omitempty"`
}

// QueryResourcesJSONBody defines parameters for QueryResources.
type QueryResourcesJSONBody struct {
	Filter *Selector `json:"filter,omitempty"`
}

// QueryResourcesParams defines parameters for QueryResources.
type QueryResourcesParams struct {
	// Limit Maximum number of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListSystemsParams defines parameters for ListSystems.
type ListSystemsParams struct {
	// Offset Number of items to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// ValidateResourceSelectorJSONRequestBody defines body for ValidateResourceSelector for application/json ContentType.
type ValidateResourceSelectorJSONRequestBody ValidateResourceSelectorJSONBody

// EvaluateReleaseTargetJSONRequestBody defines body for EvaluateReleaseTarget for application/json ContentType.
type EvaluateReleaseTargetJSONRequestBody = EvaluateReleaseTargetRequest

// QueryResourcesJSONRequestBody defines body for QueryResources for application/json ContentType.
type QueryResourcesJSONRequestBody QueryResourcesJSONBody

// AsJobUpdateEvent0 returns the union data inside the JobUpdateEvent as a JobUpdateEvent0
func (t JobUpdateEvent) AsJobUpdateEvent0() (JobUpdateEvent0, error) {
	var body JobUpdateEvent0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobUpdateEvent0 overwrites any union data inside the JobUpdateEvent as the provided JobUpdateEvent0
func (t *JobUpdateEvent) FromJobUpdateEvent0(v JobUpdateEvent0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobUpdateEvent0 performs a merge with any union data inside the JobUpdateEvent, using the provided JobUpdateEvent0
func (t *JobUpdateEvent) MergeJobUpdateEvent0(v JobUpdateEvent0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobUpdateEvent1 returns the union data inside the JobUpdateEvent as a JobUpdateEvent1
func (t JobUpdateEvent) AsJobUpdateEvent1() (JobUpdateEvent1, error) {
	var body JobUpdateEvent1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobUpdateEvent1 overwrites any union data inside the JobUpdateEvent as the provided JobUpdateEvent1
func (t *JobUpdateEvent) FromJobUpdateEvent1(v JobUpdateEvent1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobUpdateEvent1 performs a merge with any union data inside the JobUpdateEvent, using the provided JobUpdateEvent1
func (t *JobUpdateEvent) MergeJobUpdateEvent1(v JobUpdateEvent1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t JobUpdateEvent) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.AgentId != nil {
		object["agentId"], err = json.Marshal(t.AgentId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'agentId': %w", err)
		}
	}

	if t.ExternalId != nil {
		object["externalId"], err = json.Marshal(t.ExternalId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'externalId': %w", err)
		}
	}

	if t.FieldsToUpdate != nil {
		object["fieldsToUpdate"], err = json.Marshal(t.FieldsToUpdate)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'fieldsToUpdate': %w", err)
		}
	}

	if t.Id != nil {
		object["id"], err = json.Marshal(t.Id)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'id': %w", err)
		}
	}

	object["job"], err = json.Marshal(t.Job)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'job': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *JobUpdateEvent) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["agentId"]; found {
		err = json.Unmarshal(raw, &t.AgentId)
		if err != nil {
			return fmt.Errorf("error reading 'agentId': %w", err)
		}
	}

	if raw, found := object["externalId"]; found {
		err = json.Unmarshal(raw, &t.ExternalId)
		if err != nil {
			return fmt.Errorf("error reading 'externalId': %w", err)
		}
	}

	if raw, found := object["fieldsToUpdate"]; found {
		err = json.Unmarshal(raw, &t.FieldsToUpdate)
		if err != nil {
			return fmt.Errorf("error reading 'fieldsToUpdate': %w", err)
		}
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &t.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
	}

	if raw, found := object["job"]; found {
		err = json.Unmarshal(raw, &t.Job)
		if err != nil {
			return fmt.Errorf("error reading 'job': %w", err)
		}
	}

	return err
}

// AsBooleanValue returns the union data inside the LiteralValue as a BooleanValue
func (t LiteralValue) AsBooleanValue() (BooleanValue, error) {
	var body BooleanValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBooleanValue overwrites any union data inside the LiteralValue as the provided BooleanValue
func (t *LiteralValue) FromBooleanValue(v BooleanValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBooleanValue performs a merge with any union data inside the LiteralValue, using the provided BooleanValue
func (t *LiteralValue) MergeBooleanValue(v BooleanValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNumberValue returns the union data inside the LiteralValue as a NumberValue
func (t LiteralValue) AsNumberValue() (NumberValue, error) {
	var body NumberValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNumberValue overwrites any union data inside the LiteralValue as the provided NumberValue
func (t *LiteralValue) FromNumberValue(v NumberValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNumberValue performs a merge with any union data inside the LiteralValue, using the provided NumberValue
func (t *LiteralValue) MergeNumberValue(v NumberValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIntegerValue returns the union data inside the LiteralValue as a IntegerValue
func (t LiteralValue) AsIntegerValue() (IntegerValue, error) {
	var body IntegerValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIntegerValue overwrites any union data inside the LiteralValue as the provided IntegerValue
func (t *LiteralValue) FromIntegerValue(v IntegerValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIntegerValue performs a merge with any union data inside the LiteralValue, using the provided IntegerValue
func (t *LiteralValue) MergeIntegerValue(v IntegerValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStringValue returns the union data inside the LiteralValue as a StringValue
func (t LiteralValue) AsStringValue() (StringValue, error) {
	var body StringValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStringValue overwrites any union data inside the LiteralValue as the provided StringValue
func (t *LiteralValue) FromStringValue(v StringValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStringValue performs a merge with any union data inside the LiteralValue, using the provided StringValue
func (t *LiteralValue) MergeStringValue(v StringValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsObjectValue returns the union data inside the LiteralValue as a ObjectValue
func (t LiteralValue) AsObjectValue() (ObjectValue, error) {
	var body ObjectValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromObjectValue overwrites any union data inside the LiteralValue as the provided ObjectValue
func (t *LiteralValue) FromObjectValue(v ObjectValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeObjectValue performs a merge with any union data inside the LiteralValue, using the provided ObjectValue
func (t *LiteralValue) MergeObjectValue(v ObjectValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the LiteralValue as a NullValue
func (t LiteralValue) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the LiteralValue as the provided NullValue
func (t *LiteralValue) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the LiteralValue, using the provided NullValue
func (t *LiteralValue) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t LiteralValue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LiteralValue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDeployment returns the union data inside the RelatableEntity as a Deployment
func (t RelatableEntity) AsDeployment() (Deployment, error) {
	var body Deployment
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDeployment overwrites any union data inside the RelatableEntity as the provided Deployment
func (t *RelatableEntity) FromDeployment(v Deployment) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDeployment performs a merge with any union data inside the RelatableEntity, using the provided Deployment
func (t *RelatableEntity) MergeDeployment(v Deployment) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEnvironment returns the union data inside the RelatableEntity as a Environment
func (t RelatableEntity) AsEnvironment() (Environment, error) {
	var body Environment
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEnvironment overwrites any union data inside the RelatableEntity as the provided Environment
func (t *RelatableEntity) FromEnvironment(v Environment) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEnvironment performs a merge with any union data inside the RelatableEntity, using the provided Environment
func (t *RelatableEntity) MergeEnvironment(v Environment) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResource returns the union data inside the RelatableEntity as a Resource
func (t RelatableEntity) AsResource() (Resource, error) {
	var body Resource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResource overwrites any union data inside the RelatableEntity as the provided Resource
func (t *RelatableEntity) FromResource(v Resource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResource performs a merge with any union data inside the RelatableEntity, using the provided Resource
func (t *RelatableEntity) MergeResource(v Resource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RelatableEntity) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RelatableEntity) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCelMatcher returns the union data inside the RelationshipRule_Matcher as a CelMatcher
func (t RelationshipRule_Matcher) AsCelMatcher() (CelMatcher, error) {
	var body CelMatcher
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCelMatcher overwrites any union data inside the RelationshipRule_Matcher as the provided CelMatcher
func (t *RelationshipRule_Matcher) FromCelMatcher(v CelMatcher) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCelMatcher performs a merge with any union data inside the RelationshipRule_Matcher, using the provided CelMatcher
func (t *RelationshipRule_Matcher) MergeCelMatcher(v CelMatcher) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPropertiesMatcher returns the union data inside the RelationshipRule_Matcher as a PropertiesMatcher
func (t RelationshipRule_Matcher) AsPropertiesMatcher() (PropertiesMatcher, error) {
	var body PropertiesMatcher
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPropertiesMatcher overwrites any union data inside the RelationshipRule_Matcher as the provided PropertiesMatcher
func (t *RelationshipRule_Matcher) FromPropertiesMatcher(v PropertiesMatcher) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePropertiesMatcher performs a merge with any union data inside the RelationshipRule_Matcher, using the provided PropertiesMatcher
func (t *RelationshipRule_Matcher) MergePropertiesMatcher(v PropertiesMatcher) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RelationshipRule_Matcher) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RelationshipRule_Matcher) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsJsonSelector returns the union data inside the Selector as a JsonSelector
func (t Selector) AsJsonSelector() (JsonSelector, error) {
	var body JsonSelector
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJsonSelector overwrites any union data inside the Selector as the provided JsonSelector
func (t *Selector) FromJsonSelector(v JsonSelector) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJsonSelector performs a merge with any union data inside the Selector, using the provided JsonSelector
func (t *Selector) MergeJsonSelector(v JsonSelector) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCelSelector returns the union data inside the Selector as a CelSelector
func (t Selector) AsCelSelector() (CelSelector, error) {
	var body CelSelector
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCelSelector overwrites any union data inside the Selector as the provided CelSelector
func (t *Selector) FromCelSelector(v CelSelector) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCelSelector performs a merge with any union data inside the Selector, using the provided CelSelector
func (t *Selector) MergeCelSelector(v CelSelector) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Selector) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Selector) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLiteralValue returns the union data inside the Value as a LiteralValue
func (t Value) AsLiteralValue() (LiteralValue, error) {
	var body LiteralValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLiteralValue overwrites any union data inside the Value as the provided LiteralValue
func (t *Value) FromLiteralValue(v LiteralValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLiteralValue performs a merge with any union data inside the Value, using the provided LiteralValue
func (t *Value) MergeLiteralValue(v LiteralValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsReferenceValue returns the union data inside the Value as a ReferenceValue
func (t Value) AsReferenceValue() (ReferenceValue, error) {
	var body ReferenceValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReferenceValue overwrites any union data inside the Value as the provided ReferenceValue
func (t *Value) FromReferenceValue(v ReferenceValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReferenceValue performs a merge with any union data inside the Value, using the provided ReferenceValue
func (t *Value) MergeReferenceValue(v ReferenceValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSensitiveValue returns the union data inside the Value as a SensitiveValue
func (t Value) AsSensitiveValue() (SensitiveValue, error) {
	var body SensitiveValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSensitiveValue overwrites any union data inside the Value as the provided SensitiveValue
func (t *Value) FromSensitiveValue(v SensitiveValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSensitiveValue performs a merge with any union data inside the Value, using the provided SensitiveValue
func (t *Value) MergeSensitiveValue(v SensitiveValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Value) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Value) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Validate a resource selector
	// (POST /v1/validate/resource-selector)
	ValidateResourceSelector(c *gin.Context)
	// List workspace IDs
	// (GET /v1/workspaces)
	ListWorkspaceIds(c *gin.Context)
	// Get deployment version jobs list
	// (GET /v1/workspaces/{workspaceId}/deployment-versions/{versionId}/jobs-list)
	GetDeploymentVersionJobsList(c *gin.Context, workspaceId string, versionId string)
	// List deployments
	// (GET /v1/workspaces/{workspaceId}/deployments)
	ListDeployments(c *gin.Context, workspaceId string, params ListDeploymentsParams)
	// Get deployment
	// (GET /v1/workspaces/{workspaceId}/deployments/{deploymentId})
	GetDeployment(c *gin.Context, workspaceId string, deploymentId string)
	// Get release targets for a deployment
	// (GET /v1/workspaces/{workspaceId}/deployments/{deploymentId}/release-targets)
	GetReleaseTargetsForDeployment(c *gin.Context, workspaceId string, deploymentId string, params GetReleaseTargetsForDeploymentParams)
	// Get resources for a deployment
	// (GET /v1/workspaces/{workspaceId}/deployments/{deploymentId}/resources)
	GetDeploymentResources(c *gin.Context, workspaceId string, deploymentId string, params GetDeploymentResourcesParams)
	// Get versions for a deployment
	// (GET /v1/workspaces/{workspaceId}/deployments/{deploymentId}/versions)
	GetVersionsForDeployment(c *gin.Context, workspaceId string, deploymentId string, params GetVersionsForDeploymentParams)
	// Get deployment version
	// (GET /v1/workspaces/{workspaceId}/deploymentversions/{deploymentVersionId})
	GetDeploymentVersion(c *gin.Context, workspaceId string, deploymentVersionId string)
	// Get related entities for a given entity
	// (GET /v1/workspaces/{workspaceId}/entities/{relatableEntityType}/{entityId}/relations)
	GetRelatedEntities(c *gin.Context, workspaceId string, relatableEntityType RelatableEntityType, entityId string)
	// List environments
	// (GET /v1/workspaces/{workspaceId}/environments)
	ListEnvironments(c *gin.Context, workspaceId string, params ListEnvironmentsParams)
	// Get environment
	// (GET /v1/workspaces/{workspaceId}/environments/{environmentId})
	GetEnvironment(c *gin.Context, workspaceId string, environmentId string)
	// Get resources for an environment
	// (GET /v1/workspaces/{workspaceId}/environments/{environmentId}/resources)
	GetEnvironmentResources(c *gin.Context, workspaceId string, environmentId string, params GetEnvironmentResourcesParams)
	// Get job agents
	// (GET /v1/workspaces/{workspaceId}/job-agents)
	GetJobAgents(c *gin.Context, workspaceId string, params GetJobAgentsParams)
	// Get job agent
	// (GET /v1/workspaces/{workspaceId}/job-agents/{jobAgentId})
	GetJobAgent(c *gin.Context, workspaceId string, jobAgentId string)
	// Get jobs for a job agent
	// (GET /v1/workspaces/{workspaceId}/job-agents/{jobAgentId}/jobs)
	GetJobsForJobAgent(c *gin.Context, workspaceId string, jobAgentId string, params GetJobsForJobAgentParams)
	// List jobs
	// (GET /v1/workspaces/{workspaceId}/jobs)
	GetJobs(c *gin.Context, workspaceId string, params GetJobsParams)
	// Get job
	// (GET /v1/workspaces/{workspaceId}/jobs/{jobId})
	GetJob(c *gin.Context, workspaceId string, jobId string)
	// List policies
	// (GET /v1/workspaces/{workspaceId}/policies)
	ListPolicies(c *gin.Context, workspaceId string)
	// Get policy
	// (GET /v1/workspaces/{workspaceId}/policies/{policyId})
	GetPolicy(c *gin.Context, workspaceId string, policyId string)
	// Get release targets for a policy
	// (GET /v1/workspaces/{workspaceId}/policies/{policyId}/release-targets)
	GetReleaseTargetsForPolicy(c *gin.Context, workspaceId string, policyId string)
	// Get relationship rules for a given workspace
	// (GET /v1/workspaces/{workspaceId}/relationship-rules)
	GetRelationshipRules(c *gin.Context, workspaceId string, params GetRelationshipRulesParams)
	// Evaluate policies for a release target
	// (POST /v1/workspaces/{workspaceId}/release-targets/evaluate)
	EvaluateReleaseTarget(c *gin.Context, workspaceId string)
	// Get jobs for a release target
	// (GET /v1/workspaces/{workspaceId}/release-targets/{releaseTargetKey}/jobs)
	GetJobsForReleaseTarget(c *gin.Context, workspaceId string, releaseTargetKey string, params GetJobsForReleaseTargetParams)
	// Get policies for a release target
	// (GET /v1/workspaces/{workspaceId}/release-targets/{releaseTargetKey}/policies)
	GetPoliciesForReleaseTarget(c *gin.Context, workspaceId string, releaseTargetKey string)
	// Query resources with CEL expression
	// (POST /v1/workspaces/{workspaceId}/resources/query)
	QueryResources(c *gin.Context, workspaceId string, params QueryResourcesParams)
	// Get resource by identifier
	// (GET /v1/workspaces/{workspaceId}/resources/{resourceIdentifier})
	GetResourceByIdentifier(c *gin.Context, workspaceId string, resourceIdentifier string)
	// Get engine status
	// (GET /v1/workspaces/{workspaceId}/status)
	GetEngineStatus(c *gin.Context, workspaceId string)
	// List systems
	// (GET /v1/workspaces/{workspaceId}/systems)
	ListSystems(c *gin.Context, workspaceId string, params ListSystemsParams)
	// Get system
	// (GET /v1/workspaces/{workspaceId}/systems/{systemId})
	GetSystem(c *gin.Context, workspaceId string, systemId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ValidateResourceSelector operation middleware
func (siw *ServerInterfaceWrapper) ValidateResourceSelector(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ValidateResourceSelector(c)
}

// ListWorkspaceIds operation middleware
func (siw *ServerInterfaceWrapper) ListWorkspaceIds(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListWorkspaceIds(c)
}

// GetDeploymentVersionJobsList operation middleware
func (siw *ServerInterfaceWrapper) GetDeploymentVersionJobsList(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "versionId" -------------
	var versionId string

	err = runtime.BindStyledParameterWithOptions("simple", "versionId", c.Param("versionId"), &versionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter versionId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDeploymentVersionJobsList(c, workspaceId, versionId)
}

// ListDeployments operation middleware
func (siw *ServerInterfaceWrapper) ListDeployments(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListDeploymentsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListDeployments(c, workspaceId, params)
}

// GetDeployment operation middleware
func (siw *ServerInterfaceWrapper) GetDeployment(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "deploymentId" -------------
	var deploymentId string

	err = runtime.BindStyledParameterWithOptions("simple", "deploymentId", c.Param("deploymentId"), &deploymentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter deploymentId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDeployment(c, workspaceId, deploymentId)
}

// GetReleaseTargetsForDeployment operation middleware
func (siw *ServerInterfaceWrapper) GetReleaseTargetsForDeployment(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "deploymentId" -------------
	var deploymentId string

	err = runtime.BindStyledParameterWithOptions("simple", "deploymentId", c.Param("deploymentId"), &deploymentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter deploymentId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetReleaseTargetsForDeploymentParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetReleaseTargetsForDeployment(c, workspaceId, deploymentId, params)
}

// GetDeploymentResources operation middleware
func (siw *ServerInterfaceWrapper) GetDeploymentResources(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "deploymentId" -------------
	var deploymentId string

	err = runtime.BindStyledParameterWithOptions("simple", "deploymentId", c.Param("deploymentId"), &deploymentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter deploymentId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDeploymentResourcesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDeploymentResources(c, workspaceId, deploymentId, params)
}

// GetVersionsForDeployment operation middleware
func (siw *ServerInterfaceWrapper) GetVersionsForDeployment(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "deploymentId" -------------
	var deploymentId string

	err = runtime.BindStyledParameterWithOptions("simple", "deploymentId", c.Param("deploymentId"), &deploymentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter deploymentId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVersionsForDeploymentParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetVersionsForDeployment(c, workspaceId, deploymentId, params)
}

// GetDeploymentVersion operation middleware
func (siw *ServerInterfaceWrapper) GetDeploymentVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "deploymentVersionId" -------------
	var deploymentVersionId string

	err = runtime.BindStyledParameterWithOptions("simple", "deploymentVersionId", c.Param("deploymentVersionId"), &deploymentVersionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter deploymentVersionId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDeploymentVersion(c, workspaceId, deploymentVersionId)
}

// GetRelatedEntities operation middleware
func (siw *ServerInterfaceWrapper) GetRelatedEntities(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "relatableEntityType" -------------
	var relatableEntityType RelatableEntityType

	err = runtime.BindStyledParameterWithOptions("simple", "relatableEntityType", c.Param("relatableEntityType"), &relatableEntityType, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter relatableEntityType: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "entityId" -------------
	var entityId string

	err = runtime.BindStyledParameterWithOptions("simple", "entityId", c.Param("entityId"), &entityId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter entityId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRelatedEntities(c, workspaceId, relatableEntityType, entityId)
}

// ListEnvironments operation middleware
func (siw *ServerInterfaceWrapper) ListEnvironments(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEnvironmentsParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListEnvironments(c, workspaceId, params)
}

// GetEnvironment operation middleware
func (siw *ServerInterfaceWrapper) GetEnvironment(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "environmentId" -------------
	var environmentId string

	err = runtime.BindStyledParameterWithOptions("simple", "environmentId", c.Param("environmentId"), &environmentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter environmentId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEnvironment(c, workspaceId, environmentId)
}

// GetEnvironmentResources operation middleware
func (siw *ServerInterfaceWrapper) GetEnvironmentResources(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "environmentId" -------------
	var environmentId string

	err = runtime.BindStyledParameterWithOptions("simple", "environmentId", c.Param("environmentId"), &environmentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter environmentId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEnvironmentResourcesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEnvironmentResources(c, workspaceId, environmentId, params)
}

// GetJobAgents operation middleware
func (siw *ServerInterfaceWrapper) GetJobAgents(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJobAgentsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetJobAgents(c, workspaceId, params)
}

// GetJobAgent operation middleware
func (siw *ServerInterfaceWrapper) GetJobAgent(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "jobAgentId" -------------
	var jobAgentId string

	err = runtime.BindStyledParameterWithOptions("simple", "jobAgentId", c.Param("jobAgentId"), &jobAgentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter jobAgentId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetJobAgent(c, workspaceId, jobAgentId)
}

// GetJobsForJobAgent operation middleware
func (siw *ServerInterfaceWrapper) GetJobsForJobAgent(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "jobAgentId" -------------
	var jobAgentId string

	err = runtime.BindStyledParameterWithOptions("simple", "jobAgentId", c.Param("jobAgentId"), &jobAgentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter jobAgentId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJobsForJobAgentParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetJobsForJobAgent(c, workspaceId, jobAgentId, params)
}

// GetJobs operation middleware
func (siw *ServerInterfaceWrapper) GetJobs(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJobsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetJobs(c, workspaceId, params)
}

// GetJob operation middleware
func (siw *ServerInterfaceWrapper) GetJob(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "jobId" -------------
	var jobId string

	err = runtime.BindStyledParameterWithOptions("simple", "jobId", c.Param("jobId"), &jobId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter jobId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetJob(c, workspaceId, jobId)
}

// ListPolicies operation middleware
func (siw *ServerInterfaceWrapper) ListPolicies(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListPolicies(c, workspaceId)
}

// GetPolicy operation middleware
func (siw *ServerInterfaceWrapper) GetPolicy(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "policyId" -------------
	var policyId string

	err = runtime.BindStyledParameterWithOptions("simple", "policyId", c.Param("policyId"), &policyId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter policyId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPolicy(c, workspaceId, policyId)
}

// GetReleaseTargetsForPolicy operation middleware
func (siw *ServerInterfaceWrapper) GetReleaseTargetsForPolicy(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "policyId" -------------
	var policyId string

	err = runtime.BindStyledParameterWithOptions("simple", "policyId", c.Param("policyId"), &policyId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter policyId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetReleaseTargetsForPolicy(c, workspaceId, policyId)
}

// GetRelationshipRules operation middleware
func (siw *ServerInterfaceWrapper) GetRelationshipRules(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelationshipRulesParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRelationshipRules(c, workspaceId, params)
}

// EvaluateReleaseTarget operation middleware
func (siw *ServerInterfaceWrapper) EvaluateReleaseTarget(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EvaluateReleaseTarget(c, workspaceId)
}

// GetJobsForReleaseTarget operation middleware
func (siw *ServerInterfaceWrapper) GetJobsForReleaseTarget(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "releaseTargetKey" -------------
	var releaseTargetKey string

	err = runtime.BindStyledParameterWithOptions("simple", "releaseTargetKey", c.Param("releaseTargetKey"), &releaseTargetKey, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter releaseTargetKey: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJobsForReleaseTargetParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "cel" -------------

	err = runtime.BindQueryParameter("form", true, false, "cel", c.Request.URL.Query(), &params.Cel)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter cel: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetJobsForReleaseTarget(c, workspaceId, releaseTargetKey, params)
}

// GetPoliciesForReleaseTarget operation middleware
func (siw *ServerInterfaceWrapper) GetPoliciesForReleaseTarget(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "releaseTargetKey" -------------
	var releaseTargetKey string

	err = runtime.BindStyledParameterWithOptions("simple", "releaseTargetKey", c.Param("releaseTargetKey"), &releaseTargetKey, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter releaseTargetKey: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPoliciesForReleaseTarget(c, workspaceId, releaseTargetKey)
}

// QueryResources operation middleware
func (siw *ServerInterfaceWrapper) QueryResources(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryResourcesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryResources(c, workspaceId, params)
}

// GetResourceByIdentifier operation middleware
func (siw *ServerInterfaceWrapper) GetResourceByIdentifier(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "resourceIdentifier" -------------
	var resourceIdentifier string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceIdentifier", c.Param("resourceIdentifier"), &resourceIdentifier, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter resourceIdentifier: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetResourceByIdentifier(c, workspaceId, resourceIdentifier)
}

// GetEngineStatus operation middleware
func (siw *ServerInterfaceWrapper) GetEngineStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEngineStatus(c, workspaceId)
}

// ListSystems operation middleware
func (siw *ServerInterfaceWrapper) ListSystems(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSystemsParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListSystems(c, workspaceId, params)
}

// GetSystem operation middleware
func (siw *ServerInterfaceWrapper) GetSystem(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "systemId" -------------
	var systemId string

	err = runtime.BindStyledParameterWithOptions("simple", "systemId", c.Param("systemId"), &systemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter systemId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSystem(c, workspaceId, systemId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/v1/validate/resource-selector", wrapper.ValidateResourceSelector)
	router.GET(options.BaseURL+"/v1/workspaces", wrapper.ListWorkspaceIds)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/deployment-versions/:versionId/jobs-list", wrapper.GetDeploymentVersionJobsList)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/deployments", wrapper.ListDeployments)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/deployments/:deploymentId", wrapper.GetDeployment)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/deployments/:deploymentId/release-targets", wrapper.GetReleaseTargetsForDeployment)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/deployments/:deploymentId/resources", wrapper.GetDeploymentResources)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/deployments/:deploymentId/versions", wrapper.GetVersionsForDeployment)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/deploymentversions/:deploymentVersionId", wrapper.GetDeploymentVersion)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/entities/:relatableEntityType/:entityId/relations", wrapper.GetRelatedEntities)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/environments", wrapper.ListEnvironments)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/environments/:environmentId", wrapper.GetEnvironment)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/environments/:environmentId/resources", wrapper.GetEnvironmentResources)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/job-agents", wrapper.GetJobAgents)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/job-agents/:jobAgentId", wrapper.GetJobAgent)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/job-agents/:jobAgentId/jobs", wrapper.GetJobsForJobAgent)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/jobs", wrapper.GetJobs)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/jobs/:jobId", wrapper.GetJob)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/policies", wrapper.ListPolicies)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/policies/:policyId", wrapper.GetPolicy)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/policies/:policyId/release-targets", wrapper.GetReleaseTargetsForPolicy)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/relationship-rules", wrapper.GetRelationshipRules)
	router.POST(options.BaseURL+"/v1/workspaces/:workspaceId/release-targets/evaluate", wrapper.EvaluateReleaseTarget)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/release-targets/:releaseTargetKey/jobs", wrapper.GetJobsForReleaseTarget)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/release-targets/:releaseTargetKey/policies", wrapper.GetPoliciesForReleaseTarget)
	router.POST(options.BaseURL+"/v1/workspaces/:workspaceId/resources/query", wrapper.QueryResources)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/resources/:resourceIdentifier", wrapper.GetResourceByIdentifier)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/status", wrapper.GetEngineStatus)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/systems", wrapper.ListSystems)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/systems/:systemId", wrapper.GetSystem)
}
