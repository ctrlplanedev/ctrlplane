// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package oapi

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ApprovalStatus.
const (
	ApprovalStatusApproved ApprovalStatus = "approved"
	ApprovalStatusRejected ApprovalStatus = "rejected"
)

// Defines values for DeploymentVersionStatus.
const (
	DeploymentVersionStatusBuilding    DeploymentVersionStatus = "building"
	DeploymentVersionStatusFailed      DeploymentVersionStatus = "failed"
	DeploymentVersionStatusReady       DeploymentVersionStatus = "ready"
	DeploymentVersionStatusRejected    DeploymentVersionStatus = "rejected"
	DeploymentVersionStatusUnspecified DeploymentVersionStatus = "unspecified"
)

// Defines values for JobStatus.
const (
	ActionRequired      JobStatus = "actionRequired"
	Cancelled           JobStatus = "cancelled"
	ExternalRunNotFound JobStatus = "externalRunNotFound"
	Failure             JobStatus = "failure"
	InProgress          JobStatus = "inProgress"
	InvalidIntegration  JobStatus = "invalidIntegration"
	InvalidJobAgent     JobStatus = "invalidJobAgent"
	Pending             JobStatus = "pending"
	Skipped             JobStatus = "skipped"
	Successful          JobStatus = "successful"
)

// Defines values for NullValue.
const (
	True NullValue = true
)

// Defines values for PropertyMatcherOperator.
const (
	Contains   PropertyMatcherOperator = "contains"
	EndsWith   PropertyMatcherOperator = "endsWith"
	Equals     PropertyMatcherOperator = "equals"
	NotEquals  PropertyMatcherOperator = "notEquals"
	Regex      PropertyMatcherOperator = "regex"
	StartsWith PropertyMatcherOperator = "startsWith"
)

// AnyApprovalRule defines model for AnyApprovalRule.
type AnyApprovalRule struct {
	MinApprovals int32 `json:"minApprovals"`
}

// ApprovalStatus defines model for ApprovalStatus.
type ApprovalStatus string

// BooleanValue defines model for BooleanValue.
type BooleanValue = bool

// CelMatcher defines model for CelMatcher.
type CelMatcher struct {
	Cel string `json:"cel"`
}

// CelSelector defines model for CelSelector.
type CelSelector struct {
	Cel string `json:"cel"`
}

// Deployment defines model for Deployment.
type Deployment struct {
	Description      *string                `json:"description,omitempty"`
	Id               string                 `json:"id"`
	JobAgentConfig   map[string]interface{} `json:"jobAgentConfig"`
	JobAgentId       *string                `json:"jobAgentId,omitempty"`
	Name             string                 `json:"name"`
	ResourceSelector *Selector              `json:"resourceSelector,omitempty"`
	Slug             string                 `json:"slug"`
	SystemId         string                 `json:"systemId"`
}

// DeploymentVariable defines model for DeploymentVariable.
type DeploymentVariable struct {
	DefaultValue *LiteralValue `json:"defaultValue,omitempty"`
	DeploymentId string        `json:"deploymentId"`
	Description  *string       `json:"description,omitempty"`
	Id           string        `json:"id"`
	Key          string        `json:"key"`
	VariableId   string        `json:"variableId"`
}

// DeploymentVariableValue defines model for DeploymentVariableValue.
type DeploymentVariableValue struct {
	DeploymentVariableId string    `json:"deploymentVariableId"`
	Id                   string    `json:"id"`
	Priority             int64     `json:"priority"`
	ResourceSelector     *Selector `json:"resourceSelector,omitempty"`
	Value                Value     `json:"value"`
}

// DeploymentVersion defines model for DeploymentVersion.
type DeploymentVersion struct {
	Config         map[string]interface{}  `json:"config"`
	CreatedAt      string                  `json:"createdAt"`
	DeploymentId   string                  `json:"deploymentId"`
	Id             string                  `json:"id"`
	JobAgentConfig map[string]interface{}  `json:"jobAgentConfig"`
	Message        *string                 `json:"message,omitempty"`
	Name           string                  `json:"name"`
	Status         DeploymentVersionStatus `json:"status"`
	Tag            string                  `json:"tag"`
}

// DeploymentVersionStatus defines model for DeploymentVersionStatus.
type DeploymentVersionStatus string

// Environment defines model for Environment.
type Environment struct {
	CreatedAt        string    `json:"createdAt"`
	Description      *string   `json:"description,omitempty"`
	Id               string    `json:"id"`
	Name             string    `json:"name"`
	ResourceSelector *Selector `json:"resourceSelector,omitempty"`
	SystemId         string    `json:"systemId"`
}

// IntegerValue defines model for IntegerValue.
type IntegerValue = int

// Job defines model for Job.
type Job struct {
	CompletedAt    *time.Time             `json:"completedAt,omitempty"`
	CreatedAt      time.Time              `json:"createdAt"`
	DeploymentId   string                 `json:"deploymentId"`
	EnvironmentId  string                 `json:"environmentId"`
	ExternalId     *string                `json:"externalId,omitempty"`
	Id             string                 `json:"id"`
	JobAgentConfig map[string]interface{} `json:"jobAgentConfig"`
	JobAgentId     string                 `json:"jobAgentId"`
	ReleaseId      string                 `json:"releaseId"`
	ResourceId     string                 `json:"resourceId"`
	StartedAt      *time.Time             `json:"startedAt,omitempty"`
	Status         JobStatus              `json:"status"`
	UpdatedAt      time.Time              `json:"updatedAt"`
}

// JobAgent defines model for JobAgent.
type JobAgent struct {
	Config      map[string]interface{} `json:"config"`
	Id          string                 `json:"id"`
	Name        string                 `json:"name"`
	Type        string                 `json:"type"`
	WorkspaceId string                 `json:"workspaceId"`
}

// JobStatus defines model for JobStatus.
type JobStatus string

// JsonSelector defines model for JsonSelector.
type JsonSelector struct {
	Json map[string]interface{} `json:"json"`
}

// LiteralValue defines model for LiteralValue.
type LiteralValue struct {
	union json.RawMessage
}

// NotFoundError defines model for NotFoundError.
type NotFoundError struct {
	Error *string `json:"error,omitempty"`
}

// NullValue defines model for NullValue.
type NullValue bool

// NumberValue defines model for NumberValue.
type NumberValue = float32

// ObjectValue defines model for ObjectValue.
type ObjectValue struct {
	Object map[string]interface{} `json:"object"`
}

// Policy defines model for Policy.
type Policy struct {
	CreatedAt   string                 `json:"createdAt"`
	Description *string                `json:"description,omitempty"`
	Id          string                 `json:"id"`
	Name        string                 `json:"name"`
	Rules       []PolicyRule           `json:"rules"`
	Selectors   []PolicyTargetSelector `json:"selectors"`
	WorkspaceId string                 `json:"workspaceId"`
}

// PolicyRule defines model for PolicyRule.
type PolicyRule struct {
	AnyApproval *AnyApprovalRule `json:"anyApproval,omitempty"`
	CreatedAt   string           `json:"createdAt"`
	Id          string           `json:"id"`
	PolicyId    string           `json:"policyId"`
}

// PolicyTargetSelector defines model for PolicyTargetSelector.
type PolicyTargetSelector struct {
	DeploymentSelector  *Selector `json:"deploymentSelector,omitempty"`
	EnvironmentSelector *Selector `json:"environmentSelector,omitempty"`
	Id                  string    `json:"id"`
	ResourceSelector    *Selector `json:"resourceSelector,omitempty"`
}

// PropertiesMatcher defines model for PropertiesMatcher.
type PropertiesMatcher struct {
	Properties []PropertyMatcher `json:"properties"`
}

// PropertyMatcher defines model for PropertyMatcher.
type PropertyMatcher struct {
	FromProperty []string                `json:"fromProperty"`
	Operator     PropertyMatcherOperator `json:"operator"`
	ToProperty   []string                `json:"toProperty"`
}

// PropertyMatcherOperator defines model for PropertyMatcher.Operator.
type PropertyMatcherOperator string

// ReferenceValue defines model for ReferenceValue.
type ReferenceValue struct {
	Path      []string `json:"path"`
	Reference string   `json:"reference"`
}

// RelationshipRule defines model for RelationshipRule.
type RelationshipRule struct {
	Description      *string                  `json:"description,omitempty"`
	FromSelector     *Selector                `json:"fromSelector,omitempty"`
	FromType         string                   `json:"fromType"`
	Id               string                   `json:"id"`
	Matcher          RelationshipRule_Matcher `json:"matcher"`
	Metadata         map[string]string        `json:"metadata"`
	Name             string                   `json:"name"`
	Reference        string                   `json:"reference"`
	RelationshipType string                   `json:"relationshipType"`
	ToSelector       *Selector                `json:"toSelector,omitempty"`
	ToType           string                   `json:"toType"`
}

// RelationshipRule_Matcher defines model for RelationshipRule.Matcher.
type RelationshipRule_Matcher struct {
	union json.RawMessage
}

// Release defines model for Release.
type Release struct {
	CreatedAt          string                  `json:"createdAt"`
	EncryptedVariables []string                `json:"encryptedVariables"`
	ReleaseTarget      ReleaseTarget           `json:"releaseTarget"`
	Variables          map[string]LiteralValue `json:"variables"`
	Version            DeploymentVersion       `json:"version"`
}

// ReleaseTarget defines model for ReleaseTarget.
type ReleaseTarget struct {
	DeploymentId  string `json:"deploymentId"`
	EnvironmentId string `json:"environmentId"`
	ResourceId    string `json:"resourceId"`
}

// Resource defines model for Resource.
type Resource struct {
	Config      map[string]interface{} `json:"config"`
	CreatedAt   string                 `json:"createdAt"`
	DeletedAt   *string                `json:"deletedAt,omitempty"`
	Id          string                 `json:"id"`
	Identifier  string                 `json:"identifier"`
	Kind        string                 `json:"kind"`
	LockedAt    *string                `json:"lockedAt,omitempty"`
	Metadata    map[string]string      `json:"metadata"`
	Name        string                 `json:"name"`
	ProviderId  *string                `json:"providerId,omitempty"`
	UpdatedAt   *string                `json:"updatedAt,omitempty"`
	Version     string                 `json:"version"`
	WorkspaceId string                 `json:"workspaceId"`
}

// ResourceProvider defines model for ResourceProvider.
type ResourceProvider struct {
	CreatedAt   time.Time          `json:"createdAt"`
	Id          string             `json:"id"`
	Metadata    map[string]string  `json:"metadata"`
	Name        string             `json:"name"`
	WorkspaceId openapi_types.UUID `json:"workspaceId"`
}

// ResourceVariable defines model for ResourceVariable.
type ResourceVariable struct {
	Key        string `json:"key"`
	ResourceId string `json:"resourceId"`
	Value      Value  `json:"value"`
}

// Selector defines model for Selector.
type Selector struct {
	union json.RawMessage
}

// SensitiveValue defines model for SensitiveValue.
type SensitiveValue struct {
	ValueHash string `json:"valueHash"`
}

// StringValue defines model for StringValue.
type StringValue = string

// System defines model for System.
type System struct {
	Description *string `json:"description,omitempty"`
	Id          string  `json:"id"`
	Name        string  `json:"name"`
	WorkspaceId string  `json:"workspaceId"`
}

// UserApprovalRecord defines model for UserApprovalRecord.
type UserApprovalRecord struct {
	CreatedAt string         `json:"createdAt"`
	Reason    *string        `json:"reason,omitempty"`
	Status    ApprovalStatus `json:"status"`
	UserId    string         `json:"userId"`
	VersionId string         `json:"versionId"`
}

// Value defines model for Value.
type Value struct {
	union json.RawMessage
}

// ListJobsParams defines parameters for ListJobs.
type ListJobsParams struct {
	// ReleaseId Optional filter by release ID.
	ReleaseId *string `form:"releaseId,omitempty" json:"releaseId,omitempty"`

	// DeploymentId Optional filter by deployment ID.
	DeploymentId *string `form:"deploymentId,omitempty" json:"deploymentId,omitempty"`

	// EnvironmentId Optional filter by environment ID.
	EnvironmentId *string `form:"environmentId,omitempty" json:"environmentId,omitempty"`

	// ResourceId Optional filter by resource ID.
	ResourceId *string `form:"resourceId,omitempty" json:"resourceId,omitempty"`
}

// AsBooleanValue returns the union data inside the LiteralValue as a BooleanValue
func (t LiteralValue) AsBooleanValue() (BooleanValue, error) {
	var body BooleanValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBooleanValue overwrites any union data inside the LiteralValue as the provided BooleanValue
func (t *LiteralValue) FromBooleanValue(v BooleanValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBooleanValue performs a merge with any union data inside the LiteralValue, using the provided BooleanValue
func (t *LiteralValue) MergeBooleanValue(v BooleanValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNumberValue returns the union data inside the LiteralValue as a NumberValue
func (t LiteralValue) AsNumberValue() (NumberValue, error) {
	var body NumberValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNumberValue overwrites any union data inside the LiteralValue as the provided NumberValue
func (t *LiteralValue) FromNumberValue(v NumberValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNumberValue performs a merge with any union data inside the LiteralValue, using the provided NumberValue
func (t *LiteralValue) MergeNumberValue(v NumberValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIntegerValue returns the union data inside the LiteralValue as a IntegerValue
func (t LiteralValue) AsIntegerValue() (IntegerValue, error) {
	var body IntegerValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIntegerValue overwrites any union data inside the LiteralValue as the provided IntegerValue
func (t *LiteralValue) FromIntegerValue(v IntegerValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIntegerValue performs a merge with any union data inside the LiteralValue, using the provided IntegerValue
func (t *LiteralValue) MergeIntegerValue(v IntegerValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStringValue returns the union data inside the LiteralValue as a StringValue
func (t LiteralValue) AsStringValue() (StringValue, error) {
	var body StringValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStringValue overwrites any union data inside the LiteralValue as the provided StringValue
func (t *LiteralValue) FromStringValue(v StringValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStringValue performs a merge with any union data inside the LiteralValue, using the provided StringValue
func (t *LiteralValue) MergeStringValue(v StringValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsObjectValue returns the union data inside the LiteralValue as a ObjectValue
func (t LiteralValue) AsObjectValue() (ObjectValue, error) {
	var body ObjectValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromObjectValue overwrites any union data inside the LiteralValue as the provided ObjectValue
func (t *LiteralValue) FromObjectValue(v ObjectValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeObjectValue performs a merge with any union data inside the LiteralValue, using the provided ObjectValue
func (t *LiteralValue) MergeObjectValue(v ObjectValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the LiteralValue as a NullValue
func (t LiteralValue) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the LiteralValue as the provided NullValue
func (t *LiteralValue) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the LiteralValue, using the provided NullValue
func (t *LiteralValue) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t LiteralValue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LiteralValue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCelMatcher returns the union data inside the RelationshipRule_Matcher as a CelMatcher
func (t RelationshipRule_Matcher) AsCelMatcher() (CelMatcher, error) {
	var body CelMatcher
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCelMatcher overwrites any union data inside the RelationshipRule_Matcher as the provided CelMatcher
func (t *RelationshipRule_Matcher) FromCelMatcher(v CelMatcher) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCelMatcher performs a merge with any union data inside the RelationshipRule_Matcher, using the provided CelMatcher
func (t *RelationshipRule_Matcher) MergeCelMatcher(v CelMatcher) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPropertiesMatcher returns the union data inside the RelationshipRule_Matcher as a PropertiesMatcher
func (t RelationshipRule_Matcher) AsPropertiesMatcher() (PropertiesMatcher, error) {
	var body PropertiesMatcher
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPropertiesMatcher overwrites any union data inside the RelationshipRule_Matcher as the provided PropertiesMatcher
func (t *RelationshipRule_Matcher) FromPropertiesMatcher(v PropertiesMatcher) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePropertiesMatcher performs a merge with any union data inside the RelationshipRule_Matcher, using the provided PropertiesMatcher
func (t *RelationshipRule_Matcher) MergePropertiesMatcher(v PropertiesMatcher) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RelationshipRule_Matcher) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RelationshipRule_Matcher) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsJsonSelector returns the union data inside the Selector as a JsonSelector
func (t Selector) AsJsonSelector() (JsonSelector, error) {
	var body JsonSelector
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJsonSelector overwrites any union data inside the Selector as the provided JsonSelector
func (t *Selector) FromJsonSelector(v JsonSelector) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJsonSelector performs a merge with any union data inside the Selector, using the provided JsonSelector
func (t *Selector) MergeJsonSelector(v JsonSelector) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCelSelector returns the union data inside the Selector as a CelSelector
func (t Selector) AsCelSelector() (CelSelector, error) {
	var body CelSelector
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCelSelector overwrites any union data inside the Selector as the provided CelSelector
func (t *Selector) FromCelSelector(v CelSelector) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCelSelector performs a merge with any union data inside the Selector, using the provided CelSelector
func (t *Selector) MergeCelSelector(v CelSelector) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Selector) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Selector) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLiteralValue returns the union data inside the Value as a LiteralValue
func (t Value) AsLiteralValue() (LiteralValue, error) {
	var body LiteralValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLiteralValue overwrites any union data inside the Value as the provided LiteralValue
func (t *Value) FromLiteralValue(v LiteralValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLiteralValue performs a merge with any union data inside the Value, using the provided LiteralValue
func (t *Value) MergeLiteralValue(v LiteralValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsReferenceValue returns the union data inside the Value as a ReferenceValue
func (t Value) AsReferenceValue() (ReferenceValue, error) {
	var body ReferenceValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReferenceValue overwrites any union data inside the Value as the provided ReferenceValue
func (t *Value) FromReferenceValue(v ReferenceValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReferenceValue performs a merge with any union data inside the Value, using the provided ReferenceValue
func (t *Value) MergeReferenceValue(v ReferenceValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSensitiveValue returns the union data inside the Value as a SensitiveValue
func (t Value) AsSensitiveValue() (SensitiveValue, error) {
	var body SensitiveValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSensitiveValue overwrites any union data inside the Value as the provided SensitiveValue
func (t *Value) FromSensitiveValue(v SensitiveValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSensitiveValue performs a merge with any union data inside the Value, using the provided SensitiveValue
func (t *Value) MergeSensitiveValue(v SensitiveValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Value) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Value) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List workspace IDs
	// (GET /v1/workspaces)
	ListWorkspaceIds(c *gin.Context)
	// List deployments for a specified workspace ({workspaceId})
	// (GET /v1/workspaces/{workspaceId}/deployments)
	ListDeployments(c *gin.Context, workspaceId string)
	// Get a specific deployment
	// (GET /v1/workspaces/{workspaceId}/deployments/{deploymentId})
	GetDeployment(c *gin.Context, workspaceId string, deploymentId string)
	// List variables for a specific deployment
	// (GET /v1/workspaces/{workspaceId}/deployments/{deploymentId}/variables)
	ListDeploymentVariables(c *gin.Context, workspaceId string, deploymentId string)
	// List versions for a specific deployment
	// (GET /v1/workspaces/{workspaceId}/deployments/{deploymentId}/versions)
	ListDeploymentVersions(c *gin.Context, workspaceId string, deploymentId string)
	// Get a specific deployment version
	// (GET /v1/workspaces/{workspaceId}/deployments/{deploymentId}/versions/{versionId})
	GetDeploymentVersion(c *gin.Context, workspaceId string, deploymentId string, versionId string)
	// List environments for a specified workspace ({workspaceId})
	// (GET /v1/workspaces/{workspaceId}/environments)
	ListEnvironments(c *gin.Context, workspaceId string)
	// Get a specific environment
	// (GET /v1/workspaces/{workspaceId}/environments/{environmentId})
	GetEnvironment(c *gin.Context, workspaceId string, environmentId string)
	// List job agents for a specified workspace
	// (GET /v1/workspaces/{workspaceId}/job-agents)
	ListJobAgents(c *gin.Context, workspaceId string)
	// Get a specific job agent
	// (GET /v1/workspaces/{workspaceId}/job-agents/{jobAgentId})
	GetJobAgent(c *gin.Context, workspaceId string, jobAgentId string)
	// List jobs for a specified workspace
	// (GET /v1/workspaces/{workspaceId}/jobs)
	ListJobs(c *gin.Context, workspaceId string, params ListJobsParams)
	// Get a specific job
	// (GET /v1/workspaces/{workspaceId}/jobs/{jobId})
	GetJob(c *gin.Context, workspaceId string, jobId string)
	// List relationship rules for a specified workspace
	// (GET /v1/workspaces/{workspaceId}/relationship-rules)
	ListRelationshipRules(c *gin.Context, workspaceId string)
	// Get a specific relationship rule
	// (GET /v1/workspaces/{workspaceId}/relationship-rules/{ruleId})
	GetRelationshipRule(c *gin.Context, workspaceId string, ruleId string)
	// List release targets for a specified workspace ({workspaceId})
	// (GET /v1/workspaces/{workspaceId}/release-targets)
	ListPolicies(c *gin.Context, workspaceId string)
	// Get a specific policy (release target)
	// (GET /v1/workspaces/{workspaceId}/release-targets/{policyId})
	GetPolicy(c *gin.Context, workspaceId string, policyId string)
	// List releases for a specified workspace ({workspaceId})
	// (GET /v1/workspaces/{workspaceId}/releases)
	ListReleases(c *gin.Context, workspaceId string)
	// Get a release for a specified workspace ({workspaceId}) and release ({releaseId})
	// (GET /v1/workspaces/{workspaceId}/releases/{releaseId})
	GetRelease(c *gin.Context, workspaceId string, releaseId string)
	// List resources for a specified workspace ({workspaceId})
	// (GET /v1/workspaces/{workspaceId}/resources)
	ListResources(c *gin.Context, workspaceId string)
	// Get a specific resource
	// (GET /v1/workspaces/{workspaceId}/resources/{resourceId})
	GetResource(c *gin.Context, workspaceId string, resourceId string)
	// List variables for a specific resource
	// (GET /v1/workspaces/{workspaceId}/resources/{resourceId}/variables)
	ListResourceVariables(c *gin.Context, workspaceId string, resourceId string)
	// List systems for a specified workspace ({workspaceId})
	// (GET /v1/workspaces/{workspaceId}/systems)
	ListSystems(c *gin.Context, workspaceId string)
	// Get a specific system
	// (GET /v1/workspaces/{workspaceId}/systems/{systemId})
	GetSystem(c *gin.Context, workspaceId string, systemId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListWorkspaceIds operation middleware
func (siw *ServerInterfaceWrapper) ListWorkspaceIds(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListWorkspaceIds(c)
}

// ListDeployments operation middleware
func (siw *ServerInterfaceWrapper) ListDeployments(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListDeployments(c, workspaceId)
}

// GetDeployment operation middleware
func (siw *ServerInterfaceWrapper) GetDeployment(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "deploymentId" -------------
	var deploymentId string

	err = runtime.BindStyledParameterWithOptions("simple", "deploymentId", c.Param("deploymentId"), &deploymentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter deploymentId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDeployment(c, workspaceId, deploymentId)
}

// ListDeploymentVariables operation middleware
func (siw *ServerInterfaceWrapper) ListDeploymentVariables(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "deploymentId" -------------
	var deploymentId string

	err = runtime.BindStyledParameterWithOptions("simple", "deploymentId", c.Param("deploymentId"), &deploymentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter deploymentId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListDeploymentVariables(c, workspaceId, deploymentId)
}

// ListDeploymentVersions operation middleware
func (siw *ServerInterfaceWrapper) ListDeploymentVersions(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "deploymentId" -------------
	var deploymentId string

	err = runtime.BindStyledParameterWithOptions("simple", "deploymentId", c.Param("deploymentId"), &deploymentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter deploymentId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListDeploymentVersions(c, workspaceId, deploymentId)
}

// GetDeploymentVersion operation middleware
func (siw *ServerInterfaceWrapper) GetDeploymentVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "deploymentId" -------------
	var deploymentId string

	err = runtime.BindStyledParameterWithOptions("simple", "deploymentId", c.Param("deploymentId"), &deploymentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter deploymentId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "versionId" -------------
	var versionId string

	err = runtime.BindStyledParameterWithOptions("simple", "versionId", c.Param("versionId"), &versionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter versionId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDeploymentVersion(c, workspaceId, deploymentId, versionId)
}

// ListEnvironments operation middleware
func (siw *ServerInterfaceWrapper) ListEnvironments(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListEnvironments(c, workspaceId)
}

// GetEnvironment operation middleware
func (siw *ServerInterfaceWrapper) GetEnvironment(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "environmentId" -------------
	var environmentId string

	err = runtime.BindStyledParameterWithOptions("simple", "environmentId", c.Param("environmentId"), &environmentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter environmentId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEnvironment(c, workspaceId, environmentId)
}

// ListJobAgents operation middleware
func (siw *ServerInterfaceWrapper) ListJobAgents(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListJobAgents(c, workspaceId)
}

// GetJobAgent operation middleware
func (siw *ServerInterfaceWrapper) GetJobAgent(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "jobAgentId" -------------
	var jobAgentId string

	err = runtime.BindStyledParameterWithOptions("simple", "jobAgentId", c.Param("jobAgentId"), &jobAgentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter jobAgentId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetJobAgent(c, workspaceId, jobAgentId)
}

// ListJobs operation middleware
func (siw *ServerInterfaceWrapper) ListJobs(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListJobsParams

	// ------------- Optional query parameter "releaseId" -------------

	err = runtime.BindQueryParameter("form", true, false, "releaseId", c.Request.URL.Query(), &params.ReleaseId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter releaseId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "deploymentId" -------------

	err = runtime.BindQueryParameter("form", true, false, "deploymentId", c.Request.URL.Query(), &params.DeploymentId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter deploymentId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "environmentId" -------------

	err = runtime.BindQueryParameter("form", true, false, "environmentId", c.Request.URL.Query(), &params.EnvironmentId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter environmentId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "resourceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "resourceId", c.Request.URL.Query(), &params.ResourceId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter resourceId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListJobs(c, workspaceId, params)
}

// GetJob operation middleware
func (siw *ServerInterfaceWrapper) GetJob(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "jobId" -------------
	var jobId string

	err = runtime.BindStyledParameterWithOptions("simple", "jobId", c.Param("jobId"), &jobId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter jobId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetJob(c, workspaceId, jobId)
}

// ListRelationshipRules operation middleware
func (siw *ServerInterfaceWrapper) ListRelationshipRules(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListRelationshipRules(c, workspaceId)
}

// GetRelationshipRule operation middleware
func (siw *ServerInterfaceWrapper) GetRelationshipRule(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithOptions("simple", "ruleId", c.Param("ruleId"), &ruleId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ruleId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRelationshipRule(c, workspaceId, ruleId)
}

// ListPolicies operation middleware
func (siw *ServerInterfaceWrapper) ListPolicies(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListPolicies(c, workspaceId)
}

// GetPolicy operation middleware
func (siw *ServerInterfaceWrapper) GetPolicy(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "policyId" -------------
	var policyId string

	err = runtime.BindStyledParameterWithOptions("simple", "policyId", c.Param("policyId"), &policyId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter policyId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPolicy(c, workspaceId, policyId)
}

// ListReleases operation middleware
func (siw *ServerInterfaceWrapper) ListReleases(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListReleases(c, workspaceId)
}

// GetRelease operation middleware
func (siw *ServerInterfaceWrapper) GetRelease(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "releaseId" -------------
	var releaseId string

	err = runtime.BindStyledParameterWithOptions("simple", "releaseId", c.Param("releaseId"), &releaseId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter releaseId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRelease(c, workspaceId, releaseId)
}

// ListResources operation middleware
func (siw *ServerInterfaceWrapper) ListResources(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListResources(c, workspaceId)
}

// GetResource operation middleware
func (siw *ServerInterfaceWrapper) GetResource(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", c.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter resourceId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetResource(c, workspaceId, resourceId)
}

// ListResourceVariables operation middleware
func (siw *ServerInterfaceWrapper) ListResourceVariables(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", c.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter resourceId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListResourceVariables(c, workspaceId, resourceId)
}

// ListSystems operation middleware
func (siw *ServerInterfaceWrapper) ListSystems(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListSystems(c, workspaceId)
}

// GetSystem operation middleware
func (siw *ServerInterfaceWrapper) GetSystem(c *gin.Context) {

	var err error

	// ------------- Path parameter "workspaceId" -------------
	var workspaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", c.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workspaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "systemId" -------------
	var systemId string

	err = runtime.BindStyledParameterWithOptions("simple", "systemId", c.Param("systemId"), &systemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter systemId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSystem(c, workspaceId, systemId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v1/workspaces", wrapper.ListWorkspaceIds)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/deployments", wrapper.ListDeployments)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/deployments/:deploymentId", wrapper.GetDeployment)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/deployments/:deploymentId/variables", wrapper.ListDeploymentVariables)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/deployments/:deploymentId/versions", wrapper.ListDeploymentVersions)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/deployments/:deploymentId/versions/:versionId", wrapper.GetDeploymentVersion)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/environments", wrapper.ListEnvironments)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/environments/:environmentId", wrapper.GetEnvironment)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/job-agents", wrapper.ListJobAgents)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/job-agents/:jobAgentId", wrapper.GetJobAgent)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/jobs", wrapper.ListJobs)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/jobs/:jobId", wrapper.GetJob)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/relationship-rules", wrapper.ListRelationshipRules)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/relationship-rules/:ruleId", wrapper.GetRelationshipRule)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/release-targets", wrapper.ListPolicies)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/release-targets/:policyId", wrapper.GetPolicy)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/releases", wrapper.ListReleases)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/releases/:releaseId", wrapper.GetRelease)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/resources", wrapper.ListResources)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/resources/:resourceId", wrapper.GetResource)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/resources/:resourceId/variables", wrapper.ListResourceVariables)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/systems", wrapper.ListSystems)
	router.GET(options.BaseURL+"/v1/workspaces/:workspaceId/systems/:systemId", wrapper.GetSystem)
}
