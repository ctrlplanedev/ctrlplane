// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package oapi

import (
	"encoding/json"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for ApprovalStatus.
const (
	ApprovalStatusApproved ApprovalStatus = "approved"
	ApprovalStatusRejected ApprovalStatus = "rejected"
)

// Defines values for DeploymentVersionStatus.
const (
	DeploymentVersionStatusBuilding    DeploymentVersionStatus = "building"
	DeploymentVersionStatusFailed      DeploymentVersionStatus = "failed"
	DeploymentVersionStatusReady       DeploymentVersionStatus = "ready"
	DeploymentVersionStatusRejected    DeploymentVersionStatus = "rejected"
	DeploymentVersionStatusUnspecified DeploymentVersionStatus = "unspecified"
)

// Defines values for JobStatus.
const (
	ActionRequired      JobStatus = "actionRequired"
	Cancelled           JobStatus = "cancelled"
	ExternalRunNotFound JobStatus = "externalRunNotFound"
	Failure             JobStatus = "failure"
	InProgress          JobStatus = "inProgress"
	InvalidIntegration  JobStatus = "invalidIntegration"
	InvalidJobAgent     JobStatus = "invalidJobAgent"
	Pending             JobStatus = "pending"
	Skipped             JobStatus = "skipped"
	Successful          JobStatus = "successful"
)

// Defines values for LiteralValue5Null.
const (
	True LiteralValue5Null = true
)

// AnyApprovalRule defines model for AnyApprovalRule.
type AnyApprovalRule struct {
	MinApprovals int32 `json:"minApprovals"`
}

// ApprovalStatus defines model for ApprovalStatus.
type ApprovalStatus string

// ComputeReleaseTargetsRequest defines model for ComputeReleaseTargetsRequest.
type ComputeReleaseTargetsRequest struct {
	Deployments  []Deployment  `json:"deployments"`
	Environments []Environment `json:"environments"`
	Resources    []Resource    `json:"resources"`
}

// ComputeReleaseTargetsResponse defines model for ComputeReleaseTargetsResponse.
type ComputeReleaseTargetsResponse struct {
	ReleaseTargets []ReleaseTarget `json:"releaseTargets"`
}

// Deployment defines model for Deployment.
type Deployment struct {
	Description      *string                `json:"description,omitempty"`
	Id               string                 `json:"id"`
	JobAgentConfig   map[string]interface{} `json:"jobAgentConfig"`
	JobAgentId       *string                `json:"jobAgentId,omitempty"`
	Name             string                 `json:"name"`
	ResourceSelector *Selector              `json:"resourceSelector,omitempty"`
	Slug             string                 `json:"slug"`
	SystemId         string                 `json:"systemId"`
}

// DeploymentVariable defines model for DeploymentVariable.
type DeploymentVariable struct {
	DefaultValue LiteralValue `json:"defaultValue"`
	DeploymentId string       `json:"deploymentId"`
	Description  *string      `json:"description,omitempty"`
	Id           string       `json:"id"`
	Key          string       `json:"key"`
	VariableId   string       `json:"variableId"`
}

// DeploymentVariableValue defines model for DeploymentVariableValue.
type DeploymentVariableValue struct {
	DeploymentVariableId string    `json:"deploymentVariableId"`
	Id                   string    `json:"id"`
	Priority             int64     `json:"priority"`
	ResourceSelector     *Selector `json:"resourceSelector,omitempty"`
	Value                Value     `json:"value"`
}

// DeploymentVersion defines model for DeploymentVersion.
type DeploymentVersion struct {
	Config         map[string]interface{}  `json:"config"`
	CreatedAt      string                  `json:"createdAt"`
	DeploymentId   string                  `json:"deploymentId"`
	Id             string                  `json:"id"`
	JobAgentConfig map[string]interface{}  `json:"jobAgentConfig"`
	Message        *string                 `json:"message,omitempty"`
	Name           string                  `json:"name"`
	Status         DeploymentVersionStatus `json:"status"`
	Tag            string                  `json:"tag"`
}

// DeploymentVersionStatus defines model for DeploymentVersionStatus.
type DeploymentVersionStatus string

// Environment defines model for Environment.
type Environment struct {
	CreatedAt        string   `json:"createdAt"`
	Description      *string  `json:"description,omitempty"`
	Id               string   `json:"id"`
	Name             string   `json:"name"`
	ResourceSelector Selector `json:"resourceSelector"`
	SystemId         string   `json:"systemId"`
}

// Job defines model for Job.
type Job struct {
	CompletedAt    *string                `json:"completedAt,omitempty"`
	CreatedAt      string                 `json:"createdAt"`
	DeploymentId   string                 `json:"deploymentId"`
	EnvironmentId  string                 `json:"environmentId"`
	ExternalId     *string                `json:"externalId,omitempty"`
	Id             string                 `json:"id"`
	JobAgentConfig map[string]interface{} `json:"jobAgentConfig"`
	JobAgentId     string                 `json:"jobAgentId"`
	ReleaseId      string                 `json:"releaseId"`
	ResourceId     string                 `json:"resourceId"`
	StartedAt      *string                `json:"startedAt,omitempty"`
	Status         JobStatus              `json:"status"`
	UpdatedAt      string                 `json:"updatedAt"`
}

// JobAgent defines model for JobAgent.
type JobAgent struct {
	Config      map[string]interface{} `json:"config"`
	Id          string                 `json:"id"`
	Name        string                 `json:"name"`
	Type        string                 `json:"type"`
	WorkspaceId string                 `json:"workspaceId"`
}

// JobStatus defines model for JobStatus.
type JobStatus string

// ListDeploymentsRequest defines model for ListDeploymentsRequest.
type ListDeploymentsRequest struct {
	DeploymentSelector *Selector `json:"deploymentSelector,omitempty"`
	WorkspaceId        string    `json:"workspaceId"`
}

// ListDeploymentsResponse defines model for ListDeploymentsResponse.
type ListDeploymentsResponse struct {
	Deployments []Deployment `json:"deployments"`
}

// ListReleaseTargetsRequest defines model for ListReleaseTargetsRequest.
type ListReleaseTargetsRequest struct {
	DeploymentSelector  *Selector `json:"deploymentSelector,omitempty"`
	EnvironmentSelector *Selector `json:"environmentSelector,omitempty"`
	ResourceSelector    *Selector `json:"resourceSelector,omitempty"`
	WorkspaceId         string    `json:"workspaceId"`
}

// ListReleaseTargetsResponse defines model for ListReleaseTargetsResponse.
type ListReleaseTargetsResponse struct {
	ReleaseTargets []ReleaseTarget `json:"releaseTargets"`
}

// LiteralValue defines model for LiteralValue.
type LiteralValue struct {
	union json.RawMessage
}

// LiteralValue0 defines model for .
type LiteralValue0 struct {
	String string `json:"string"`
}

// LiteralValue1 defines model for .
type LiteralValue1 struct {
	Bool bool `json:"bool"`
}

// LiteralValue2 defines model for .
type LiteralValue2 struct {
	Number float32 `json:"number"`
}

// LiteralValue3 defines model for .
type LiteralValue3 struct {
	Int int `json:"int"`
}

// LiteralValue4 defines model for .
type LiteralValue4 struct {
	Object map[string]interface{} `json:"object"`
}

// LiteralValue5 defines model for .
type LiteralValue5 struct {
	Null LiteralValue5Null `json:"null"`
}

// LiteralValue5Null defines model for LiteralValue.5.Null.
type LiteralValue5Null bool

// Policy defines model for Policy.
type Policy struct {
	CreatedAt   string                 `json:"createdAt"`
	Description *string                `json:"description,omitempty"`
	Id          string                 `json:"id"`
	Name        string                 `json:"name"`
	Rules       []PolicyRule           `json:"rules"`
	Selectors   []PolicyTargetSelector `json:"selectors"`
	WorkspaceId string                 `json:"workspaceId"`
}

// PolicyRule defines model for PolicyRule.
type PolicyRule struct {
	AnyApproval *AnyApprovalRule `json:"anyApproval,omitempty"`
	CreatedAt   string           `json:"createdAt"`
	Id          string           `json:"id"`
	PolicyId    string           `json:"policyId"`
}

// PolicyTargetSelector defines model for PolicyTargetSelector.
type PolicyTargetSelector struct {
	DeploymentSelector  *Selector `json:"deploymentSelector,omitempty"`
	EnvironmentSelector *Selector `json:"environmentSelector,omitempty"`
	Id                  string    `json:"id"`
	ResourceSelector    *Selector `json:"resourceSelector,omitempty"`
}

// PropertyMatcher defines model for PropertyMatcher.
type PropertyMatcher struct {
	FromProperty []string `json:"fromProperty"`
	Operator     *string  `json:"operator,omitempty"`
	ToProperty   []string `json:"toProperty"`
}

// ReferenceValue defines model for ReferenceValue.
type ReferenceValue struct {
	Path      []string `json:"path"`
	Reference string   `json:"reference"`
}

// RelationshipRule defines model for RelationshipRule.
type RelationshipRule struct {
	Description      *string           `json:"description,omitempty"`
	FromSelector     Selector          `json:"fromSelector"`
	FromType         string            `json:"fromType"`
	Id               string            `json:"id"`
	Metadata         map[string]string `json:"metadata"`
	Name             string            `json:"name"`
	PropertyMatchers []PropertyMatcher `json:"propertyMatchers"`
	Reference        string            `json:"reference"`
	RelationshipType string            `json:"relationshipType"`
	ToSelector       Selector          `json:"toSelector"`
	ToType           string            `json:"toType"`
}

// Release defines model for Release.
type Release struct {
	CreatedAt          string                  `json:"createdAt"`
	EncryptedVariables []string                `json:"encryptedVariables"`
	ReleaseTarget      ReleaseTarget           `json:"releaseTarget"`
	Variables          map[string]LiteralValue `json:"variables"`
	Version            DeploymentVersion       `json:"version"`
}

// ReleaseTarget defines model for ReleaseTarget.
type ReleaseTarget struct {
	DeploymentId  string `json:"deploymentId"`
	EnvironmentId string `json:"environmentId"`
	ResourceId    string `json:"resourceId"`
}

// Resource defines model for Resource.
type Resource struct {
	Config      map[string]interface{} `json:"config"`
	CreatedAt   string                 `json:"createdAt"`
	DeletedAt   *string                `json:"deletedAt,omitempty"`
	Id          string                 `json:"id"`
	Identifier  string                 `json:"identifier"`
	Kind        string                 `json:"kind"`
	LockedAt    *string                `json:"lockedAt,omitempty"`
	Metadata    map[string]string      `json:"metadata"`
	Name        string                 `json:"name"`
	ProviderId  *string                `json:"providerId,omitempty"`
	UpdatedAt   *string                `json:"updatedAt,omitempty"`
	Version     string                 `json:"version"`
	WorkspaceId string                 `json:"workspaceId"`
}

// ResourceVariable defines model for ResourceVariable.
type ResourceVariable struct {
	Key        string `json:"key"`
	ResourceId string `json:"resourceId"`
	Value      Value  `json:"value"`
}

// Selector defines model for Selector.
type Selector struct {
	union json.RawMessage
}

// Selector0 defines model for .
type Selector0 struct {
	Json map[string]interface{} `json:"json"`
}

// SensitiveValue defines model for SensitiveValue.
type SensitiveValue struct {
	ValueHash string `json:"valueHash"`
}

// System defines model for System.
type System struct {
	Description *string `json:"description,omitempty"`
	Id          string  `json:"id"`
	Name        string  `json:"name"`
	WorkspaceId string  `json:"workspaceId"`
}

// UserApprovalRecord defines model for UserApprovalRecord.
type UserApprovalRecord struct {
	CreatedAt string         `json:"createdAt"`
	Reason    *string        `json:"reason,omitempty"`
	Status    ApprovalStatus `json:"status"`
	UserId    string         `json:"userId"`
	VersionId string         `json:"versionId"`
}

// Value defines model for Value.
type Value struct {
	union json.RawMessage
}

// AsLiteralValue0 returns the union data inside the LiteralValue as a LiteralValue0
func (t LiteralValue) AsLiteralValue0() (LiteralValue0, error) {
	var body LiteralValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLiteralValue0 overwrites any union data inside the LiteralValue as the provided LiteralValue0
func (t *LiteralValue) FromLiteralValue0(v LiteralValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLiteralValue0 performs a merge with any union data inside the LiteralValue, using the provided LiteralValue0
func (t *LiteralValue) MergeLiteralValue0(v LiteralValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLiteralValue1 returns the union data inside the LiteralValue as a LiteralValue1
func (t LiteralValue) AsLiteralValue1() (LiteralValue1, error) {
	var body LiteralValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLiteralValue1 overwrites any union data inside the LiteralValue as the provided LiteralValue1
func (t *LiteralValue) FromLiteralValue1(v LiteralValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLiteralValue1 performs a merge with any union data inside the LiteralValue, using the provided LiteralValue1
func (t *LiteralValue) MergeLiteralValue1(v LiteralValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLiteralValue2 returns the union data inside the LiteralValue as a LiteralValue2
func (t LiteralValue) AsLiteralValue2() (LiteralValue2, error) {
	var body LiteralValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLiteralValue2 overwrites any union data inside the LiteralValue as the provided LiteralValue2
func (t *LiteralValue) FromLiteralValue2(v LiteralValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLiteralValue2 performs a merge with any union data inside the LiteralValue, using the provided LiteralValue2
func (t *LiteralValue) MergeLiteralValue2(v LiteralValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLiteralValue3 returns the union data inside the LiteralValue as a LiteralValue3
func (t LiteralValue) AsLiteralValue3() (LiteralValue3, error) {
	var body LiteralValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLiteralValue3 overwrites any union data inside the LiteralValue as the provided LiteralValue3
func (t *LiteralValue) FromLiteralValue3(v LiteralValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLiteralValue3 performs a merge with any union data inside the LiteralValue, using the provided LiteralValue3
func (t *LiteralValue) MergeLiteralValue3(v LiteralValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLiteralValue4 returns the union data inside the LiteralValue as a LiteralValue4
func (t LiteralValue) AsLiteralValue4() (LiteralValue4, error) {
	var body LiteralValue4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLiteralValue4 overwrites any union data inside the LiteralValue as the provided LiteralValue4
func (t *LiteralValue) FromLiteralValue4(v LiteralValue4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLiteralValue4 performs a merge with any union data inside the LiteralValue, using the provided LiteralValue4
func (t *LiteralValue) MergeLiteralValue4(v LiteralValue4) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLiteralValue5 returns the union data inside the LiteralValue as a LiteralValue5
func (t LiteralValue) AsLiteralValue5() (LiteralValue5, error) {
	var body LiteralValue5
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLiteralValue5 overwrites any union data inside the LiteralValue as the provided LiteralValue5
func (t *LiteralValue) FromLiteralValue5(v LiteralValue5) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLiteralValue5 performs a merge with any union data inside the LiteralValue, using the provided LiteralValue5
func (t *LiteralValue) MergeLiteralValue5(v LiteralValue5) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t LiteralValue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LiteralValue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSelector0 returns the union data inside the Selector as a Selector0
func (t Selector) AsSelector0() (Selector0, error) {
	var body Selector0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSelector0 overwrites any union data inside the Selector as the provided Selector0
func (t *Selector) FromSelector0(v Selector0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSelector0 performs a merge with any union data inside the Selector, using the provided Selector0
func (t *Selector) MergeSelector0(v Selector0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Selector) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Selector) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLiteralValue returns the union data inside the Value as a LiteralValue
func (t Value) AsLiteralValue() (LiteralValue, error) {
	var body LiteralValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLiteralValue overwrites any union data inside the Value as the provided LiteralValue
func (t *Value) FromLiteralValue(v LiteralValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLiteralValue performs a merge with any union data inside the Value, using the provided LiteralValue
func (t *Value) MergeLiteralValue(v LiteralValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsReferenceValue returns the union data inside the Value as a ReferenceValue
func (t Value) AsReferenceValue() (ReferenceValue, error) {
	var body ReferenceValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReferenceValue overwrites any union data inside the Value as the provided ReferenceValue
func (t *Value) FromReferenceValue(v ReferenceValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReferenceValue performs a merge with any union data inside the Value, using the provided ReferenceValue
func (t *Value) MergeReferenceValue(v ReferenceValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSensitiveValue returns the union data inside the Value as a SensitiveValue
func (t Value) AsSensitiveValue() (SensitiveValue, error) {
	var body SensitiveValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSensitiveValue overwrites any union data inside the Value as the provided SensitiveValue
func (t *Value) FromSensitiveValue(v SensitiveValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSensitiveValue performs a merge with any union data inside the Value, using the provided SensitiveValue
func (t *Value) MergeSensitiveValue(v SensitiveValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Value) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Value) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {

}
