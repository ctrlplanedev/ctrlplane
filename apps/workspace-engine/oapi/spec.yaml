openapi: "3.0.0"
info:
  version: 1.0.0
  title: Workspace Engine API
  description: OpenAPI schemas for workspace engine protobuf messages

paths:
  /v1/workspaces:
    get:
      summary: List workspace IDs
      operationId: listWorkspaceIds
      description: Returns a list of workspace that are in memory. These could be inactive.
      responses:
        "200":
          description: A list of workspace IDs.
          content:
            application/json:
              schema:
                type: object
                properties:
                  workspaceIds:
                    type: array
                    items:
                      type: string

  /v1/workspaces/{workspaceId}/release-targets:
    get:
      summary: List release targets for a specified workspace ({workspaceId})
      operationId: listPolicies
      description: Returns a list of policies for a specified workspace identified by {workspaceId}.
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: ID of the workspace to get the release targets for.
          schema:
            type: string
      responses:
        "200":
          description: A list of policies.
          content:
            application/json:
              schema:
                type: object
                properties:
                  releaseTargets:
                    type: array
                    items:
                      $ref: "#/components/schemas/ReleaseTarget"
        "404":
          description: Workspace not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

  /v1/workspaces/{workspaceId}/releases:
    get:
      summary: List releases for a specified workspace ({workspaceId})
      operationId: listReleases
      description: Returns a list of releases for a specified workspace identified by {workspaceId}.
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: ID of the workspace to get the releases for.
          schema:
            type: string
      responses:
        "200":
          description: A list of releases.
          content:
            application/json:
              schema:
                type: object
                properties:
                  releases:
                    type: array
                    items:
                      $ref: "#/components/schemas/Release"
        "404":
          description: Workspace not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

  /v1/workspaces/{workspaceId}/releases/{releaseId}:
    get:
      summary: Get a release for a specified workspace ({workspaceId}) and release ({releaseId})
      operationId: getRelease
      description: Returns a release for a specified workspace and release identified by {workspaceId} and {releaseId}.
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: ID of the workspace to get the release for.
          schema:
            type: string
        - name: releaseId
          in: path
          required: true
          description: ID of the release to get.
          schema:
            type: string
      responses:
        "200":
          description: A release.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Release"
        "404":
          description: Release not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

  /v1/workspaces/{workspaceId}/systems:
    get:
      summary: List systems for a specified workspace ({workspaceId})
      operationId: listSystems
      description: Returns a list of systems for a specified workspace identified by {workspaceId}.
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: ID of the workspace to get the systems for.
          schema:
            type: string
      responses:
        "200":
          description: A list of systems.
          content:
            application/json:
              schema:
                type: object
                properties:
                  systems:
                    type: array
                    items:
                      $ref: "#/components/schemas/System"

  /v1/workspaces/{workspaceId}/environments:
    get:
      summary: List environments for a specified workspace ({workspaceId})
      operationId: listEnvironments
      description: Returns a list of environments for a specified workspace identified by {workspaceId}.
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: ID of the workspace to get the environments for.
          schema:
            type: string
      responses:
        "200":
          description: A list of environments.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Environment"
        "404":
          description: Workspace not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

  /v1/workspaces/{workspaceId}/deployments:
    get:
      summary: List deployments for a specified workspace ({workspaceId})
      operationId: listDeployments
      description: Returns a list of deployments for a specified workspace identified by {workspaceId}.
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: ID of the workspace to get the deployments for.
          schema:
            type: string
      responses:
        "200":
          description: A list of deployments.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deployment"
        "404":
          description: Workspace not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

  /v1/workspaces/{workspaceId}/resources:
    get:
      summary: List resources for a specified workspace ({workspaceId})
      operationId: listResources
      description: Returns a list of resources for a specified workspace identified by {workspaceId}.
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: ID of the workspace to get the resources for.
          schema:
            type: string
      responses:
        "200":
          description: A list of resources.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
        "404":
          description: Workspace not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

  /v1/workspaces/{workspaceId}/resources/{resourceId}:
    get:
      summary: Get a specific resource
      operationId: getResource
      description: Returns a specific resource identified by {resourceId} in workspace {workspaceId}.
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: ID of the workspace.
          schema:
            type: string
        - name: resourceId
          in: path
          required: true
          description: ID of the resource to get.
          schema:
            type: string
      responses:
        "200":
          description: A resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

  /v1/workspaces/{workspaceId}/resources/{resourceId}/variables:
    get:
      summary: List variables for a specific resource
      operationId: listResourceVariables
      description: Returns a list of variables for a specific resource identified by {resourceId}.
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: ID of the workspace.
          schema:
            type: string
        - name: resourceId
          in: path
          required: true
          description: ID of the resource.
          schema:
            type: string
      responses:
        "200":
          description: A list of resource variables.
          content:
            application/json:
              schema:
                type: object
                properties:
                  variables:
                    type: array
                    items:
                      $ref: "#/components/schemas/ResourceVariable"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

  /v1/workspaces/{workspaceId}/systems/{systemId}:
    get:
      summary: Get a specific system
      operationId: getSystem
      description: Returns a specific system identified by {systemId} in workspace {workspaceId}.
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: ID of the workspace.
          schema:
            type: string
        - name: systemId
          in: path
          required: true
          description: ID of the system to get.
          schema:
            type: string
      responses:
        "200":
          description: A system.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/System"
        "404":
          description: System not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

  /v1/workspaces/{workspaceId}/environments/{environmentId}:
    get:
      summary: Get a specific environment
      operationId: getEnvironment
      description: Returns a specific environment identified by {environmentId} in workspace {workspaceId}.
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: ID of the workspace.
          schema:
            type: string
        - name: environmentId
          in: path
          required: true
          description: ID of the environment to get.
          schema:
            type: string
      responses:
        "200":
          description: An environment.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Environment"
        "404":
          description: Environment not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

  /v1/workspaces/{workspaceId}/deployments/{deploymentId}:
    get:
      summary: Get a specific deployment
      operationId: getDeployment
      description: Returns a specific deployment identified by {deploymentId} in workspace {workspaceId}.
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: ID of the workspace.
          schema:
            type: string
        - name: deploymentId
          in: path
          required: true
          description: ID of the deployment to get.
          schema:
            type: string
      responses:
        "200":
          description: A deployment.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deployment"
        "404":
          description: Deployment not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

  /v1/workspaces/{workspaceId}/deployments/{deploymentId}/versions:
    get:
      summary: List versions for a specific deployment
      operationId: listDeploymentVersions
      description: Returns a list of versions for a specific deployment identified by {deploymentId}.
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: ID of the workspace.
          schema:
            type: string
        - name: deploymentId
          in: path
          required: true
          description: ID of the deployment.
          schema:
            type: string
      responses:
        "200":
          description: A list of deployment versions.
          content:
            application/json:
              schema:
                type: object
                properties:
                  versions:
                    type: array
                    items:
                      $ref: "#/components/schemas/DeploymentVersion"
        "404":
          description: Deployment not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

  /v1/workspaces/{workspaceId}/deployments/{deploymentId}/versions/{versionId}:
    get:
      summary: Get a specific deployment version
      operationId: getDeploymentVersion
      description: Returns a specific version identified by {versionId} for deployment {deploymentId}.
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: ID of the workspace.
          schema:
            type: string
        - name: deploymentId
          in: path
          required: true
          description: ID of the deployment.
          schema:
            type: string
        - name: versionId
          in: path
          required: true
          description: ID of the version to get.
          schema:
            type: string
      responses:
        "200":
          description: A deployment version.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeploymentVersion"
        "404":
          description: Deployment version not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

  /v1/workspaces/{workspaceId}/deployments/{deploymentId}/variables:
    get:
      summary: List variables for a specific deployment
      operationId: listDeploymentVariables
      description: Returns a list of variables for a specific deployment identified by {deploymentId}.
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: ID of the workspace.
          schema:
            type: string
        - name: deploymentId
          in: path
          required: true
          description: ID of the deployment.
          schema:
            type: string
      responses:
        "200":
          description: A list of deployment variables.
          content:
            application/json:
              schema:
                type: object
                properties:
                  variables:
                    type: array
                    items:
                      $ref: "#/components/schemas/DeploymentVariable"
        "404":
          description: Deployment not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

  /v1/workspaces/{workspaceId}/jobs:
    get:
      summary: List jobs for a specified workspace
      operationId: listJobs
      description: Returns a list of jobs for a specified workspace identified by {workspaceId}.
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: ID of the workspace to get the jobs for.
          schema:
            type: string
        - name: releaseId
          in: query
          required: false
          description: Optional filter by release ID.
          schema:
            type: string
        - name: deploymentId
          in: query
          required: false
          description: Optional filter by deployment ID.
          schema:
            type: string
        - name: environmentId
          in: query
          required: false
          description: Optional filter by environment ID.
          schema:
            type: string
        - name: resourceId
          in: query
          required: false
          description: Optional filter by resource ID.
          schema:
            type: string
      responses:
        "200":
          description: A list of jobs.
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobs:
                    type: array
                    items:
                      $ref: "#/components/schemas/Job"
        "404":
          description: Workspace not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

  /v1/workspaces/{workspaceId}/jobs/{jobId}:
    get:
      summary: Get a specific job
      operationId: getJob
      description: Returns a specific job identified by {jobId} in workspace {workspaceId}.
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: ID of the workspace.
          schema:
            type: string
        - name: jobId
          in: path
          required: true
          description: ID of the job to get.
          schema:
            type: string
      responses:
        "200":
          description: A job.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Job"
        "404":
          description: Job not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

  /v1/workspaces/{workspaceId}/job-agents:
    get:
      summary: List job agents for a specified workspace
      operationId: listJobAgents
      description: Returns a list of job agents for a specified workspace identified by {workspaceId}.
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: ID of the workspace to get the job agents for.
          schema:
            type: string
      responses:
        "200":
          description: A list of job agents.
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobAgents:
                    type: array
                    items:
                      $ref: "#/components/schemas/JobAgent"
        "404":
          description: Workspace not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

  /v1/workspaces/{workspaceId}/job-agents/{jobAgentId}:
    get:
      summary: Get a specific job agent
      operationId: getJobAgent
      description: Returns a specific job agent identified by {jobAgentId} in workspace {workspaceId}.
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: ID of the workspace.
          schema:
            type: string
        - name: jobAgentId
          in: path
          required: true
          description: ID of the job agent to get.
          schema:
            type: string
      responses:
        "200":
          description: A job agent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobAgent"
        "404":
          description: Job agent not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

  /v1/workspaces/{workspaceId}/release-targets/{policyId}:
    get:
      summary: Get a specific policy (release target)
      operationId: getPolicy
      description: Returns a specific policy identified by {policyId} in workspace {workspaceId}.
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: ID of the workspace.
          schema:
            type: string
        - name: policyId
          in: path
          required: true
          description: ID of the policy to get.
          schema:
            type: string
      responses:
        "200":
          description: A policy.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policy"
        "404":
          description: Policy not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

  /v1/workspaces/{workspaceId}/relationship-rules:
    get:
      summary: List relationship rules for a specified workspace
      operationId: listRelationshipRules
      description: Returns a list of relationship rules for a specified workspace identified by {workspaceId}.
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: ID of the workspace to get the relationship rules for.
          schema:
            type: string
      responses:
        "200":
          description: A list of relationship rules.
          content:
            application/json:
              schema:
                type: object
                properties:
                  relationshipRules:
                    type: array
                    items:
                      $ref: "#/components/schemas/RelationshipRule"
        "404":
          description: Workspace not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

  /v1/workspaces/{workspaceId}/relationship-rules/{ruleId}:
    get:
      summary: Get a specific relationship rule
      operationId: getRelationshipRule
      description: Returns a specific relationship rule identified by {ruleId} in workspace {workspaceId}.
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: ID of the workspace.
          schema:
            type: string
        - name: ruleId
          in: path
          required: true
          description: ID of the relationship rule to get.
          schema:
            type: string
      responses:
        "200":
          description: A relationship rule.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RelationshipRule"
        "404":
          description: Relationship rule not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

components:
  schemas:
    NotFoundError:
      type: object
      properties:
        error:
          type: string
          example: Workspace not found

    ResourceProvider:
      type: object
      required:
        - id
        - workspaceId
        - name
        - createdAt
        - metadata
      properties:
        id:
          type: string
        workspaceId:
          type: string
          format: uuid
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        metadata:
          type: object
          additionalProperties:
            type: string

    # Enums
    ApprovalStatus:
      type: string
      enum:
        - approved
        - rejected

    JobStatus:
      type: string
      enum:
        - cancelled
        - skipped
        - inProgress
        - actionRequired
        - pending
        - failure
        - invalidJobAgent
        - invalidIntegration
        - externalRunNotFound
        - successful

    DeploymentVersionStatus:
      type: string
      enum:
        - unspecified
        - building
        - ready
        - failed
        - rejected

    JsonSelector:
      type: object
      required:
        - json
      properties:
        json:
          type: object
    CelSelector:
      type: object
      required:
        - cel
      properties:
        cel:
          type: string
    # Core message types
    Selector:
      oneOf:
        - $ref: "#/components/schemas/JsonSelector"
        - $ref: "#/components/schemas/CelSelector"

    PropertyMatcher:
      type: object
      required:
        - fromProperty
        - toProperty
        - operator
      properties:
        fromProperty:
          type: array
          items:
            type: string
        toProperty:
          type: array
          items:
            type: string
        operator:
          type: string
          enum:
            - equals
            - notEquals
            - contains
            - startsWith
            - endsWith
            - regex

    Policy:
      type: object
      required:
        - id
        - name
        - createdAt
        - workspaceId
        - selectors
        - rules
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
        workspaceId:
          type: string
        selectors:
          type: array
          items:
            $ref: "#/components/schemas/PolicyTargetSelector"
        rules:
          type: array
          items:
            $ref: "#/components/schemas/PolicyRule"

    PolicyTargetSelector:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        deploymentSelector:
          $ref: "#/components/schemas/Selector"
        environmentSelector:
          $ref: "#/components/schemas/Selector"
        resourceSelector:
          $ref: "#/components/schemas/Selector"

    PolicyRule:
      type: object
      required:
        - id
        - policyId
        - createdAt
      properties:
        id:
          type: string
        policyId:
          type: string
        createdAt:
          type: string
        anyApproval:
          $ref: "#/components/schemas/AnyApprovalRule"

    UserApprovalRecord:
      type: object
      required:
        - userId
        - versionId
        - status
        - createdAt
      properties:
        userId:
          type: string
        versionId:
          type: string
        status:
          $ref: "#/components/schemas/ApprovalStatus"
        reason:
          type: string
        createdAt:
          type: string

    AnyApprovalRule:
      type: object
      required:
        - minApprovals
      properties:
        minApprovals:
          type: integer
          format: int32

    Resource:
      type: object
      required:
        - id
        - name
        - version
        - kind
        - identifier
        - createdAt
        - workspaceId
        - config
        - metadata
      properties:
        id:
          type: string
        name:
          type: string
        version:
          type: string
        kind:
          type: string
        identifier:
          type: string
        createdAt:
          type: string
        workspaceId:
          type: string
        providerId:
          type: string
        config:
          type: object
          additionalProperties: true
        lockedAt:
          type: string
        updatedAt:
          type: string
        deletedAt:
          type: string
        metadata:
          type: object
          additionalProperties:
            type: string

    ResourceVariable:
      type: object
      required:
        - resourceId
        - key
        - value
      properties:
        resourceId:
          type: string
        key:
          type: string
        value:
          $ref: "#/components/schemas/Value"

    Environment:
      type: object
      required:
        - id
        - name
        - systemId
        - createdAt
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        systemId:
          type: string
        resourceSelector:
          $ref: "#/components/schemas/Selector"
        createdAt:
          type: string

    Deployment:
      type: object
      required:
        - id
        - name
        - slug
        - systemId
        - jobAgentConfig
      properties:
        id:
          type: string
        name:
          type: string
        slug:
          type: string
        description:
          type: string
        systemId:
          type: string
        jobAgentId:
          type: string
        jobAgentConfig:
          type: object
          additionalProperties: true
        resourceSelector:
          $ref: "#/components/schemas/Selector"

    JobAgent:
      type: object
      required:
        - id
        - workspaceId
        - name
        - type
        - config
      properties:
        id:
          type: string
        workspaceId:
          type: string
        name:
          type: string
        type:
          type: string
        config:
          type: object
          additionalProperties: true

    Job:
      type: object
      required:
        - id
        - releaseId
        - jobAgentId
        - jobAgentConfig
        - status
        - resourceId
        - environmentId
        - deploymentId
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
        releaseId:
          type: string
        jobAgentId:
          type: string
        jobAgentConfig:
          type: object
          additionalProperties: true
        externalId:
          type: string
        status:
          $ref: "#/components/schemas/JobStatus"
        resourceId:
          type: string
        environmentId:
          type: string
        deploymentId:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        startedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time

    ReleaseTarget:
      type: object
      required:
        - resourceId
        - environmentId
        - deploymentId
      properties:
        resourceId:
          type: string
        environmentId:
          type: string
        deploymentId:
          type: string

    BooleanValue:
      type: boolean
    NumberValue:
      type: number
    IntegerValue:
      type: integer
    StringValue:
      type: string
    ObjectValue:
      type: object
      required:
        - object
      properties:
        object:
          type: object
          additionalProperties: true

    NullValue:
      type: boolean
      enum: [true]

    LiteralValue:
      oneOf:
        - $ref: "#/components/schemas/BooleanValue"
        - $ref: "#/components/schemas/NumberValue"
        - $ref: "#/components/schemas/IntegerValue"
        - $ref: "#/components/schemas/StringValue"
        - $ref: "#/components/schemas/ObjectValue"
        - $ref: "#/components/schemas/NullValue"

    SensitiveValue:
      type: object
      required:
        - valueHash
      properties:
        valueHash:
          type: string

    ReferenceValue:
      type: object
      required:
        - reference
        - path
      properties:
        reference:
          type: string
        path:
          type: array
          items:
            type: string

    Value:
      oneOf:
        - $ref: "#/components/schemas/LiteralValue"
        - $ref: "#/components/schemas/ReferenceValue"
        - $ref: "#/components/schemas/SensitiveValue"

    Release:
      type: object
      required:
        - version
        - variables
        - encryptedVariables
        - releaseTarget
        - createdAt
      properties:
        version:
          $ref: "#/components/schemas/DeploymentVersion"
        variables:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/LiteralValue"
        encryptedVariables:
          type: array
          items:
            type: string
        releaseTarget:
          $ref: "#/components/schemas/ReleaseTarget"
        createdAt:
          type: string

    DeploymentVariable:
      type: object
      required:
        - id
        - key
        - variableId
        - deploymentId
      properties:
        id:
          type: string
        key:
          type: string
        variableId:
          type: string
        description:
          type: string
        deploymentId:
          type: string
        defaultValue:
          $ref: "#/components/schemas/LiteralValue"

    DeploymentVariableValue:
      type: object
      required:
        - id
        - deploymentVariableId
        - priority
        - value
      properties:
        id:
          type: string
        deploymentVariableId:
          type: string
        priority:
          type: integer
          format: int64
        resourceSelector:
          $ref: "#/components/schemas/Selector"
        value:
          $ref: "#/components/schemas/Value"

    DeploymentVersion:
      type: object
      required:
        - id
        - name
        - tag
        - config
        - jobAgentConfig
        - deploymentId
        - status
        - createdAt
      properties:
        id:
          type: string
        name:
          type: string
        tag:
          type: string
        config:
          type: object
          additionalProperties: true
        jobAgentConfig:
          type: object
          additionalProperties: true
        deploymentId:
          type: string
        status:
          $ref: "#/components/schemas/DeploymentVersionStatus"
        message:
          type: string
        createdAt:
          type: string

    System:
      type: object
      required:
        - id
        - workspaceId
        - name
      properties:
        id:
          type: string
        workspaceId:
          type: string
        name:
          type: string
        description:
          type: string

    CelMatcher:
      type: object
      required:
        - cel
      properties:
        cel:
          type: string

    PropertiesMatcher:
      type: object
      required:
        - properties
      properties:
        properties:
          type: array
          items:
            $ref: "#/components/schemas/PropertyMatcher"

    RelationshipRule:
      type: object
      required:
        - id
        - name
        - reference
        - fromType
        - toType
        - matcher
        - relationshipType
        - metadata
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        reference:
          type: string
        fromType:
          type: string
        fromSelector:
          $ref: "#/components/schemas/Selector"
        toType:
          type: string
        toSelector:
          $ref: "#/components/schemas/Selector"
        matcher:
          oneOf:
            - $ref: "#/components/schemas/CelMatcher"
            - $ref: "#/components/schemas/PropertiesMatcher"
        relationshipType:
          type: string
        metadata:
          type: object
          additionalProperties:
            type: string
