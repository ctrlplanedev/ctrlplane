openapi: "3.0.0"
info:
  version: 1.0.0
  title: Workspace Engine API
  description: OpenAPI schemas for workspace engine protobuf messages

paths:
  /v1/workspaces:
    get:
      summary: List workspace IDs
      operationId: listWorkspaceIds
      description: Returns a list of workspace that are in memory. These could be inactive.
      responses:
        "200":
          description: A list of workspace IDs.
          content:
            application/json:
              schema:
                type: object
                properties:
                  workspaceIds:
                    type: array
                    items:
                      type: string

  /v1/workspaces/{workspaceId}/environments/{environmentId}/resources:
    get:
      summary: Get resources for an environment
      operationId: getEnvironmentResources
      description: Returns a list of resources for environment {environmentId}.
      parameters:
        - $ref: "#/components/parameters/workspaceId"
        - $ref: "#/components/parameters/environmentId"
      responses:
        "200":
          description: A resource.
          content:
            application/json:
              schema:
                type: object
                properties:
                  resources:
                    type: array
                    items:
                      $ref: "#/components/schemas/Resource"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

  /v1/workspaces/{workspaceId}/deployments/{deploymentId}/resources:
    get:
      summary: Get resources for a deployment
      operationId: getDeploymentResources
      description: Returns a list of resources for deployment {deploymentId}.
      parameters:
        - $ref: "#/components/parameters/workspaceId"
        - $ref: "#/components/parameters/deploymentId"
      responses:
        "200":
          description: A resource.
          content:
            application/json:
              schema:
                type: object
                properties:
                  resources:
                    type: array
                    items:
                      $ref: "#/components/schemas/Resource"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

  /v1/workspaces/{workspaceId}/release-targets/evaluate:
    post:
      summary: Evaluate policies for a release target
      operationId: evaluateReleaseTarget
      description: Evaluates all policies and rules that apply to a given release target and returns the evaluation results.
      parameters:
        - $ref: "#/components/parameters/workspaceId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EvaluateReleaseTargetRequest"
      responses:
        "200":
          description: Policy evaluation results for the release target.
          content:
            application/json:
              schema:
                properties:
                  workspaceDecision:
                    $ref: "#/components/schemas/DeployDecision"
                  versionDecision:
                    $ref: "#/components/schemas/DeployDecision"
        "404":
          description: Workspace or target not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

  /v1/workspaces/{workspaceId}/policies/{policyId}/release-targets:
    get:
      summary: Get release targets for a policy
      operationId: getReleaseTargetsForPolicy
      description: Returns a list of release targets for a policy {policyId}.
      parameters:
        - $ref: "#/components/parameters/workspaceId"
        - $ref: "#/components/parameters/policyId"
      responses:
        "200":
          description: A list of release targets.
          content:
            application/json:
              schema:
                type: object
                properties:
                  releaseTargets:
                    type: array
                    items:
                      $ref: "#/components/schemas/ReleaseTarget"
        "404":
          description: Policy not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

  /v1/workspaces/{workspaceId}/release-targets/{releaseTargetId}/policies:
    get:
      summary: Get policies for a release target
      operationId: getPoliciesForReleaseTarget
      description: Returns a list of policies for a release target {releaseTargetId}.
      parameters:
        - $ref: "#/components/parameters/workspaceId"
        - $ref: "#/components/parameters/releaseTargetId"
      responses:
        "200":
          description: A list of policies.
          content:
            application/json:
              schema:
                type: object
                properties:
                  policies:
                    type: array
                    items:
                      $ref: "#/components/schemas/Policy"
        "404":
          description: Release target not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

components:
  parameters:
    policyId:
      name: policyId
      in: path
      required: true
      description: ID of the policy.
      schema:
        type: string
    workspaceId:
      name: workspaceId
      in: path
      required: true
      description: ID of the workspace.
      schema:
        type: string
    resourceId:
      name: resourceId
      in: path
      required: true
      description: ID of the resource.
      schema:
        type: string
    deploymentId:
      name: deploymentId
      in: path
      required: true
      description: ID of the deployment.
      schema:
        type: string
    environmentId:
      name: environmentId
      in: path
      required: true
      description: ID of the environment.
      schema:
        type: string
    releaseTargetId:
      name: releaseTargetId
      in: path
      required: true
      description: ID of the release target.
      schema:
        type: string
  schemas:
    DeployDecision:
      type: object
      required:
        - policyResults
      properties:
        policyResults:
          type: array
          items:
            $ref: "#/components/schemas/PolicyEvaluation"

    PolicyEvaluation:
      type: object
      required:
        - ruleResults
      properties:
        policy:
          $ref: "#/components/schemas/Policy"
          nullable: true
        summary:
          type: string
        ruleResults:
          type: array
          items:
            $ref: "#/components/schemas/RuleEvaluation"

    RuleEvaluation:
      type: object
      required:
        - allowed
        - actionRequired
        - message
        - details
      properties:
        allowed:
          type: boolean
          description: Whether the rule allows the deployment
        actionRequired:
          type: boolean
          description: Whether the rule requires an action (e.g., approval, wait)
        actionType:
          type: string
          enum:
            - approval
            - wait
          description: Type of action required
        message:
          type: string
          description: Human-readable explanation of the rule result
        details:
          type: object
          additionalProperties: true
          description: Additional details about the rule evaluation

    NotFoundError:
      type: object
      properties:
        error:
          type: string
          example: Workspace not found

    ResourceProvider:
      type: object
      required:
        - id
        - workspaceId
        - name
        - createdAt
        - metadata
      properties:
        id:
          type: string
        workspaceId:
          type: string
          format: uuid
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        metadata:
          type: object
          additionalProperties:
            type: string

    # Enums
    ApprovalStatus:
      type: string
      enum:
        - approved
        - rejected

    JobStatus:
      type: string
      enum:
        - cancelled
        - skipped
        - inProgress
        - actionRequired
        - pending
        - failure
        - invalidJobAgent
        - invalidIntegration
        - externalRunNotFound
        - successful

    DeploymentVersionStatus:
      type: string
      enum:
        - unspecified
        - building
        - ready
        - failed
        - rejected

    JsonSelector:
      type: object
      required:
        - json
      properties:
        json:
          type: object
    CelSelector:
      type: object
      required:
        - cel
      properties:
        cel:
          type: string
    # Core message types
    Selector:
      oneOf:
        - $ref: "#/components/schemas/JsonSelector"
        - $ref: "#/components/schemas/CelSelector"

    PropertyMatcher:
      type: object
      required:
        - fromProperty
        - toProperty
        - operator
      properties:
        fromProperty:
          type: array
          items:
            type: string
        toProperty:
          type: array
          items:
            type: string
        operator:
          type: string
          enum:
            - equals
            - notEquals
            - contains
            - startsWith
            - endsWith
            - regex

    Policy:
      type: object
      required:
        - id
        - name
        - createdAt
        - workspaceId
        - selectors
        - rules
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
        workspaceId:
          type: string
        selectors:
          type: array
          items:
            $ref: "#/components/schemas/PolicyTargetSelector"
        rules:
          type: array
          items:
            $ref: "#/components/schemas/PolicyRule"

    PolicyTargetSelector:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        deploymentSelector:
          $ref: "#/components/schemas/Selector"
        environmentSelector:
          $ref: "#/components/schemas/Selector"
        resourceSelector:
          $ref: "#/components/schemas/Selector"

    PolicyRule:
      type: object
      required:
        - id
        - policyId
        - createdAt
      properties:
        id:
          type: string
        policyId:
          type: string
        createdAt:
          type: string
        anyApproval:
          $ref: "#/components/schemas/AnyApprovalRule"

    UserApprovalRecord:
      type: object
      required:
        - userId
        - versionId
        - environmentId
        - status
        - createdAt
      properties:
        userId:
          type: string
        versionId:
          type: string
        environmentId:
          type: string
        status:
          $ref: "#/components/schemas/ApprovalStatus"
        reason:
          type: string
        createdAt:
          type: string

    AnyApprovalRule:
      type: object
      required:
        - minApprovals
      properties:
        minApprovals:
          type: integer
          format: int32

    Resource:
      type: object
      required:
        - id
        - name
        - version
        - kind
        - identifier
        - createdAt
        - workspaceId
        - config
        - metadata
      properties:
        id:
          type: string
        name:
          type: string
        version:
          type: string
        kind:
          type: string
        identifier:
          type: string
        createdAt:
          type: string
          format: date-time
        workspaceId:
          type: string
        providerId:
          type: string
        config:
          type: object
          additionalProperties: true
        lockedAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
        metadata:
          type: object
          additionalProperties:
            type: string

    ResourceVariable:
      type: object
      required:
        - resourceId
        - key
        - value
      properties:
        resourceId:
          type: string
        key:
          type: string
        value:
          $ref: "#/components/schemas/Value"

    Environment:
      type: object
      required:
        - id
        - name
        - systemId
        - createdAt
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        systemId:
          type: string
        resourceSelector:
          $ref: "#/components/schemas/Selector"
        createdAt:
          type: string

    Deployment:
      type: object
      required:
        - id
        - name
        - slug
        - systemId
        - jobAgentConfig
      properties:
        id:
          type: string
        name:
          type: string
        slug:
          type: string
        description:
          type: string
        systemId:
          type: string
        jobAgentId:
          type: string
        jobAgentConfig:
          type: object
          additionalProperties: true
        resourceSelector:
          $ref: "#/components/schemas/Selector"

    JobAgent:
      type: object
      required:
        - id
        - workspaceId
        - name
        - type
        - config
      properties:
        id:
          type: string
        workspaceId:
          type: string
        name:
          type: string
        type:
          type: string
        config:
          type: object
          additionalProperties: true

    Job:
      type: object
      required:
        - id
        - releaseId
        - jobAgentId
        - jobAgentConfig
        - status
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
        releaseId:
          type: string
        jobAgentId:
          type: string
        jobAgentConfig:
          type: object
          additionalProperties: true
        externalId:
          type: string
        status:
          $ref: "#/components/schemas/JobStatus"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        startedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time

    ReleaseTarget:
      type: object
      required:
        - resourceId
        - environmentId
        - deploymentId
      properties:
        resourceId:
          type: string
        environmentId:
          type: string
        deploymentId:
          type: string

    GithubEntity:
      type: object
      required:
        - installationId
        - slug
      properties:
        installationId:
          type: integer
        slug:
          type: string

    BooleanValue:
      type: boolean
    NumberValue:
      type: number
    IntegerValue:
      type: integer
    StringValue:
      type: string
    ObjectValue:
      type: object
      required:
        - object
      properties:
        object:
          type: object
          additionalProperties: true

    NullValue:
      type: boolean
      enum: [true]

    LiteralValue:
      oneOf:
        - $ref: "#/components/schemas/BooleanValue"
        - $ref: "#/components/schemas/NumberValue"
        - $ref: "#/components/schemas/IntegerValue"
        - $ref: "#/components/schemas/StringValue"
        - $ref: "#/components/schemas/ObjectValue"
        - $ref: "#/components/schemas/NullValue"

    SensitiveValue:
      type: object
      required:
        - valueHash
      properties:
        valueHash:
          type: string

    ReferenceValue:
      type: object
      required:
        - reference
        - path
      properties:
        reference:
          type: string
        path:
          type: array
          items:
            type: string

    Value:
      oneOf:
        - $ref: "#/components/schemas/LiteralValue"
        - $ref: "#/components/schemas/ReferenceValue"
        - $ref: "#/components/schemas/SensitiveValue"

    Release:
      type: object
      required:
        - version
        - variables
        - encryptedVariables
        - releaseTarget
        - createdAt
      properties:
        version:
          $ref: "#/components/schemas/DeploymentVersion"
        variables:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/LiteralValue"
        encryptedVariables:
          type: array
          items:
            type: string
        releaseTarget:
          $ref: "#/components/schemas/ReleaseTarget"
        createdAt:
          type: string

    DeploymentVariable:
      type: object
      required:
        - id
        - key
        - deploymentId
      properties:
        id:
          type: string
        key:
          type: string
        description:
          type: string
        deploymentId:
          type: string
        defaultValue:
          $ref: "#/components/schemas/LiteralValue"

    DeploymentVariableValue:
      type: object
      required:
        - id
        - deploymentVariableId
        - priority
        - value
      properties:
        id:
          type: string
        deploymentVariableId:
          type: string
        priority:
          type: integer
          format: int64
        resourceSelector:
          $ref: "#/components/schemas/Selector"
        value:
          $ref: "#/components/schemas/Value"

    DeploymentVersion:
      type: object
      required:
        - id
        - name
        - tag
        - config
        - jobAgentConfig
        - deploymentId
        - status
        - createdAt
      properties:
        id:
          type: string
        name:
          type: string
        tag:
          type: string
        config:
          type: object
          additionalProperties: true
        jobAgentConfig:
          type: object
          additionalProperties: true
        deploymentId:
          type: string
        status:
          $ref: "#/components/schemas/DeploymentVersionStatus"
        message:
          type: string
        createdAt:
          type: string

    System:
      type: object
      required:
        - id
        - workspaceId
        - name
      properties:
        id:
          type: string
        workspaceId:
          type: string
        name:
          type: string
        description:
          type: string

    CelMatcher:
      type: object
      required:
        - cel
      properties:
        cel:
          type: string

    PropertiesMatcher:
      type: object
      required:
        - properties
      properties:
        properties:
          type: array
          items:
            $ref: "#/components/schemas/PropertyMatcher"

    RelationshipRule:
      type: object
      required:
        - id
        - name
        - reference
        - fromType
        - toType
        - matcher
        - relationshipType
        - metadata
        - workspaceId
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        reference:
          type: string
        fromType:
          type: string
        fromSelector:
          $ref: "#/components/schemas/Selector"
        toType:
          type: string
        toSelector:
          $ref: "#/components/schemas/Selector"
        matcher:
          oneOf:
            - $ref: "#/components/schemas/CelMatcher"
            - $ref: "#/components/schemas/PropertiesMatcher"
        relationshipType:
          type: string
        metadata:
          type: object
          additionalProperties:
            type: string
        workspaceId:
          type: string

    EvaluateReleaseTargetRequest:
      type: object
      required:
        - releaseTarget
        - version
      properties:
        releaseTarget:
          $ref: "#/components/schemas/ReleaseTarget"
        version:
          $ref: "#/components/schemas/DeploymentVersion"
