syntax = "proto3";

package condition;

option go_package = "github.com/ctrlplanedev/selector-engine/pkg/pb";

// ConditionType defines the types of conditions available
enum ConditionType {
  CONDITION_TYPE_UNSPECIFIED = 0;
  CONDITION_TYPE_METADATA = 1;
  CONDITION_TYPE_CREATED_AT = 2;
  CONDITION_TYPE_UPDATED_AT = 3;
  CONDITION_TYPE_COMPARISON = 4;
  CONDITION_TYPE_VERSION = 5;
  CONDITION_TYPE_ID = 6;
  CONDITION_TYPE_NAME = 7;
  CONDITION_TYPE_SYSTEM = 8;
}

// ColumnOperator defines string matching operators
enum ColumnOperator {
  COLUMN_OPERATOR_UNSPECIFIED = 0;
  COLUMN_OPERATOR_EQUALS = 1;
  COLUMN_OPERATOR_STARTS_WITH = 2;
  COLUMN_OPERATOR_ENDS_WITH = 3;
  COLUMN_OPERATOR_CONTAINS = 4;
}

// DateOperator defines date comparison operators
enum DateOperator {
  DATE_OPERATOR_UNSPECIFIED = 0;
  DATE_OPERATOR_BEFORE = 1;
  DATE_OPERATOR_AFTER = 2;
  DATE_OPERATOR_BEFORE_OR_ON = 3;
  DATE_OPERATOR_AFTER_OR_ON = 4;
}

// DateField defines the date fields that can be used in conditions
enum DateField {
  DATE_FIELD_UNSPECIFIED = 0;
  DATE_FIELD_CREATED_AT = 1; // CreatedAt date field
  DATE_FIELD_UPDATED_AT = 2; // UpdatedAt date field
}

// MetadataOperator defines metadata matching operators
enum MetadataOperator {
  METADATA_OPERATOR_UNSPECIFIED = 0;
  METADATA_OPERATOR_EQUALS = 1;
  METADATA_OPERATOR_NULL = 2;
  METADATA_OPERATOR_STARTS_WITH = 3;
  METADATA_OPERATOR_ENDS_WITH = 4;
  METADATA_OPERATOR_CONTAINS = 5;
}

// ComparisonOperator defines logical operators for combining conditions
enum ComparisonOperator {
  COMPARISON_OPERATOR_UNSPECIFIED = 0;
  COMPARISON_OPERATOR_AND = 1;
  COMPARISON_OPERATOR_OR = 2;
}

// IDCondition represents an ID matching condition
message IDCondition {
  ConditionType type_field = 1;
  string operator = 2; // Only "equals" is supported
  string value = 3;
}

// NameCondition represents a name matching condition
message NameCondition {
  ConditionType type_field = 1;
  ColumnOperator operator = 2;
  string value = 3;
}

// SystemCondition represents a system matching condition
message SystemCondition {
  ConditionType type_field = 1;
  string operator = 2; // Only "equals" is supported
  string value = 3;
}

// VersionCondition represents a version matching condition
message VersionCondition {
  ConditionType type_field = 1;
  ColumnOperator operator = 2;
  string value = 3;
}

// DateCondition represents a created-at or last-sync date condition
message DateCondition {
  ConditionType type_field = 1;
  DateOperator operator = 2;
  string value = 3; // Date in ISO-8601 format
  DateField date_field = 4; // CreatedAt or UpdatedAt
}

// MetadataNullCondition represents a metadata null check condition
message MetadataNullCondition {
  ConditionType type_field = 1;
  string key = 2;
  MetadataOperator operator = 3; // Must be METADATA_OPERATOR_NULL
}

// MetadataValueCondition represents a metadata value matching condition
message MetadataValueCondition {
  ConditionType type_field = 1;
  string key = 2;
  MetadataOperator operator = 3; // Cannot be METADATA_OPERATOR_NULL
  string value = 4;
}

// ComparisonCondition represents a logical combination of conditions
message ComparisonCondition {
  ConditionType type_field = 1;
  ComparisonOperator operator = 2;
  repeated Condition conditions = 3;
  int32 depth = 4; // For tracking nesting depth (max 2)
}

// Condition is the main message that can represent any condition type
message Condition {
  oneof condition_type {
    IDCondition id_condition = 1;
    NameCondition name_condition = 2;
    SystemCondition system_condition = 3;
    VersionCondition version_condition = 4;
    DateCondition date_condition = 5;
    MetadataNullCondition metadata_null_condition = 6;
    MetadataValueCondition metadata_value_condition = 7;
    ComparisonCondition comparison_condition = 8;
  }
}

// Conditions represents a collection of conditions
message Conditions {
  repeated Condition conditions = 1;
} 