// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: proto/condition.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ConditionType defines the types of conditions available
type ConditionType int32

const (
	ConditionType_CONDITION_TYPE_UNSPECIFIED ConditionType = 0
	ConditionType_CONDITION_TYPE_METADATA    ConditionType = 1
	ConditionType_CONDITION_TYPE_CREATED_AT  ConditionType = 2
	ConditionType_CONDITION_TYPE_UPDATED_AT  ConditionType = 3
	ConditionType_CONDITION_TYPE_COMPARISON  ConditionType = 4
	ConditionType_CONDITION_TYPE_VERSION     ConditionType = 5
	ConditionType_CONDITION_TYPE_ID          ConditionType = 6
	ConditionType_CONDITION_TYPE_NAME        ConditionType = 7
	ConditionType_CONDITION_TYPE_SYSTEM      ConditionType = 8
)

// Enum value maps for ConditionType.
var (
	ConditionType_name = map[int32]string{
		0: "CONDITION_TYPE_UNSPECIFIED",
		1: "CONDITION_TYPE_METADATA",
		2: "CONDITION_TYPE_CREATED_AT",
		3: "CONDITION_TYPE_UPDATED_AT",
		4: "CONDITION_TYPE_COMPARISON",
		5: "CONDITION_TYPE_VERSION",
		6: "CONDITION_TYPE_ID",
		7: "CONDITION_TYPE_NAME",
		8: "CONDITION_TYPE_SYSTEM",
	}
	ConditionType_value = map[string]int32{
		"CONDITION_TYPE_UNSPECIFIED": 0,
		"CONDITION_TYPE_METADATA":    1,
		"CONDITION_TYPE_CREATED_AT":  2,
		"CONDITION_TYPE_UPDATED_AT":  3,
		"CONDITION_TYPE_COMPARISON":  4,
		"CONDITION_TYPE_VERSION":     5,
		"CONDITION_TYPE_ID":          6,
		"CONDITION_TYPE_NAME":        7,
		"CONDITION_TYPE_SYSTEM":      8,
	}
)

func (x ConditionType) Enum() *ConditionType {
	p := new(ConditionType)
	*p = x
	return p
}

func (x ConditionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_condition_proto_enumTypes[0].Descriptor()
}

func (ConditionType) Type() protoreflect.EnumType {
	return &file_proto_condition_proto_enumTypes[0]
}

func (x ConditionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionType.Descriptor instead.
func (ConditionType) EnumDescriptor() ([]byte, []int) {
	return file_proto_condition_proto_rawDescGZIP(), []int{0}
}

// ColumnOperator defines string matching operators
type ColumnOperator int32

const (
	ColumnOperator_COLUMN_OPERATOR_UNSPECIFIED ColumnOperator = 0
	ColumnOperator_COLUMN_OPERATOR_EQUALS      ColumnOperator = 1
	ColumnOperator_COLUMN_OPERATOR_STARTS_WITH ColumnOperator = 2
	ColumnOperator_COLUMN_OPERATOR_ENDS_WITH   ColumnOperator = 3
	ColumnOperator_COLUMN_OPERATOR_CONTAINS    ColumnOperator = 4
)

// Enum value maps for ColumnOperator.
var (
	ColumnOperator_name = map[int32]string{
		0: "COLUMN_OPERATOR_UNSPECIFIED",
		1: "COLUMN_OPERATOR_EQUALS",
		2: "COLUMN_OPERATOR_STARTS_WITH",
		3: "COLUMN_OPERATOR_ENDS_WITH",
		4: "COLUMN_OPERATOR_CONTAINS",
	}
	ColumnOperator_value = map[string]int32{
		"COLUMN_OPERATOR_UNSPECIFIED": 0,
		"COLUMN_OPERATOR_EQUALS":      1,
		"COLUMN_OPERATOR_STARTS_WITH": 2,
		"COLUMN_OPERATOR_ENDS_WITH":   3,
		"COLUMN_OPERATOR_CONTAINS":    4,
	}
)

func (x ColumnOperator) Enum() *ColumnOperator {
	p := new(ColumnOperator)
	*p = x
	return p
}

func (x ColumnOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColumnOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_condition_proto_enumTypes[1].Descriptor()
}

func (ColumnOperator) Type() protoreflect.EnumType {
	return &file_proto_condition_proto_enumTypes[1]
}

func (x ColumnOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColumnOperator.Descriptor instead.
func (ColumnOperator) EnumDescriptor() ([]byte, []int) {
	return file_proto_condition_proto_rawDescGZIP(), []int{1}
}

// DateOperator defines date comparison operators
type DateOperator int32

const (
	DateOperator_DATE_OPERATOR_UNSPECIFIED  DateOperator = 0
	DateOperator_DATE_OPERATOR_BEFORE       DateOperator = 1
	DateOperator_DATE_OPERATOR_AFTER        DateOperator = 2
	DateOperator_DATE_OPERATOR_BEFORE_OR_ON DateOperator = 3
	DateOperator_DATE_OPERATOR_AFTER_OR_ON  DateOperator = 4
)

// Enum value maps for DateOperator.
var (
	DateOperator_name = map[int32]string{
		0: "DATE_OPERATOR_UNSPECIFIED",
		1: "DATE_OPERATOR_BEFORE",
		2: "DATE_OPERATOR_AFTER",
		3: "DATE_OPERATOR_BEFORE_OR_ON",
		4: "DATE_OPERATOR_AFTER_OR_ON",
	}
	DateOperator_value = map[string]int32{
		"DATE_OPERATOR_UNSPECIFIED":  0,
		"DATE_OPERATOR_BEFORE":       1,
		"DATE_OPERATOR_AFTER":        2,
		"DATE_OPERATOR_BEFORE_OR_ON": 3,
		"DATE_OPERATOR_AFTER_OR_ON":  4,
	}
)

func (x DateOperator) Enum() *DateOperator {
	p := new(DateOperator)
	*p = x
	return p
}

func (x DateOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DateOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_condition_proto_enumTypes[2].Descriptor()
}

func (DateOperator) Type() protoreflect.EnumType {
	return &file_proto_condition_proto_enumTypes[2]
}

func (x DateOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DateOperator.Descriptor instead.
func (DateOperator) EnumDescriptor() ([]byte, []int) {
	return file_proto_condition_proto_rawDescGZIP(), []int{2}
}

// DateField defines the date fields that can be used in conditions
type DateField int32

const (
	DateField_DATE_FIELD_UNSPECIFIED DateField = 0
	DateField_DATE_FIELD_CREATED_AT  DateField = 1 // CreatedAt date field
	DateField_DATE_FIELD_UPDATED_AT  DateField = 2 // UpdatedAt date field
)

// Enum value maps for DateField.
var (
	DateField_name = map[int32]string{
		0: "DATE_FIELD_UNSPECIFIED",
		1: "DATE_FIELD_CREATED_AT",
		2: "DATE_FIELD_UPDATED_AT",
	}
	DateField_value = map[string]int32{
		"DATE_FIELD_UNSPECIFIED": 0,
		"DATE_FIELD_CREATED_AT":  1,
		"DATE_FIELD_UPDATED_AT":  2,
	}
)

func (x DateField) Enum() *DateField {
	p := new(DateField)
	*p = x
	return p
}

func (x DateField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DateField) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_condition_proto_enumTypes[3].Descriptor()
}

func (DateField) Type() protoreflect.EnumType {
	return &file_proto_condition_proto_enumTypes[3]
}

func (x DateField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DateField.Descriptor instead.
func (DateField) EnumDescriptor() ([]byte, []int) {
	return file_proto_condition_proto_rawDescGZIP(), []int{3}
}

// MetadataOperator defines metadata matching operators
type MetadataOperator int32

const (
	MetadataOperator_METADATA_OPERATOR_UNSPECIFIED MetadataOperator = 0
	MetadataOperator_METADATA_OPERATOR_EQUALS      MetadataOperator = 1
	MetadataOperator_METADATA_OPERATOR_NULL        MetadataOperator = 2
	MetadataOperator_METADATA_OPERATOR_STARTS_WITH MetadataOperator = 3
	MetadataOperator_METADATA_OPERATOR_ENDS_WITH   MetadataOperator = 4
	MetadataOperator_METADATA_OPERATOR_CONTAINS    MetadataOperator = 5
)

// Enum value maps for MetadataOperator.
var (
	MetadataOperator_name = map[int32]string{
		0: "METADATA_OPERATOR_UNSPECIFIED",
		1: "METADATA_OPERATOR_EQUALS",
		2: "METADATA_OPERATOR_NULL",
		3: "METADATA_OPERATOR_STARTS_WITH",
		4: "METADATA_OPERATOR_ENDS_WITH",
		5: "METADATA_OPERATOR_CONTAINS",
	}
	MetadataOperator_value = map[string]int32{
		"METADATA_OPERATOR_UNSPECIFIED": 0,
		"METADATA_OPERATOR_EQUALS":      1,
		"METADATA_OPERATOR_NULL":        2,
		"METADATA_OPERATOR_STARTS_WITH": 3,
		"METADATA_OPERATOR_ENDS_WITH":   4,
		"METADATA_OPERATOR_CONTAINS":    5,
	}
)

func (x MetadataOperator) Enum() *MetadataOperator {
	p := new(MetadataOperator)
	*p = x
	return p
}

func (x MetadataOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetadataOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_condition_proto_enumTypes[4].Descriptor()
}

func (MetadataOperator) Type() protoreflect.EnumType {
	return &file_proto_condition_proto_enumTypes[4]
}

func (x MetadataOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetadataOperator.Descriptor instead.
func (MetadataOperator) EnumDescriptor() ([]byte, []int) {
	return file_proto_condition_proto_rawDescGZIP(), []int{4}
}

// ComparisonOperator defines logical operators for combining conditions
type ComparisonOperator int32

const (
	ComparisonOperator_COMPARISON_OPERATOR_UNSPECIFIED ComparisonOperator = 0
	ComparisonOperator_COMPARISON_OPERATOR_AND         ComparisonOperator = 1
	ComparisonOperator_COMPARISON_OPERATOR_OR          ComparisonOperator = 2
)

// Enum value maps for ComparisonOperator.
var (
	ComparisonOperator_name = map[int32]string{
		0: "COMPARISON_OPERATOR_UNSPECIFIED",
		1: "COMPARISON_OPERATOR_AND",
		2: "COMPARISON_OPERATOR_OR",
	}
	ComparisonOperator_value = map[string]int32{
		"COMPARISON_OPERATOR_UNSPECIFIED": 0,
		"COMPARISON_OPERATOR_AND":         1,
		"COMPARISON_OPERATOR_OR":          2,
	}
)

func (x ComparisonOperator) Enum() *ComparisonOperator {
	p := new(ComparisonOperator)
	*p = x
	return p
}

func (x ComparisonOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComparisonOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_condition_proto_enumTypes[5].Descriptor()
}

func (ComparisonOperator) Type() protoreflect.EnumType {
	return &file_proto_condition_proto_enumTypes[5]
}

func (x ComparisonOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComparisonOperator.Descriptor instead.
func (ComparisonOperator) EnumDescriptor() ([]byte, []int) {
	return file_proto_condition_proto_rawDescGZIP(), []int{5}
}

// IDCondition represents an ID matching condition
type IDCondition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TypeField     ConditionType          `protobuf:"varint,1,opt,name=type_field,json=typeField,proto3,enum=condition.ConditionType" json:"type_field,omitempty"`
	Operator      string                 `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"` // Only "equals" is supported
	Value         string                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IDCondition) Reset() {
	*x = IDCondition{}
	mi := &file_proto_condition_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IDCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDCondition) ProtoMessage() {}

func (x *IDCondition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_condition_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDCondition.ProtoReflect.Descriptor instead.
func (*IDCondition) Descriptor() ([]byte, []int) {
	return file_proto_condition_proto_rawDescGZIP(), []int{0}
}

func (x *IDCondition) GetTypeField() ConditionType {
	if x != nil {
		return x.TypeField
	}
	return ConditionType_CONDITION_TYPE_UNSPECIFIED
}

func (x *IDCondition) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *IDCondition) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// NameCondition represents a name matching condition
type NameCondition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TypeField     ConditionType          `protobuf:"varint,1,opt,name=type_field,json=typeField,proto3,enum=condition.ConditionType" json:"type_field,omitempty"`
	Operator      ColumnOperator         `protobuf:"varint,2,opt,name=operator,proto3,enum=condition.ColumnOperator" json:"operator,omitempty"`
	Value         string                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NameCondition) Reset() {
	*x = NameCondition{}
	mi := &file_proto_condition_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NameCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameCondition) ProtoMessage() {}

func (x *NameCondition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_condition_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameCondition.ProtoReflect.Descriptor instead.
func (*NameCondition) Descriptor() ([]byte, []int) {
	return file_proto_condition_proto_rawDescGZIP(), []int{1}
}

func (x *NameCondition) GetTypeField() ConditionType {
	if x != nil {
		return x.TypeField
	}
	return ConditionType_CONDITION_TYPE_UNSPECIFIED
}

func (x *NameCondition) GetOperator() ColumnOperator {
	if x != nil {
		return x.Operator
	}
	return ColumnOperator_COLUMN_OPERATOR_UNSPECIFIED
}

func (x *NameCondition) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// SystemCondition represents a system matching condition
type SystemCondition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TypeField     ConditionType          `protobuf:"varint,1,opt,name=type_field,json=typeField,proto3,enum=condition.ConditionType" json:"type_field,omitempty"`
	Operator      string                 `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"` // Only "equals" is supported
	Value         string                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SystemCondition) Reset() {
	*x = SystemCondition{}
	mi := &file_proto_condition_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemCondition) ProtoMessage() {}

func (x *SystemCondition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_condition_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemCondition.ProtoReflect.Descriptor instead.
func (*SystemCondition) Descriptor() ([]byte, []int) {
	return file_proto_condition_proto_rawDescGZIP(), []int{2}
}

func (x *SystemCondition) GetTypeField() ConditionType {
	if x != nil {
		return x.TypeField
	}
	return ConditionType_CONDITION_TYPE_UNSPECIFIED
}

func (x *SystemCondition) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *SystemCondition) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// VersionCondition represents a version matching condition
type VersionCondition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TypeField     ConditionType          `protobuf:"varint,1,opt,name=type_field,json=typeField,proto3,enum=condition.ConditionType" json:"type_field,omitempty"`
	Operator      ColumnOperator         `protobuf:"varint,2,opt,name=operator,proto3,enum=condition.ColumnOperator" json:"operator,omitempty"`
	Value         string                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersionCondition) Reset() {
	*x = VersionCondition{}
	mi := &file_proto_condition_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionCondition) ProtoMessage() {}

func (x *VersionCondition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_condition_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionCondition.ProtoReflect.Descriptor instead.
func (*VersionCondition) Descriptor() ([]byte, []int) {
	return file_proto_condition_proto_rawDescGZIP(), []int{3}
}

func (x *VersionCondition) GetTypeField() ConditionType {
	if x != nil {
		return x.TypeField
	}
	return ConditionType_CONDITION_TYPE_UNSPECIFIED
}

func (x *VersionCondition) GetOperator() ColumnOperator {
	if x != nil {
		return x.Operator
	}
	return ColumnOperator_COLUMN_OPERATOR_UNSPECIFIED
}

func (x *VersionCondition) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// DateCondition represents a created-at or last-sync date condition
type DateCondition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TypeField     ConditionType          `protobuf:"varint,1,opt,name=type_field,json=typeField,proto3,enum=condition.ConditionType" json:"type_field,omitempty"`
	Operator      DateOperator           `protobuf:"varint,2,opt,name=operator,proto3,enum=condition.DateOperator" json:"operator,omitempty"`
	Value         string                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`                                                    // Date in ISO-8601 format
	DateField     DateField              `protobuf:"varint,4,opt,name=date_field,json=dateField,proto3,enum=condition.DateField" json:"date_field,omitempty"` // CreatedAt or UpdatedAt
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DateCondition) Reset() {
	*x = DateCondition{}
	mi := &file_proto_condition_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DateCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateCondition) ProtoMessage() {}

func (x *DateCondition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_condition_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateCondition.ProtoReflect.Descriptor instead.
func (*DateCondition) Descriptor() ([]byte, []int) {
	return file_proto_condition_proto_rawDescGZIP(), []int{4}
}

func (x *DateCondition) GetTypeField() ConditionType {
	if x != nil {
		return x.TypeField
	}
	return ConditionType_CONDITION_TYPE_UNSPECIFIED
}

func (x *DateCondition) GetOperator() DateOperator {
	if x != nil {
		return x.Operator
	}
	return DateOperator_DATE_OPERATOR_UNSPECIFIED
}

func (x *DateCondition) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *DateCondition) GetDateField() DateField {
	if x != nil {
		return x.DateField
	}
	return DateField_DATE_FIELD_UNSPECIFIED
}

// MetadataNullCondition represents a metadata null check condition
type MetadataNullCondition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TypeField     ConditionType          `protobuf:"varint,1,opt,name=type_field,json=typeField,proto3,enum=condition.ConditionType" json:"type_field,omitempty"`
	Key           string                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Operator      MetadataOperator       `protobuf:"varint,3,opt,name=operator,proto3,enum=condition.MetadataOperator" json:"operator,omitempty"` // Must be METADATA_OPERATOR_NULL
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetadataNullCondition) Reset() {
	*x = MetadataNullCondition{}
	mi := &file_proto_condition_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataNullCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataNullCondition) ProtoMessage() {}

func (x *MetadataNullCondition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_condition_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataNullCondition.ProtoReflect.Descriptor instead.
func (*MetadataNullCondition) Descriptor() ([]byte, []int) {
	return file_proto_condition_proto_rawDescGZIP(), []int{5}
}

func (x *MetadataNullCondition) GetTypeField() ConditionType {
	if x != nil {
		return x.TypeField
	}
	return ConditionType_CONDITION_TYPE_UNSPECIFIED
}

func (x *MetadataNullCondition) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *MetadataNullCondition) GetOperator() MetadataOperator {
	if x != nil {
		return x.Operator
	}
	return MetadataOperator_METADATA_OPERATOR_UNSPECIFIED
}

// MetadataValueCondition represents a metadata value matching condition
type MetadataValueCondition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TypeField     ConditionType          `protobuf:"varint,1,opt,name=type_field,json=typeField,proto3,enum=condition.ConditionType" json:"type_field,omitempty"`
	Key           string                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Operator      MetadataOperator       `protobuf:"varint,3,opt,name=operator,proto3,enum=condition.MetadataOperator" json:"operator,omitempty"` // Cannot be METADATA_OPERATOR_NULL
	Value         string                 `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetadataValueCondition) Reset() {
	*x = MetadataValueCondition{}
	mi := &file_proto_condition_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataValueCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataValueCondition) ProtoMessage() {}

func (x *MetadataValueCondition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_condition_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataValueCondition.ProtoReflect.Descriptor instead.
func (*MetadataValueCondition) Descriptor() ([]byte, []int) {
	return file_proto_condition_proto_rawDescGZIP(), []int{6}
}

func (x *MetadataValueCondition) GetTypeField() ConditionType {
	if x != nil {
		return x.TypeField
	}
	return ConditionType_CONDITION_TYPE_UNSPECIFIED
}

func (x *MetadataValueCondition) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *MetadataValueCondition) GetOperator() MetadataOperator {
	if x != nil {
		return x.Operator
	}
	return MetadataOperator_METADATA_OPERATOR_UNSPECIFIED
}

func (x *MetadataValueCondition) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// ComparisonCondition represents a logical combination of conditions
type ComparisonCondition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TypeField     ConditionType          `protobuf:"varint,1,opt,name=type_field,json=typeField,proto3,enum=condition.ConditionType" json:"type_field,omitempty"`
	Operator      ComparisonOperator     `protobuf:"varint,2,opt,name=operator,proto3,enum=condition.ComparisonOperator" json:"operator,omitempty"`
	Conditions    []*Condition           `protobuf:"bytes,3,rep,name=conditions,proto3" json:"conditions,omitempty"`
	Depth         int32                  `protobuf:"varint,4,opt,name=depth,proto3" json:"depth,omitempty"` // For tracking nesting depth (max 2)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComparisonCondition) Reset() {
	*x = ComparisonCondition{}
	mi := &file_proto_condition_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComparisonCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComparisonCondition) ProtoMessage() {}

func (x *ComparisonCondition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_condition_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComparisonCondition.ProtoReflect.Descriptor instead.
func (*ComparisonCondition) Descriptor() ([]byte, []int) {
	return file_proto_condition_proto_rawDescGZIP(), []int{7}
}

func (x *ComparisonCondition) GetTypeField() ConditionType {
	if x != nil {
		return x.TypeField
	}
	return ConditionType_CONDITION_TYPE_UNSPECIFIED
}

func (x *ComparisonCondition) GetOperator() ComparisonOperator {
	if x != nil {
		return x.Operator
	}
	return ComparisonOperator_COMPARISON_OPERATOR_UNSPECIFIED
}

func (x *ComparisonCondition) GetConditions() []*Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *ComparisonCondition) GetDepth() int32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

// Condition is the main message that can represent any condition type
type Condition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ConditionType:
	//
	//	*Condition_IdCondition
	//	*Condition_NameCondition
	//	*Condition_SystemCondition
	//	*Condition_VersionCondition
	//	*Condition_DateCondition
	//	*Condition_MetadataNullCondition
	//	*Condition_MetadataValueCondition
	//	*Condition_ComparisonCondition
	ConditionType isCondition_ConditionType `protobuf_oneof:"condition_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Condition) Reset() {
	*x = Condition{}
	mi := &file_proto_condition_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_condition_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_proto_condition_proto_rawDescGZIP(), []int{8}
}

func (x *Condition) GetConditionType() isCondition_ConditionType {
	if x != nil {
		return x.ConditionType
	}
	return nil
}

func (x *Condition) GetIdCondition() *IDCondition {
	if x != nil {
		if x, ok := x.ConditionType.(*Condition_IdCondition); ok {
			return x.IdCondition
		}
	}
	return nil
}

func (x *Condition) GetNameCondition() *NameCondition {
	if x != nil {
		if x, ok := x.ConditionType.(*Condition_NameCondition); ok {
			return x.NameCondition
		}
	}
	return nil
}

func (x *Condition) GetSystemCondition() *SystemCondition {
	if x != nil {
		if x, ok := x.ConditionType.(*Condition_SystemCondition); ok {
			return x.SystemCondition
		}
	}
	return nil
}

func (x *Condition) GetVersionCondition() *VersionCondition {
	if x != nil {
		if x, ok := x.ConditionType.(*Condition_VersionCondition); ok {
			return x.VersionCondition
		}
	}
	return nil
}

func (x *Condition) GetDateCondition() *DateCondition {
	if x != nil {
		if x, ok := x.ConditionType.(*Condition_DateCondition); ok {
			return x.DateCondition
		}
	}
	return nil
}

func (x *Condition) GetMetadataNullCondition() *MetadataNullCondition {
	if x != nil {
		if x, ok := x.ConditionType.(*Condition_MetadataNullCondition); ok {
			return x.MetadataNullCondition
		}
	}
	return nil
}

func (x *Condition) GetMetadataValueCondition() *MetadataValueCondition {
	if x != nil {
		if x, ok := x.ConditionType.(*Condition_MetadataValueCondition); ok {
			return x.MetadataValueCondition
		}
	}
	return nil
}

func (x *Condition) GetComparisonCondition() *ComparisonCondition {
	if x != nil {
		if x, ok := x.ConditionType.(*Condition_ComparisonCondition); ok {
			return x.ComparisonCondition
		}
	}
	return nil
}

type isCondition_ConditionType interface {
	isCondition_ConditionType()
}

type Condition_IdCondition struct {
	IdCondition *IDCondition `protobuf:"bytes,1,opt,name=id_condition,json=idCondition,proto3,oneof"`
}

type Condition_NameCondition struct {
	NameCondition *NameCondition `protobuf:"bytes,2,opt,name=name_condition,json=nameCondition,proto3,oneof"`
}

type Condition_SystemCondition struct {
	SystemCondition *SystemCondition `protobuf:"bytes,3,opt,name=system_condition,json=systemCondition,proto3,oneof"`
}

type Condition_VersionCondition struct {
	VersionCondition *VersionCondition `protobuf:"bytes,4,opt,name=version_condition,json=versionCondition,proto3,oneof"`
}

type Condition_DateCondition struct {
	DateCondition *DateCondition `protobuf:"bytes,5,opt,name=date_condition,json=dateCondition,proto3,oneof"`
}

type Condition_MetadataNullCondition struct {
	MetadataNullCondition *MetadataNullCondition `protobuf:"bytes,6,opt,name=metadata_null_condition,json=metadataNullCondition,proto3,oneof"`
}

type Condition_MetadataValueCondition struct {
	MetadataValueCondition *MetadataValueCondition `protobuf:"bytes,7,opt,name=metadata_value_condition,json=metadataValueCondition,proto3,oneof"`
}

type Condition_ComparisonCondition struct {
	ComparisonCondition *ComparisonCondition `protobuf:"bytes,8,opt,name=comparison_condition,json=comparisonCondition,proto3,oneof"`
}

func (*Condition_IdCondition) isCondition_ConditionType() {}

func (*Condition_NameCondition) isCondition_ConditionType() {}

func (*Condition_SystemCondition) isCondition_ConditionType() {}

func (*Condition_VersionCondition) isCondition_ConditionType() {}

func (*Condition_DateCondition) isCondition_ConditionType() {}

func (*Condition_MetadataNullCondition) isCondition_ConditionType() {}

func (*Condition_MetadataValueCondition) isCondition_ConditionType() {}

func (*Condition_ComparisonCondition) isCondition_ConditionType() {}

// Conditions represents a collection of conditions
type Conditions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Conditions    []*Condition           `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Conditions) Reset() {
	*x = Conditions{}
	mi := &file_proto_condition_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Conditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conditions) ProtoMessage() {}

func (x *Conditions) ProtoReflect() protoreflect.Message {
	mi := &file_proto_condition_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conditions.ProtoReflect.Descriptor instead.
func (*Conditions) Descriptor() ([]byte, []int) {
	return file_proto_condition_proto_rawDescGZIP(), []int{9}
}

func (x *Conditions) GetConditions() []*Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

var File_proto_condition_proto protoreflect.FileDescriptor

const file_proto_condition_proto_rawDesc = "" +
	"\n" +
	"\x15proto/condition.proto\x12\tcondition\"x\n" +
	"\vIDCondition\x127\n" +
	"\n" +
	"type_field\x18\x01 \x01(\x0e2\x18.condition.ConditionTypeR\ttypeField\x12\x1a\n" +
	"\boperator\x18\x02 \x01(\tR\boperator\x12\x14\n" +
	"\x05value\x18\x03 \x01(\tR\x05value\"\x95\x01\n" +
	"\rNameCondition\x127\n" +
	"\n" +
	"type_field\x18\x01 \x01(\x0e2\x18.condition.ConditionTypeR\ttypeField\x125\n" +
	"\boperator\x18\x02 \x01(\x0e2\x19.condition.ColumnOperatorR\boperator\x12\x14\n" +
	"\x05value\x18\x03 \x01(\tR\x05value\"|\n" +
	"\x0fSystemCondition\x127\n" +
	"\n" +
	"type_field\x18\x01 \x01(\x0e2\x18.condition.ConditionTypeR\ttypeField\x12\x1a\n" +
	"\boperator\x18\x02 \x01(\tR\boperator\x12\x14\n" +
	"\x05value\x18\x03 \x01(\tR\x05value\"\x98\x01\n" +
	"\x10VersionCondition\x127\n" +
	"\n" +
	"type_field\x18\x01 \x01(\x0e2\x18.condition.ConditionTypeR\ttypeField\x125\n" +
	"\boperator\x18\x02 \x01(\x0e2\x19.condition.ColumnOperatorR\boperator\x12\x14\n" +
	"\x05value\x18\x03 \x01(\tR\x05value\"\xc8\x01\n" +
	"\rDateCondition\x127\n" +
	"\n" +
	"type_field\x18\x01 \x01(\x0e2\x18.condition.ConditionTypeR\ttypeField\x123\n" +
	"\boperator\x18\x02 \x01(\x0e2\x17.condition.DateOperatorR\boperator\x12\x14\n" +
	"\x05value\x18\x03 \x01(\tR\x05value\x123\n" +
	"\n" +
	"date_field\x18\x04 \x01(\x0e2\x14.condition.DateFieldR\tdateField\"\x9b\x01\n" +
	"\x15MetadataNullCondition\x127\n" +
	"\n" +
	"type_field\x18\x01 \x01(\x0e2\x18.condition.ConditionTypeR\ttypeField\x12\x10\n" +
	"\x03key\x18\x02 \x01(\tR\x03key\x127\n" +
	"\boperator\x18\x03 \x01(\x0e2\x1b.condition.MetadataOperatorR\boperator\"\xb2\x01\n" +
	"\x16MetadataValueCondition\x127\n" +
	"\n" +
	"type_field\x18\x01 \x01(\x0e2\x18.condition.ConditionTypeR\ttypeField\x12\x10\n" +
	"\x03key\x18\x02 \x01(\tR\x03key\x127\n" +
	"\boperator\x18\x03 \x01(\x0e2\x1b.condition.MetadataOperatorR\boperator\x12\x14\n" +
	"\x05value\x18\x04 \x01(\tR\x05value\"\xd5\x01\n" +
	"\x13ComparisonCondition\x127\n" +
	"\n" +
	"type_field\x18\x01 \x01(\x0e2\x18.condition.ConditionTypeR\ttypeField\x129\n" +
	"\boperator\x18\x02 \x01(\x0e2\x1d.condition.ComparisonOperatorR\boperator\x124\n" +
	"\n" +
	"conditions\x18\x03 \x03(\v2\x14.condition.ConditionR\n" +
	"conditions\x12\x14\n" +
	"\x05depth\x18\x04 \x01(\x05R\x05depth\"\x85\x05\n" +
	"\tCondition\x12;\n" +
	"\fid_condition\x18\x01 \x01(\v2\x16.condition.IDConditionH\x00R\vidCondition\x12A\n" +
	"\x0ename_condition\x18\x02 \x01(\v2\x18.condition.NameConditionH\x00R\rnameCondition\x12G\n" +
	"\x10system_condition\x18\x03 \x01(\v2\x1a.condition.SystemConditionH\x00R\x0fsystemCondition\x12J\n" +
	"\x11version_condition\x18\x04 \x01(\v2\x1b.condition.VersionConditionH\x00R\x10versionCondition\x12A\n" +
	"\x0edate_condition\x18\x05 \x01(\v2\x18.condition.DateConditionH\x00R\rdateCondition\x12Z\n" +
	"\x17metadata_null_condition\x18\x06 \x01(\v2 .condition.MetadataNullConditionH\x00R\x15metadataNullCondition\x12]\n" +
	"\x18metadata_value_condition\x18\a \x01(\v2!.condition.MetadataValueConditionH\x00R\x16metadataValueCondition\x12S\n" +
	"\x14comparison_condition\x18\b \x01(\v2\x1e.condition.ComparisonConditionH\x00R\x13comparisonConditionB\x10\n" +
	"\x0econdition_type\"B\n" +
	"\n" +
	"Conditions\x124\n" +
	"\n" +
	"conditions\x18\x01 \x03(\v2\x14.condition.ConditionR\n" +
	"conditions*\x90\x02\n" +
	"\rConditionType\x12\x1e\n" +
	"\x1aCONDITION_TYPE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17CONDITION_TYPE_METADATA\x10\x01\x12\x1d\n" +
	"\x19CONDITION_TYPE_CREATED_AT\x10\x02\x12\x1d\n" +
	"\x19CONDITION_TYPE_UPDATED_AT\x10\x03\x12\x1d\n" +
	"\x19CONDITION_TYPE_COMPARISON\x10\x04\x12\x1a\n" +
	"\x16CONDITION_TYPE_VERSION\x10\x05\x12\x15\n" +
	"\x11CONDITION_TYPE_ID\x10\x06\x12\x17\n" +
	"\x13CONDITION_TYPE_NAME\x10\a\x12\x19\n" +
	"\x15CONDITION_TYPE_SYSTEM\x10\b*\xab\x01\n" +
	"\x0eColumnOperator\x12\x1f\n" +
	"\x1bCOLUMN_OPERATOR_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16COLUMN_OPERATOR_EQUALS\x10\x01\x12\x1f\n" +
	"\x1bCOLUMN_OPERATOR_STARTS_WITH\x10\x02\x12\x1d\n" +
	"\x19COLUMN_OPERATOR_ENDS_WITH\x10\x03\x12\x1c\n" +
	"\x18COLUMN_OPERATOR_CONTAINS\x10\x04*\x9f\x01\n" +
	"\fDateOperator\x12\x1d\n" +
	"\x19DATE_OPERATOR_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14DATE_OPERATOR_BEFORE\x10\x01\x12\x17\n" +
	"\x13DATE_OPERATOR_AFTER\x10\x02\x12\x1e\n" +
	"\x1aDATE_OPERATOR_BEFORE_OR_ON\x10\x03\x12\x1d\n" +
	"\x19DATE_OPERATOR_AFTER_OR_ON\x10\x04*]\n" +
	"\tDateField\x12\x1a\n" +
	"\x16DATE_FIELD_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15DATE_FIELD_CREATED_AT\x10\x01\x12\x19\n" +
	"\x15DATE_FIELD_UPDATED_AT\x10\x02*\xd3\x01\n" +
	"\x10MetadataOperator\x12!\n" +
	"\x1dMETADATA_OPERATOR_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x18METADATA_OPERATOR_EQUALS\x10\x01\x12\x1a\n" +
	"\x16METADATA_OPERATOR_NULL\x10\x02\x12!\n" +
	"\x1dMETADATA_OPERATOR_STARTS_WITH\x10\x03\x12\x1f\n" +
	"\x1bMETADATA_OPERATOR_ENDS_WITH\x10\x04\x12\x1e\n" +
	"\x1aMETADATA_OPERATOR_CONTAINS\x10\x05*r\n" +
	"\x12ComparisonOperator\x12#\n" +
	"\x1fCOMPARISON_OPERATOR_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17COMPARISON_OPERATOR_AND\x10\x01\x12\x1a\n" +
	"\x16COMPARISON_OPERATOR_OR\x10\x02B0Z.github.com/ctrlplanedev/selector-engine/pkg/pbb\x06proto3"

var (
	file_proto_condition_proto_rawDescOnce sync.Once
	file_proto_condition_proto_rawDescData []byte
)

func file_proto_condition_proto_rawDescGZIP() []byte {
	file_proto_condition_proto_rawDescOnce.Do(func() {
		file_proto_condition_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_condition_proto_rawDesc), len(file_proto_condition_proto_rawDesc)))
	})
	return file_proto_condition_proto_rawDescData
}

var file_proto_condition_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_proto_condition_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_proto_condition_proto_goTypes = []any{
	(ConditionType)(0),             // 0: condition.ConditionType
	(ColumnOperator)(0),            // 1: condition.ColumnOperator
	(DateOperator)(0),              // 2: condition.DateOperator
	(DateField)(0),                 // 3: condition.DateField
	(MetadataOperator)(0),          // 4: condition.MetadataOperator
	(ComparisonOperator)(0),        // 5: condition.ComparisonOperator
	(*IDCondition)(nil),            // 6: condition.IDCondition
	(*NameCondition)(nil),          // 7: condition.NameCondition
	(*SystemCondition)(nil),        // 8: condition.SystemCondition
	(*VersionCondition)(nil),       // 9: condition.VersionCondition
	(*DateCondition)(nil),          // 10: condition.DateCondition
	(*MetadataNullCondition)(nil),  // 11: condition.MetadataNullCondition
	(*MetadataValueCondition)(nil), // 12: condition.MetadataValueCondition
	(*ComparisonCondition)(nil),    // 13: condition.ComparisonCondition
	(*Condition)(nil),              // 14: condition.Condition
	(*Conditions)(nil),             // 15: condition.Conditions
}
var file_proto_condition_proto_depIdxs = []int32{
	0,  // 0: condition.IDCondition.type_field:type_name -> condition.ConditionType
	0,  // 1: condition.NameCondition.type_field:type_name -> condition.ConditionType
	1,  // 2: condition.NameCondition.operator:type_name -> condition.ColumnOperator
	0,  // 3: condition.SystemCondition.type_field:type_name -> condition.ConditionType
	0,  // 4: condition.VersionCondition.type_field:type_name -> condition.ConditionType
	1,  // 5: condition.VersionCondition.operator:type_name -> condition.ColumnOperator
	0,  // 6: condition.DateCondition.type_field:type_name -> condition.ConditionType
	2,  // 7: condition.DateCondition.operator:type_name -> condition.DateOperator
	3,  // 8: condition.DateCondition.date_field:type_name -> condition.DateField
	0,  // 9: condition.MetadataNullCondition.type_field:type_name -> condition.ConditionType
	4,  // 10: condition.MetadataNullCondition.operator:type_name -> condition.MetadataOperator
	0,  // 11: condition.MetadataValueCondition.type_field:type_name -> condition.ConditionType
	4,  // 12: condition.MetadataValueCondition.operator:type_name -> condition.MetadataOperator
	0,  // 13: condition.ComparisonCondition.type_field:type_name -> condition.ConditionType
	5,  // 14: condition.ComparisonCondition.operator:type_name -> condition.ComparisonOperator
	14, // 15: condition.ComparisonCondition.conditions:type_name -> condition.Condition
	6,  // 16: condition.Condition.id_condition:type_name -> condition.IDCondition
	7,  // 17: condition.Condition.name_condition:type_name -> condition.NameCondition
	8,  // 18: condition.Condition.system_condition:type_name -> condition.SystemCondition
	9,  // 19: condition.Condition.version_condition:type_name -> condition.VersionCondition
	10, // 20: condition.Condition.date_condition:type_name -> condition.DateCondition
	11, // 21: condition.Condition.metadata_null_condition:type_name -> condition.MetadataNullCondition
	12, // 22: condition.Condition.metadata_value_condition:type_name -> condition.MetadataValueCondition
	13, // 23: condition.Condition.comparison_condition:type_name -> condition.ComparisonCondition
	14, // 24: condition.Conditions.conditions:type_name -> condition.Condition
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_proto_condition_proto_init() }
func file_proto_condition_proto_init() {
	if File_proto_condition_proto != nil {
		return
	}
	file_proto_condition_proto_msgTypes[8].OneofWrappers = []any{
		(*Condition_IdCondition)(nil),
		(*Condition_NameCondition)(nil),
		(*Condition_SystemCondition)(nil),
		(*Condition_VersionCondition)(nil),
		(*Condition_DateCondition)(nil),
		(*Condition_MetadataNullCondition)(nil),
		(*Condition_MetadataValueCondition)(nil),
		(*Condition_ComparisonCondition)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_condition_proto_rawDesc), len(file_proto_condition_proto_rawDesc)),
			NumEnums:      6,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_condition_proto_goTypes,
		DependencyIndexes: file_proto_condition_proto_depIdxs,
		EnumInfos:         file_proto_condition_proto_enumTypes,
		MessageInfos:      file_proto_condition_proto_msgTypes,
	}.Build()
	File_proto_condition_proto = out.File
	file_proto_condition_proto_goTypes = nil
	file_proto_condition_proto_depIdxs = nil
}
