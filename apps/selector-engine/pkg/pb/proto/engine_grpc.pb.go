// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/engine.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SelectorEngine_LoadResources_FullMethodName   = "/engine.SelectorEngine/LoadResources"
	SelectorEngine_RemoveResources_FullMethodName = "/engine.SelectorEngine/RemoveResources"
	SelectorEngine_LoadSelectors_FullMethodName   = "/engine.SelectorEngine/LoadSelectors"
	SelectorEngine_RemoveSelectors_FullMethodName = "/engine.SelectorEngine/RemoveSelectors"
)

// SelectorEngineClient is the client API for SelectorEngine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SelectorEngineClient interface {
	LoadResources(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Resource, Match], error)
	RemoveResources(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ResourceRef, Status], error)
	LoadSelectors(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ResourceSelector, Match], error)
	RemoveSelectors(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ResourceSelectorRef, Status], error)
}

type selectorEngineClient struct {
	cc grpc.ClientConnInterface
}

func NewSelectorEngineClient(cc grpc.ClientConnInterface) SelectorEngineClient {
	return &selectorEngineClient{cc}
}

func (c *selectorEngineClient) LoadResources(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Resource, Match], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SelectorEngine_ServiceDesc.Streams[0], SelectorEngine_LoadResources_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Resource, Match]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SelectorEngine_LoadResourcesClient = grpc.BidiStreamingClient[Resource, Match]

func (c *selectorEngineClient) RemoveResources(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ResourceRef, Status], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SelectorEngine_ServiceDesc.Streams[1], SelectorEngine_RemoveResources_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ResourceRef, Status]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SelectorEngine_RemoveResourcesClient = grpc.BidiStreamingClient[ResourceRef, Status]

func (c *selectorEngineClient) LoadSelectors(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ResourceSelector, Match], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SelectorEngine_ServiceDesc.Streams[2], SelectorEngine_LoadSelectors_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ResourceSelector, Match]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SelectorEngine_LoadSelectorsClient = grpc.BidiStreamingClient[ResourceSelector, Match]

func (c *selectorEngineClient) RemoveSelectors(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ResourceSelectorRef, Status], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SelectorEngine_ServiceDesc.Streams[3], SelectorEngine_RemoveSelectors_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ResourceSelectorRef, Status]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SelectorEngine_RemoveSelectorsClient = grpc.BidiStreamingClient[ResourceSelectorRef, Status]

// SelectorEngineServer is the server API for SelectorEngine service.
// All implementations must embed UnimplementedSelectorEngineServer
// for forward compatibility.
type SelectorEngineServer interface {
	LoadResources(grpc.BidiStreamingServer[Resource, Match]) error
	RemoveResources(grpc.BidiStreamingServer[ResourceRef, Status]) error
	LoadSelectors(grpc.BidiStreamingServer[ResourceSelector, Match]) error
	RemoveSelectors(grpc.BidiStreamingServer[ResourceSelectorRef, Status]) error
	mustEmbedUnimplementedSelectorEngineServer()
}

// UnimplementedSelectorEngineServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSelectorEngineServer struct{}

func (UnimplementedSelectorEngineServer) LoadResources(grpc.BidiStreamingServer[Resource, Match]) error {
	return status.Errorf(codes.Unimplemented, "method LoadResources not implemented")
}
func (UnimplementedSelectorEngineServer) RemoveResources(grpc.BidiStreamingServer[ResourceRef, Status]) error {
	return status.Errorf(codes.Unimplemented, "method RemoveResources not implemented")
}
func (UnimplementedSelectorEngineServer) LoadSelectors(grpc.BidiStreamingServer[ResourceSelector, Match]) error {
	return status.Errorf(codes.Unimplemented, "method LoadSelectors not implemented")
}
func (UnimplementedSelectorEngineServer) RemoveSelectors(grpc.BidiStreamingServer[ResourceSelectorRef, Status]) error {
	return status.Errorf(codes.Unimplemented, "method RemoveSelectors not implemented")
}
func (UnimplementedSelectorEngineServer) mustEmbedUnimplementedSelectorEngineServer() {}
func (UnimplementedSelectorEngineServer) testEmbeddedByValue()                        {}

// UnsafeSelectorEngineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SelectorEngineServer will
// result in compilation errors.
type UnsafeSelectorEngineServer interface {
	mustEmbedUnimplementedSelectorEngineServer()
}

func RegisterSelectorEngineServer(s grpc.ServiceRegistrar, srv SelectorEngineServer) {
	// If the following call pancis, it indicates UnimplementedSelectorEngineServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SelectorEngine_ServiceDesc, srv)
}

func _SelectorEngine_LoadResources_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SelectorEngineServer).LoadResources(&grpc.GenericServerStream[Resource, Match]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SelectorEngine_LoadResourcesServer = grpc.BidiStreamingServer[Resource, Match]

func _SelectorEngine_RemoveResources_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SelectorEngineServer).RemoveResources(&grpc.GenericServerStream[ResourceRef, Status]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SelectorEngine_RemoveResourcesServer = grpc.BidiStreamingServer[ResourceRef, Status]

func _SelectorEngine_LoadSelectors_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SelectorEngineServer).LoadSelectors(&grpc.GenericServerStream[ResourceSelector, Match]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SelectorEngine_LoadSelectorsServer = grpc.BidiStreamingServer[ResourceSelector, Match]

func _SelectorEngine_RemoveSelectors_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SelectorEngineServer).RemoveSelectors(&grpc.GenericServerStream[ResourceSelectorRef, Status]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SelectorEngine_RemoveSelectorsServer = grpc.BidiStreamingServer[ResourceSelectorRef, Status]

// SelectorEngine_ServiceDesc is the grpc.ServiceDesc for SelectorEngine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SelectorEngine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "engine.SelectorEngine",
	HandlerType: (*SelectorEngineServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LoadResources",
			Handler:       _SelectorEngine_LoadResources_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RemoveResources",
			Handler:       _SelectorEngine_RemoveResources_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "LoadSelectors",
			Handler:       _SelectorEngine_LoadSelectors_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RemoveSelectors",
			Handler:       _SelectorEngine_RemoveSelectors_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/engine.proto",
}
