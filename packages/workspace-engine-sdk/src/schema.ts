/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = Record<string, never>;
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {string} */
        ApprovalStatus: "approved" | "rejected";
        /** @enum {string} */
        JobStatus: "cancelled" | "skipped" | "inProgress" | "actionRequired" | "pending" | "failure" | "invalidJobAgent" | "invalidIntegration" | "externalRunNotFound" | "successful";
        /** @enum {string} */
        DeploymentVersionStatus: "unspecified" | "building" | "ready" | "failed" | "rejected";
        Selector: {
            json: {
                [key: string]: unknown;
            };
        };
        PropertyMatcher: {
            fromProperty: string[];
            toProperty: string[];
            operator?: string;
        };
        Policy: {
            id: string;
            name: string;
            description?: string;
            createdAt: string;
            workspaceId: string;
            selectors: components["schemas"]["PolicyTargetSelector"][];
            rules: components["schemas"]["PolicyRule"][];
        };
        PolicyTargetSelector: {
            id: string;
            deploymentSelector?: components["schemas"]["Selector"];
            environmentSelector?: components["schemas"]["Selector"];
            resourceSelector?: components["schemas"]["Selector"];
        };
        PolicyRule: {
            id: string;
            policyId: string;
            createdAt: string;
            anyApproval?: components["schemas"]["AnyApprovalRule"];
        };
        UserApprovalRecord: {
            userId: string;
            versionId: string;
            status: components["schemas"]["ApprovalStatus"];
            reason?: string;
            createdAt: string;
        };
        AnyApprovalRule: {
            /** Format: int32 */
            minApprovals: number;
        };
        Resource: {
            id: string;
            name: string;
            version: string;
            kind: string;
            identifier: string;
            createdAt: string;
            workspaceId: string;
            providerId?: string;
            config: {
                [key: string]: unknown;
            };
            lockedAt?: string;
            updatedAt?: string;
            deletedAt?: string;
            metadata: {
                [key: string]: string;
            };
        };
        ResourceVariable: {
            resourceId: string;
            key: string;
            value: components["schemas"]["Value"];
        };
        Environment: {
            id: string;
            name: string;
            description?: string;
            systemId: string;
            resourceSelector: components["schemas"]["Selector"];
            createdAt: string;
        };
        Deployment: {
            id: string;
            name: string;
            slug: string;
            description?: string;
            systemId: string;
            jobAgentId?: string;
            jobAgentConfig: {
                [key: string]: unknown;
            };
            resourceSelector?: components["schemas"]["Selector"];
        };
        JobAgent: {
            id: string;
            workspaceId: string;
            name: string;
            type: string;
            config: {
                [key: string]: unknown;
            };
        };
        Job: {
            id: string;
            releaseId: string;
            jobAgentId: string;
            jobAgentConfig: {
                [key: string]: unknown;
            };
            externalId?: string;
            status: components["schemas"]["JobStatus"];
            resourceId: string;
            environmentId: string;
            deploymentId: string;
            createdAt: string;
            updatedAt: string;
            startedAt?: string;
            completedAt?: string;
        };
        ReleaseTarget: {
            resourceId: string;
            environmentId: string;
            deploymentId: string;
        };
        LiteralValue: {
            string: string;
        } | {
            bool: boolean;
        } | {
            number: number;
        } | {
            int: number;
        } | {
            object: {
                [key: string]: unknown;
            };
        } | {
            /** @enum {boolean} */
            null: true;
        };
        SensitiveValue: {
            valueHash: string;
        };
        ReferenceValue: {
            reference: string;
            path: string[];
        };
        Value: components["schemas"]["LiteralValue"] | components["schemas"]["ReferenceValue"] | components["schemas"]["SensitiveValue"];
        Release: {
            version: components["schemas"]["DeploymentVersion"];
            variables: {
                [key: string]: components["schemas"]["LiteralValue"];
            };
            encryptedVariables: string[];
            releaseTarget: components["schemas"]["ReleaseTarget"];
            createdAt: string;
        };
        DeploymentVariable: {
            id: string;
            key: string;
            variableId: string;
            description?: string;
            deploymentId: string;
            defaultValue: components["schemas"]["LiteralValue"];
        };
        DeploymentVariableValue: {
            id: string;
            deploymentVariableId: string;
            /** Format: int64 */
            priority: number;
            resourceSelector?: components["schemas"]["Selector"];
            value: components["schemas"]["Value"];
        };
        DeploymentVersion: {
            id: string;
            name: string;
            tag: string;
            config: {
                [key: string]: unknown;
            };
            jobAgentConfig: {
                [key: string]: unknown;
            };
            deploymentId: string;
            status: components["schemas"]["DeploymentVersionStatus"];
            message?: string;
            createdAt: string;
        };
        System: {
            id: string;
            workspaceId: string;
            name: string;
            description?: string;
        };
        RelationshipRule: {
            id: string;
            name: string;
            description?: string;
            reference: string;
            fromType: string;
            fromSelector: components["schemas"]["Selector"];
            toType: string;
            toSelector: components["schemas"]["Selector"];
            propertyMatchers: components["schemas"]["PropertyMatcher"][];
            relationshipType: string;
            metadata: {
                [key: string]: string;
            };
        };
        ComputeReleaseTargetsRequest: {
            environments: components["schemas"]["Environment"][];
            deployments: components["schemas"]["Deployment"][];
            resources: components["schemas"]["Resource"][];
        };
        ComputeReleaseTargetsResponse: {
            releaseTargets: components["schemas"]["ReleaseTarget"][];
        };
        ListReleaseTargetsRequest: {
            workspaceId: string;
            resourceSelector?: components["schemas"]["Selector"];
            deploymentSelector?: components["schemas"]["Selector"];
            environmentSelector?: components["schemas"]["Selector"];
        };
        ListReleaseTargetsResponse: {
            releaseTargets: components["schemas"]["ReleaseTarget"][];
        };
        ListDeploymentsRequest: {
            workspaceId: string;
            deploymentSelector?: components["schemas"]["Selector"];
        };
        ListDeploymentsResponse: {
            deployments: components["schemas"]["Deployment"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
