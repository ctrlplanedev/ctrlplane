// @generated by protoc-gen-es v2.9.0
// @generated from file workspace.proto (package workspace, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { JsonObject, Message } from "@bufbuild/protobuf";
import type { NullValue } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file workspace.proto.
 */
export declare const file_workspace: GenFile;

/**
 * @generated from message workspace.Policy
 */
export declare type Policy = Message<"workspace.Policy"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: optional string description = 3;
   */
  description?: string;

  /**
   * @generated from field: string created_at = 4;
   */
  createdAt: string;

  /**
   * @generated from field: string workspace_id = 5;
   */
  workspaceId: string;

  /**
   * @generated from field: repeated workspace.PolicyTargetSelector selectors = 6;
   */
  selectors: PolicyTargetSelector[];

  /**
   * @generated from field: repeated workspace.PolicyRule rules = 7;
   */
  rules: PolicyRule[];
};

/**
 * Describes the message workspace.Policy.
 * Use `create(PolicySchema)` to create a new message.
 */
export declare const PolicySchema: GenMessage<Policy>;

/**
 * @generated from message workspace.PolicyTargetSelector
 */
export declare type PolicyTargetSelector = Message<"workspace.PolicyTargetSelector"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: optional workspace.Selector deployment_selector = 3;
   */
  deploymentSelector?: Selector;

  /**
   * @generated from field: optional workspace.Selector environment_selector = 4;
   */
  environmentSelector?: Selector;

  /**
   * @generated from field: optional workspace.Selector resource_selector = 5;
   */
  resourceSelector?: Selector;
};

/**
 * Describes the message workspace.PolicyTargetSelector.
 * Use `create(PolicyTargetSelectorSchema)` to create a new message.
 */
export declare const PolicyTargetSelectorSchema: GenMessage<PolicyTargetSelector>;

/**
 * @generated from message workspace.PolicyRule
 */
export declare type PolicyRule = Message<"workspace.PolicyRule"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string policy_id = 2;
   */
  policyId: string;

  /**
   * @generated from field: string created_at = 3;
   */
  createdAt: string;

  /**
   * @generated from oneof workspace.PolicyRule.rule
   */
  rule: {
    /**
     * @generated from field: workspace.AnyApprovalRule any_approval = 4;
     */
    value: AnyApprovalRule;
    case: "anyApproval";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message workspace.PolicyRule.
 * Use `create(PolicyRuleSchema)` to create a new message.
 */
export declare const PolicyRuleSchema: GenMessage<PolicyRule>;

/**
 * @generated from message workspace.UserApprovalRecord
 */
export declare type UserApprovalRecord = Message<"workspace.UserApprovalRecord"> & {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * @generated from field: string version_id = 2;
   */
  versionId: string;

  /**
   * @generated from field: workspace.ApprovalStatus status = 3;
   */
  status: ApprovalStatus;

  /**
   * @generated from field: optional string reason = 4;
   */
  reason?: string;

  /**
   * @generated from field: string created_at = 5;
   */
  createdAt: string;
};

/**
 * Describes the message workspace.UserApprovalRecord.
 * Use `create(UserApprovalRecordSchema)` to create a new message.
 */
export declare const UserApprovalRecordSchema: GenMessage<UserApprovalRecord>;

/**
 * Any Approval - requires a minimum number of approvals from any authorized users
 *
 * @generated from message workspace.AnyApprovalRule
 */
export declare type AnyApprovalRule = Message<"workspace.AnyApprovalRule"> & {
  /**
   * Minimum number of approvals required
   *
   * @generated from field: int32 min_approvals = 1;
   */
  minApprovals: number;
};

/**
 * Describes the message workspace.AnyApprovalRule.
 * Use `create(AnyApprovalRuleSchema)` to create a new message.
 */
export declare const AnyApprovalRuleSchema: GenMessage<AnyApprovalRule>;

/**
 * @generated from message workspace.Resource
 */
export declare type Resource = Message<"workspace.Resource"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string version = 3;
   */
  version: string;

  /**
   * @generated from field: string kind = 4;
   */
  kind: string;

  /**
   * @generated from field: string identifier = 5;
   */
  identifier: string;

  /**
   * ISO8601 string or RFC3339 timestamp
   *
   * @generated from field: string created_at = 6;
   */
  createdAt: string;

  /**
   * @generated from field: string workspace_id = 7;
   */
  workspaceId: string;

  /**
   * nullable
   *
   * @generated from field: optional string provider_id = 8;
   */
  providerId?: string;

  /**
   * config can be a deeply nested object, so we use google.protobuf.Struct
   *
   * @generated from field: google.protobuf.Struct config = 9;
   */
  config?: JsonObject;

  /**
   * nullable, ISO8601 string or RFC3339 timestamp
   *
   * @generated from field: optional string locked_at = 10;
   */
  lockedAt?: string;

  /**
   * nullable, ISO8601 string or RFC3339 timestamp
   *
   * @generated from field: optional string updated_at = 11;
   */
  updatedAt?: string;

  /**
   * nullable, ISO8601 string or RFC3339 timestamp
   *
   * @generated from field: optional string deleted_at = 12;
   */
  deletedAt?: string;

  /**
   * @generated from field: map<string, string> metadata = 13;
   */
  metadata: { [key: string]: string };

  /**
   * @generated from field: map<string, workspace.Value> variables = 14;
   */
  variables: { [key: string]: Value };
};

/**
 * Describes the message workspace.Resource.
 * Use `create(ResourceSchema)` to create a new message.
 */
export declare const ResourceSchema: GenMessage<Resource>;

/**
 * @generated from message workspace.Environment
 */
export declare type Environment = Message<"workspace.Environment"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: optional string description = 3;
   */
  description?: string;

  /**
   * @generated from field: string system_id = 4;
   */
  systemId: string;

  /**
   * @generated from field: workspace.Selector resource_selector = 5;
   */
  resourceSelector?: Selector;

  /**
   * @generated from field: string created_at = 6;
   */
  createdAt: string;
};

/**
 * Describes the message workspace.Environment.
 * Use `create(EnvironmentSchema)` to create a new message.
 */
export declare const EnvironmentSchema: GenMessage<Environment>;

/**
 * @generated from message workspace.Deployment
 */
export declare type Deployment = Message<"workspace.Deployment"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string slug = 3;
   */
  slug: string;

  /**
   * @generated from field: optional string description = 4;
   */
  description?: string;

  /**
   * @generated from field: string system_id = 5;
   */
  systemId: string;

  /**
   * @generated from field: optional string job_agent_id = 6;
   */
  jobAgentId?: string;

  /**
   * @generated from field: google.protobuf.Struct job_agent_config = 7;
   */
  jobAgentConfig?: JsonObject;

  /**
   * @generated from field: optional workspace.Selector resource_selector = 8;
   */
  resourceSelector?: Selector;
};

/**
 * Describes the message workspace.Deployment.
 * Use `create(DeploymentSchema)` to create a new message.
 */
export declare const DeploymentSchema: GenMessage<Deployment>;

/**
 * @generated from message workspace.JobAgent
 */
export declare type JobAgent = Message<"workspace.JobAgent"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string workspace_id = 2;
   */
  workspaceId: string;

  /**
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * @generated from field: string type = 4;
   */
  type: string;

  /**
   * @generated from field: google.protobuf.Struct config = 5;
   */
  config?: JsonObject;
};

/**
 * Describes the message workspace.JobAgent.
 * Use `create(JobAgentSchema)` to create a new message.
 */
export declare const JobAgentSchema: GenMessage<JobAgent>;

/**
 * @generated from message workspace.Job
 */
export declare type Job = Message<"workspace.Job"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string release_id = 2;
   */
  releaseId: string;

  /**
   * @generated from field: string job_agent_id = 3;
   */
  jobAgentId: string;

  /**
   * @generated from field: google.protobuf.Struct job_agent_config = 4;
   */
  jobAgentConfig?: JsonObject;

  /**
   * @generated from field: optional string external_id = 5;
   */
  externalId?: string;

  /**
   * @generated from field: workspace.JobStatus status = 6;
   */
  status: JobStatus;

  /**
   * @generated from field: string resource_id = 7;
   */
  resourceId: string;

  /**
   * @generated from field: string environment_id = 8;
   */
  environmentId: string;

  /**
   * @generated from field: string deployment_id = 9;
   */
  deploymentId: string;

  /**
   * @generated from field: string created_at = 10;
   */
  createdAt: string;

  /**
   * @generated from field: string updated_at = 11;
   */
  updatedAt: string;

  /**
   * @generated from field: optional string started_at = 12;
   */
  startedAt?: string;

  /**
   * @generated from field: optional string completed_at = 13;
   */
  completedAt?: string;
};

/**
 * Describes the message workspace.Job.
 * Use `create(JobSchema)` to create a new message.
 */
export declare const JobSchema: GenMessage<Job>;

/**
 * @generated from message workspace.ReleaseTarget
 */
export declare type ReleaseTarget = Message<"workspace.ReleaseTarget"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string resource_id = 2;
   */
  resourceId: string;

  /**
   * @generated from field: string environment_id = 3;
   */
  environmentId: string;

  /**
   * @generated from field: string deployment_id = 4;
   */
  deploymentId: string;
};

/**
 * Describes the message workspace.ReleaseTarget.
 * Use `create(ReleaseTargetSchema)` to create a new message.
 */
export declare const ReleaseTargetSchema: GenMessage<ReleaseTarget>;

/**
 * @generated from message workspace.LiteralValue
 */
export declare type LiteralValue = Message<"workspace.LiteralValue"> & {
  /**
   * @generated from oneof workspace.LiteralValue.data
   */
  data: {
    /**
     * @generated from field: string string = 1;
     */
    value: string;
    case: "string";
  } | {
    /**
     * @generated from field: bool bool = 2;
     */
    value: boolean;
    case: "bool";
  } | {
    /**
     * @generated from field: double double = 3;
     */
    value: number;
    case: "double";
  } | {
    /**
     * @generated from field: int64 int64 = 4;
     */
    value: bigint;
    case: "int64";
  } | {
    /**
     * @generated from field: google.protobuf.Struct object = 5;
     */
    value: JsonObject;
    case: "object";
  } | {
    /**
     * @generated from field: google.protobuf.NullValue null = 6;
     */
    value: NullValue;
    case: "null";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message workspace.LiteralValue.
 * Use `create(LiteralValueSchema)` to create a new message.
 */
export declare const LiteralValueSchema: GenMessage<LiteralValue>;

/**
 * @generated from message workspace.SensitiveValue
 */
export declare type SensitiveValue = Message<"workspace.SensitiveValue"> & {
  /**
   * @generated from field: string value_hash = 1;
   */
  valueHash: string;
};

/**
 * Describes the message workspace.SensitiveValue.
 * Use `create(SensitiveValueSchema)` to create a new message.
 */
export declare const SensitiveValueSchema: GenMessage<SensitiveValue>;

/**
 * @generated from message workspace.ReferenceValue
 */
export declare type ReferenceValue = Message<"workspace.ReferenceValue"> & {
  /**
   * @generated from field: string reference = 1;
   */
  reference: string;

  /**
   * @generated from field: repeated string path = 2;
   */
  path: string[];
};

/**
 * Describes the message workspace.ReferenceValue.
 * Use `create(ReferenceValueSchema)` to create a new message.
 */
export declare const ReferenceValueSchema: GenMessage<ReferenceValue>;

/**
 * @generated from message workspace.Value
 */
export declare type Value = Message<"workspace.Value"> & {
  /**
   * @generated from oneof workspace.Value.data
   */
  data: {
    /**
     * @generated from field: workspace.LiteralValue literal = 7;
     */
    value: LiteralValue;
    case: "literal";
  } | {
    /**
     * @generated from field: workspace.ReferenceValue reference = 8;
     */
    value: ReferenceValue;
    case: "reference";
  } | {
    /**
     * @generated from field: workspace.SensitiveValue sensitive = 9;
     */
    value: SensitiveValue;
    case: "sensitive";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message workspace.Value.
 * Use `create(ValueSchema)` to create a new message.
 */
export declare const ValueSchema: GenMessage<Value>;

/**
 * @generated from message workspace.Release
 */
export declare type Release = Message<"workspace.Release"> & {
  /**
   * @generated from field: workspace.DeploymentVersion version = 1;
   */
  version?: DeploymentVersion;

  /**
   * @generated from field: map<string, workspace.LiteralValue> variables = 2;
   */
  variables: { [key: string]: LiteralValue };

  /**
   * @generated from field: repeated string encrypted_variables = 3;
   */
  encryptedVariables: string[];

  /**
   * @generated from field: workspace.ReleaseTarget release_target = 5;
   */
  releaseTarget?: ReleaseTarget;

  /**
   * @generated from field: string created_at = 4;
   */
  createdAt: string;
};

/**
 * Describes the message workspace.Release.
 * Use `create(ReleaseSchema)` to create a new message.
 */
export declare const ReleaseSchema: GenMessage<Release>;

/**
 * @generated from message workspace.DeploymentVariable
 */
export declare type DeploymentVariable = Message<"workspace.DeploymentVariable"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string key = 2;
   */
  key: string;

  /**
   * @generated from field: string variable_id = 3;
   */
  variableId: string;

  /**
   * @generated from field: optional string description = 4;
   */
  description?: string;

  /**
   * @generated from field: string deployment_id = 5;
   */
  deploymentId: string;

  /**
   * @generated from field: workspace.LiteralValue default_value = 6;
   */
  defaultValue?: LiteralValue;
};

/**
 * Describes the message workspace.DeploymentVariable.
 * Use `create(DeploymentVariableSchema)` to create a new message.
 */
export declare const DeploymentVariableSchema: GenMessage<DeploymentVariable>;

/**
 * @generated from message workspace.DeploymentVariableValue
 */
export declare type DeploymentVariableValue = Message<"workspace.DeploymentVariableValue"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string deployment_variable_id = 3;
   */
  deploymentVariableId: string;

  /**
   * @generated from field: int64 priority = 4;
   */
  priority: bigint;

  /**
   * @generated from field: optional workspace.Selector resource_selector = 6;
   */
  resourceSelector?: Selector;

  /**
   * @generated from field: workspace.Value value = 7;
   */
  value?: Value;
};

/**
 * Describes the message workspace.DeploymentVariableValue.
 * Use `create(DeploymentVariableValueSchema)` to create a new message.
 */
export declare const DeploymentVariableValueSchema: GenMessage<DeploymentVariableValue>;

/**
 * @generated from message workspace.DeploymentVersion
 */
export declare type DeploymentVersion = Message<"workspace.DeploymentVersion"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string tag = 3;
   */
  tag: string;

  /**
   * @generated from field: google.protobuf.Struct config = 4;
   */
  config?: JsonObject;

  /**
   * @generated from field: google.protobuf.Struct job_agent_config = 5;
   */
  jobAgentConfig?: JsonObject;

  /**
   * @generated from field: string deployment_id = 6;
   */
  deploymentId: string;

  /**
   * @generated from field: workspace.DeploymentVersionStatus status = 7;
   */
  status: DeploymentVersionStatus;

  /**
   * @generated from field: optional string message = 8;
   */
  message?: string;

  /**
   * @generated from field: string created_at = 9;
   */
  createdAt: string;
};

/**
 * Describes the message workspace.DeploymentVersion.
 * Use `create(DeploymentVersionSchema)` to create a new message.
 */
export declare const DeploymentVersionSchema: GenMessage<DeploymentVersion>;

/**
 * @generated from message workspace.System
 */
export declare type System = Message<"workspace.System"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string workspace_id = 2;
   */
  workspaceId: string;

  /**
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * @generated from field: optional string description = 4;
   */
  description?: string;
};

/**
 * Describes the message workspace.System.
 * Use `create(SystemSchema)` to create a new message.
 */
export declare const SystemSchema: GenMessage<System>;

/**
 * @generated from message workspace.ComputeReleaseTargetsRequest
 */
export declare type ComputeReleaseTargetsRequest = Message<"workspace.ComputeReleaseTargetsRequest"> & {
  /**
   * @generated from field: repeated workspace.Environment environments = 1;
   */
  environments: Environment[];

  /**
   * @generated from field: repeated workspace.Deployment deployments = 2;
   */
  deployments: Deployment[];

  /**
   * @generated from field: repeated workspace.Resource resources = 3;
   */
  resources: Resource[];
};

/**
 * Describes the message workspace.ComputeReleaseTargetsRequest.
 * Use `create(ComputeReleaseTargetsRequestSchema)` to create a new message.
 */
export declare const ComputeReleaseTargetsRequestSchema: GenMessage<ComputeReleaseTargetsRequest>;

/**
 * Selector is a wrapper for different selector types. For now, only json_selector is supported,
 * but this structure allows for future extensibility (e.g., other selector languages).
 *
 * @generated from message workspace.Selector
 */
export declare type Selector = Message<"workspace.Selector"> & {
  /**
   * @generated from oneof workspace.Selector.value
   */
  value: {
    /**
     * @generated from field: google.protobuf.Struct json = 1;
     */
    value: JsonObject;
    case: "json";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message workspace.Selector.
 * Use `create(SelectorSchema)` to create a new message.
 */
export declare const SelectorSchema: GenMessage<Selector>;

/**
 * PropertyMatcher defines how properties between two entities should match
 * to create a relationship. This enables join-like conditions.
 * Example: VPCs and K8s clusters should match when they're in the same region
 *
 * @generated from message workspace.PropertyMatcher
 */
export declare type PropertyMatcher = Message<"workspace.PropertyMatcher"> & {
  /**
   * Path to the property on the "from" entity using dot notation
   * Examples: "id", "metadata.region", "config.networking.vpc_id"
   * Will be split on "." for nested property access
   *
   * @generated from field: repeated string from_property = 1;
   */
  fromProperty: string[];

  /**
   * Path to the property on the "to" entity using dot notation
   * Examples: "id", "metadata.region", "metadata.vpc_id"
   * Will be split on "." for nested property access
   *
   * @generated from field: repeated string to_property = 2;
   */
  toProperty: string[];

  /**
   * Comparison operator: "equals", "not_equals", "contains", "starts_with", "ends_with", "regex"
   * Default is "equals" if not specified
   *
   * @generated from field: optional string operator = 3;
   */
  operator?: string;
};

/**
 * Describes the message workspace.PropertyMatcher.
 * Use `create(PropertyMatcherSchema)` to create a new message.
 */
export declare const PropertyMatcherSchema: GenMessage<PropertyMatcher>;

/**
 * RelationshipRule defines a rule for creating relationships between entities.
 * A single rule can match multiple entities and create multiple relationship instances.
 * For example: "All VPCs should be related to all Kubernetes clusters in the same region"
 *
 * @generated from message workspace.RelationshipRule
 */
export declare type RelationshipRule = Message<"workspace.RelationshipRule"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: optional string description = 3;
   */
  description?: string;

  /**
   * @generated from field: string reference = 4;
   */
  reference: string;

  /**
   * The type and selector for the source entities (e.g., "resource" with selector for VPCs)
   *
   * @generated from field: string from_type = 5;
   */
  fromType: string;

  /**
   * @generated from field: workspace.Selector from_selector = 6;
   */
  fromSelector?: Selector;

  /**
   * The type and selector for the target entities (e.g., "resource" with selector for K8s clusters)
   *
   * @generated from field: string to_type = 7;
   */
  toType: string;

  /**
   * @generated from field: workspace.Selector to_selector = 8;
   */
  toSelector?: Selector;

  /**
   * Optional property matchers for cross-entity conditions
   * Example: Match VPCs to K8s clusters when metadata.region is the same
   * If empty, creates a relationship between ALL entities matching the selectors (Cartesian product)
   *
   * @generated from field: repeated workspace.PropertyMatcher property_matchers = 11;
   */
  propertyMatchers: PropertyMatcher[];

  /**
   * The semantic type of the relationship (e.g., "contains", "depends_on", "runs_on")
   *
   * @generated from field: string relationship_type = 9;
   */
  relationshipType: string;

  /**
   * Additional metadata for the relationship rule
   *
   * @generated from field: map<string, string> metadata = 10;
   */
  metadata: { [key: string]: string };
};

/**
 * Describes the message workspace.RelationshipRule.
 * Use `create(RelationshipRuleSchema)` to create a new message.
 */
export declare const RelationshipRuleSchema: GenMessage<RelationshipRule>;

/**
 * @generated from message workspace.ComputeReleaseTargetsResponse
 */
export declare type ComputeReleaseTargetsResponse = Message<"workspace.ComputeReleaseTargetsResponse"> & {
  /**
   * @generated from field: repeated workspace.ReleaseTarget release_targets = 1;
   */
  releaseTargets: ReleaseTarget[];
};

/**
 * Describes the message workspace.ComputeReleaseTargetsResponse.
 * Use `create(ComputeReleaseTargetsResponseSchema)` to create a new message.
 */
export declare const ComputeReleaseTargetsResponseSchema: GenMessage<ComputeReleaseTargetsResponse>;

/**
 * @generated from message workspace.ListReleaseTargetsRequest
 */
export declare type ListReleaseTargetsRequest = Message<"workspace.ListReleaseTargetsRequest"> & {
  /**
   * @generated from field: string workspace_id = 1;
   */
  workspaceId: string;

  /**
   * @generated from field: optional workspace.Selector resource_selector = 2;
   */
  resourceSelector?: Selector;

  /**
   * @generated from field: optional workspace.Selector deployment_selector = 3;
   */
  deploymentSelector?: Selector;

  /**
   * @generated from field: optional workspace.Selector environment_selector = 4;
   */
  environmentSelector?: Selector;
};

/**
 * Describes the message workspace.ListReleaseTargetsRequest.
 * Use `create(ListReleaseTargetsRequestSchema)` to create a new message.
 */
export declare const ListReleaseTargetsRequestSchema: GenMessage<ListReleaseTargetsRequest>;

/**
 * @generated from message workspace.ListReleaseTargetsResponse
 */
export declare type ListReleaseTargetsResponse = Message<"workspace.ListReleaseTargetsResponse"> & {
  /**
   * @generated from field: repeated workspace.ReleaseTarget release_targets = 1;
   */
  releaseTargets: ReleaseTarget[];
};

/**
 * Describes the message workspace.ListReleaseTargetsResponse.
 * Use `create(ListReleaseTargetsResponseSchema)` to create a new message.
 */
export declare const ListReleaseTargetsResponseSchema: GenMessage<ListReleaseTargetsResponse>;

/**
 * @generated from message workspace.ListDeploymentsRequest
 */
export declare type ListDeploymentsRequest = Message<"workspace.ListDeploymentsRequest"> & {
  /**
   * @generated from field: string workspace_id = 1;
   */
  workspaceId: string;

  /**
   * @generated from field: optional workspace.Selector deployment_selector = 2;
   */
  deploymentSelector?: Selector;
};

/**
 * Describes the message workspace.ListDeploymentsRequest.
 * Use `create(ListDeploymentsRequestSchema)` to create a new message.
 */
export declare const ListDeploymentsRequestSchema: GenMessage<ListDeploymentsRequest>;

/**
 * @generated from message workspace.ListDeploymentsResponse
 */
export declare type ListDeploymentsResponse = Message<"workspace.ListDeploymentsResponse"> & {
  /**
   * @generated from field: repeated workspace.Deployment deployments = 1;
   */
  deployments: Deployment[];
};

/**
 * Describes the message workspace.ListDeploymentsResponse.
 * Use `create(ListDeploymentsResponseSchema)` to create a new message.
 */
export declare const ListDeploymentsResponseSchema: GenMessage<ListDeploymentsResponse>;

/**
 * @generated from enum workspace.ApprovalStatus
 */
export enum ApprovalStatus {
  /**
   * @generated from enum value: APPROVAL_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: APPROVAL_STATUS_APPROVED = 1;
   */
  APPROVED = 1,

  /**
   * @generated from enum value: APPROVAL_STATUS_REJECTED = 2;
   */
  REJECTED = 2,
}

/**
 * Describes the enum workspace.ApprovalStatus.
 */
export declare const ApprovalStatusSchema: GenEnum<ApprovalStatus>;

/**
 * @generated from enum workspace.JobStatus
 */
export enum JobStatus {
  /**
   * @generated from enum value: JOB_STATUS_CANCELLED = 0;
   */
  CANCELLED = 0,

  /**
   * @generated from enum value: JOB_STATUS_SKIPPED = 1;
   */
  SKIPPED = 1,

  /**
   * @generated from enum value: JOB_STATUS_IN_PROGRESS = 2;
   */
  IN_PROGRESS = 2,

  /**
   * @generated from enum value: JOB_STATUS_ACTION_REQUIRED = 3;
   */
  ACTION_REQUIRED = 3,

  /**
   * @generated from enum value: JOB_STATUS_PENDING = 4;
   */
  PENDING = 4,

  /**
   * @generated from enum value: JOB_STATUS_FAILURE = 5;
   */
  FAILURE = 5,

  /**
   * @generated from enum value: JOB_STATUS_INVALID_JOB_AGENT = 6;
   */
  INVALID_JOB_AGENT = 6,

  /**
   * @generated from enum value: JOB_STATUS_INVALID_INTEGRATION = 7;
   */
  INVALID_INTEGRATION = 7,

  /**
   * @generated from enum value: JOB_STATUS_EXTERNAL_RUN_NOT_FOUND = 8;
   */
  EXTERNAL_RUN_NOT_FOUND = 8,

  /**
   * @generated from enum value: JOB_STATUS_SUCCESSFUL = 9;
   */
  SUCCESSFUL = 9,
}

/**
 * Describes the enum workspace.JobStatus.
 */
export declare const JobStatusSchema: GenEnum<JobStatus>;

/**
 * @generated from enum workspace.DeploymentVersionStatus
 */
export enum DeploymentVersionStatus {
  /**
   * @generated from enum value: DEPLOYMENT_VERSION_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: DEPLOYMENT_VERSION_STATUS_BUILDING = 1;
   */
  BUILDING = 1,

  /**
   * @generated from enum value: DEPLOYMENT_VERSION_STATUS_READY = 2;
   */
  READY = 2,

  /**
   * @generated from enum value: DEPLOYMENT_VERSION_STATUS_FAILED = 3;
   */
  FAILED = 3,

  /**
   * @generated from enum value: DEPLOYMENT_VERSION_STATUS_REJECTED = 4;
   */
  REJECTED = 4,
}

/**
 * Describes the enum workspace.DeploymentVersionStatus.
 */
export declare const DeploymentVersionStatusSchema: GenEnum<DeploymentVersionStatus>;

/**
 * @generated from service workspace.ReleaseTargetService
 */
export declare const ReleaseTargetService: GenService<{
  /**
   * @generated from rpc workspace.ReleaseTargetService.Compute
   */
  compute: {
    methodKind: "unary";
    input: typeof ComputeReleaseTargetsRequestSchema;
    output: typeof ComputeReleaseTargetsResponseSchema;
  },
  /**
   * @generated from rpc workspace.ReleaseTargetService.All
   */
  all: {
    methodKind: "unary";
    input: typeof ListReleaseTargetsRequestSchema;
    output: typeof ListReleaseTargetsResponseSchema;
  },
}>;

/**
 * @generated from service workspace.DeploymentService
 */
export declare const DeploymentService: GenService<{
  /**
   * @generated from rpc workspace.DeploymentService.All
   */
  all: {
    methodKind: "unary";
    input: typeof ListDeploymentsRequestSchema;
    output: typeof ListDeploymentsResponseSchema;
  },
}>;

